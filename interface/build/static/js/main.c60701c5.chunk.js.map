{"version":3,"sources":["connectors.ts","components/Common/ScreenSize.tsx","components/App/Snackbar.tsx","photos/icons/file-icon.svg","ethereum/XENCrypto.js","ethereum/dbxen.js","components/App/Spinner.tsx","components/Contexts/ChainContext.tsx","components/App/Burn.tsx","components/Common/AccountName.tsx","components/App/PermanentDrawer.tsx","ethereum/dbxenViews.js","ethereum/dbxenerc20.js","photos/icons/coin-bag-solid--light.svg","photos/icons/token.svg","photos/icons/coin-bag-solid--dark.svg","photos/icons/wallet--light.svg","photos/icons/wallet--dark.svg","photos/icons/fees.svg","photos/icons/finance.svg","ethereum/signer.js","ethereum/forwarder.js","components/App/Stake.tsx","components/Common/GaEventTracker.tsx","components/Contexts/ThemeContext.tsx","components/Contexts/ThemeProvider.tsx","photos/icons/elephant.svg","photos/white_dbxen.svg","photos/icons/elephant.png","photos/empty.png","photos/icons/copy-1.svg","photos/icons/wallet.svg","photos/icons/diconnect.svg","components/DropdownLanguage.tsx","components/Contexts/ChainProvider.tsx","photos/icons/polygon.svg","photos/icons/avalanche.svg","photos/icons/bnb.svg","photos/icons/fantom.svg","photos/icons/moonbeam.svg","photos/icons/okx.svg","photos/icons/evmos.svg","photos/icons/dc.svg","photos/icons/ethpow.svg","components/Contexts/ChainSetter.tsx","components/App/AppBar.tsx","App.tsx","hooks.ts","reportWebVitals.ts","i18n.js","index.tsx"],"names":["RPC_URLS","injected","InjectedConnector","supportedChainIds","network","NetworkConnector","urls","defaultChainId","useWindowSize","useState","width","height","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","Alert","forwardRef","props","ref","elevation","variant","SnackbarNotification","severity","state","open","message","setState","handleClose","event","reason","Snackbar","autoHideDuration","onClose","sx","abi","require","signerOrProvider","address","ethers","Contract","Spinner","color","rest","viewBox","xmlns","stroke","fill","fillRule","transform","strokeWidth","strokeOpacity","cx","cy","r","d","attributeName","type","from","to","dur","repeatCount","initialChain","chain","deb0xAddress","deb0xViewsAddress","deb0xERC20Address","xenCryptoAddress","chainId","chainName","currency","priceURL","dxnTokenName","setChain","_value","ChainContext","createContext","BigNumber","Burn","context","useWeb3React","library","account","notificationState","setNotificationState","value","setValue","approveBurn","setApproveBurn","balanceGratherThanZero","checkBalance","maticValue","setMaticValue","totalCost","setTotalCost","totalAmountOfXEN","setXENAmount","loading","setLoading","gasLimit","setCurrentGasLimit","valueAndFee","setValueAndFee","totalBatchApproved","setBatchApproved","maxAvailableBatch","setMaxBatch","useContext","t","useTranslation","getAllowanceForAccount","signer","getSigner","xenContract","XENCrypto","allowance","then","amount","batchApproved","Number","utils","formatEther","Math","trunc","setBalance","balanceOf","balance","number","toString","estimationValues","options","method","url","port","headers","data","JSON","stringify","deb0xContract","DBXen","getCurrentCycle","currentCycle","cycleTotalBatchesBurned","numberBatchesBurnedInCurrentCycle","axios","request","result","undefined","price","web3","fromWei","protocol_fee","gasLimitVal","fee","totalValue","toFixed","total","amountToApprove","increaseAllowance","parseEther","wait","catch","error","gasLimitIntervalValue","currentValue","overrides","parseUnits","tx","console","log","setTimeout","className","max","onChange","e","target","onClick","toLocaleString","minimumFractionDigits","maximumFractionDigits","LoadingButton","loadingPosition","disabled","burnXEN","setApproval","formatAccountName","substring","length","PermanentDrawer","connector","activatingConnector","setActivatingConnector","dimensions","ScreenSize","setNetworkName","baseUrl","setBaseUrl","forEach","providers","getNetwork","name","Box","display","Drawer","anchor","href","icon","faTwitter","size","src","document","faGithub","faTelegram","ethSigUtil","ethereumJsUtil","typeName","typeHash","id","EIP712Domain","ForwardRequest","getMetaTxTypeData","verifyingContract","types","domain","version","primaryType","signTypedData","argData","send","buildRequest","forwarder","input","valueParam","getNonce","nonce","gas","validUntilTime","buildTypedData","provider","n","typeData","getDomainSeparator","bufferToHex","TypedDataUtils","hashStruct","signMetaTxRequest","toSign","signature","domainSeparator","createInstance","whitelist","dataFromWhitelist","Stake","category","activate","gaEventTracker","action","ReactGA","setPreviousCycleXENBurned","datePolygon","Date","UTC","dateAvalanche","dateBinance","dateOKXChain","dateFantom","dateDogechain","dateMoonbeam","dateEvmos","dateEthereumPow","now","endDate","setEndDate","renderer","hours","minutes","seconds","completed","zeroPad","FeesPanel","feesUnclaimed","setFeesUnclaimed","getTotalXenBurnedInPreviusCycle","toNumber","deb0xViewsContract","DBXenViews","getUnclaimedFees","fetchClaimFeesResult","fetch","body","response","json","parse","status","sendClaimFeesTx","claimFees","getAddress","includes","interface","encodeFunctionData","feesAccrued","totalXenBurnedPreviousCycle","Card","CardContent","Typography","component","date","fees","alt","CardActions","CyclePanel","currentReward","setCurrentReward","ethereum","currentCycleReward","getChainId","cycleReward","RewardsPanel","rewardsUnclaimed","setRewardsUnclaimed","feeSharePercentage","setFeeSharePercentage","getUnclaimedRewards","unclaimedRewards","getAccWithdrawableStake","accWithdrawableStake","parseFloat","add","currentStartedCycle","summedCycleStakes","totalSupply","feeShare","round","fetchClaimRewardsResult","sendClaimRewardsTx","claimRewards","rewardsAccrued","finance","StakeUnstake","alignment","setAlignment","userStakedAmount","setUserStakedAmount","userUnstakedAmount","setUserUnstakedAmount","tokensForUnstake","setTokenForUnstake","totalStaked","setTotalStaked","amountToUnstake","setAmountToUnstake","amountToStake","setAmountToStake","approved","setApproved","localStorage","getItem","theme","setTheme","accFirstStake","firstStakeCycle","accSecondStake","secondStakeCycle","accStakeCycle","firstStakeCycleAmount","secondStakeCycleAmount","withdawbleStake","totalStakedAmount","setTokensForUntakedAmount","DBXenERC20","deb0xERC20Contract","slice","indexOf","approve","fetchUnstakeResult","sendUnstakeTx","unstake","fetchStakeResult","sendStakeTx","stake","tokensInWallet","setStakedAmount","totalAmountStaked","setUnstakedAmount","ToggleButtonGroup","exclusive","newAlignment","ToggleButton","coinBagDark","coinBagLight","walletDark","walletLight","Grid","container","item","OutlinedInput","placeholder","inputProps","min","Button","getTime","initialThemeState","ThemeContext","ThemeProvider","children","savedThemeLocal","setItem","Provider","DropdownLanguage","i18n","language","setLanguage","anchorEl","setAnchorEl","setOpen","handleLangChange","lang","changeLanguage","onClickAway","currentTarget","Popper","ChainProvider","parseInt","networks","polygon","nativeCurrency","symbol","decimals","rpcUrls","blockExplorerUrls","avalanche","binance","fantom","moonbeam","okx","evmos","doge","ethpow","ChainSetter","on","networkChanged","removeListener","changeNetwork","networkName","setError","Error","params","handleNetworkSwitch","location","reload","ClickAwayListener","charAt","toUpperCase","bnb","dc","ConnectorNames","connectorsByName","Injected","AppBarComponent","deactivate","ensName","totalXENBurned","setTotalXENBurned","xenBurned","getTotalXenBurned","totalNumberOfBatchesBurned","batchBurned","floorPrecised","power","pow","floor","currentStake","pendingStakeWithdrawal","sub","filterFrom","filters","Transfer","filterTo","removeAllListeners","handleClick","logo","currentConnector","activating","connected","toLowerCase","navigator","clipboard","writeText","copyIcon","addToken","walletIcon","disconnectIcon","maintenance","process","REACT_APP_MAINTENANCE_MODE","Network","getLibrary","Web3Provider","pollingInterval","web3App","App","errorMsg","selectedIndex","setSelectedIndex","triedEager","active","tried","setTried","isAuthorized","useEagerConnect","displayErrorMsg","suppress","handleConnect","handleChainChanged","handleAccountsChanged","accounts","handleNetworkChanged","networkId","useInactiveListener","err","style","flexDirection","alignItems","marginTop","marginBottom","maintenanceImg","elephant","deb0xen","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","use","Backend","initReactI18next","init","lng","fallbackLng","interpolation","escapeValue","react","useSuspense","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c60701c5.chunk.js","sourcesContent":["\nimport { InjectedConnector } from '@web3-react/injected-connector'\nimport { NetworkConnector } from '@web3-react/network-connector'\n\n// const POLLING_INTERVAL = 12000\nconst RPC_URLS: { [chainId: number]: string } = {\n    137: 'https://polygon-mainnet.infura.io/v3/6010818c577b4531b1886965421a91d3',\n    43114: 'https://avalanche-mainnet.infura.io/v3/6010818c577b4531b1886965421a91d3',\n    56: 'https://bsc.rpc.blxrbdn.com',\n    250: 'https://endpoints.omniatech.io/v1/fantom/mainnet/public',\n    1284: 'https://moonbeam.api.onfinality.io/public',\n    66: 'https://exchainrpc.okex.org',\n    9001:'https://evmos-evm.publicnode.com',\n    2000:'https://rpc.dogechain.dog',\n    10001:'https://mainnet.ethereumpow.org'\n}\n\nexport const injected = new InjectedConnector({ supportedChainIds: [137, 43114, 56, 250, 1284, 66, 9001, 2000,10001 ] })\n\nexport const network = new NetworkConnector({\n    urls: { 137: RPC_URLS[137], 43114: RPC_URLS[43114], 56: RPC_URLS[56],  250: RPC_URLS[250], 1284: RPC_URLS[1284],\n        66: RPC_URLS[66],  9001: RPC_URLS[9001],  2000: RPC_URLS[2000], 10001: RPC_URLS[10001]},\n    defaultChainId: 137\n})","import React, { useState, useEffect } from 'react'\n\nexport default function useWindowSize() {\n    // Initialize state with undefined width/height so server and client renders match\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n    const [windowSize, setWindowSize] = useState({\n      width: 0,\n      height: 0,\n    });\n    useEffect(() => {\n      // Handler to call on window resize\n      function handleResize() {\n        // Set window width/height to state\n        setWindowSize({\n          width: window.innerWidth,\n          height: window.innerHeight,\n        });\n      }\n      // Add event listener\n      window.addEventListener(\"resize\", handleResize);\n      // Call handler right away so state gets updated with initial window size\n      handleResize();\n      // Remove event listener on cleanup\n      return () => window.removeEventListener(\"resize\", handleResize);\n    }, []); // Empty array ensures that effect is only run on mount\n    return windowSize;\n  }","import { useState, forwardRef, useEffect } from 'react'\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\nconst Alert = forwardRef<HTMLDivElement, AlertProps>(function Alert(\n  props,\n  ref,\n) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport default function SnackbarNotification(props: any) {\n\n  const [state, setState] = useState({ severity: props.state.severity, open: props.state.open, message: props.state.message })\n\n  useEffect(() => {\n    setState({severity: props.state.severity, open: props.state.open, message: props.state.message})\n  }, [props])\n\n  const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setState({\n      message: state.message, open: false,\n      severity: state.severity\n    })\n  };\n\n  return (\n    <Snackbar open={state.open} autoHideDuration={6000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity={state.severity} sx={{ width: '100%' }}>\n        {state.message}\n      </Alert>\n    </Snackbar>\n  )\n}","export default __webpack_public_path__ + \"static/media/file-icon.92106822.svg\";","import { ethers } from \"ethers\";\n\nconst { abi } = require(\"./XENCrypto.json\");\n\nexport default (signerOrProvider, address) => {\n    return new ethers.Contract(address, abi, signerOrProvider);\n}","import { ethers } from \"ethers\";\n\nconst { abi } = require(\"./DBXen.json\");\n\nexport default (signerOrProvider, address) => {\n  return new ethers.Contract(address, abi, signerOrProvider);\n}","// <!-- By Sam Herbert (@sherb), for everyone. More @ http://goo.gl/7AJzbL -->\nexport function Spinner({ color, ...rest }: any) {\n    return (\n        <svg width=\"38\" height=\"38\" viewBox=\"0 0 38 38\" \n            xmlns=\"http://www.w3.org/2000/svg\" stroke={color} {...rest}>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <g transform=\"translate(1 1)\" strokeWidth=\"2\">\n                    <circle strokeOpacity=\".5\" cx=\"18\" cy=\"18\" r=\"18\" />\n                    <path d=\"M36 18c0-9.94-8.06-18-18-18\">\n                    <animateTransform\n                        attributeName=\"transform\"\n                        type=\"rotate\"\n                        from=\"0 18 18\"\n                        to=\"360 18 18\"\n                        dur=\"1s\"\n                        repeatCount=\"indefinite\" />\n                    </path>\n                </g>\n            </g>\n        </svg>\n    )\n}","import { createContext } from \"react\";\n\nexport const initialChain = {\n    chain: {\n        deb0xAddress: \"0x4F3ce26D9749C0f36012C9AbB41BF9938476c462\",\n        deb0xViewsAddress: \"0xE8696A871C5eaB13bA566A4C15b8144AFeEAFfbA\",\n        deb0xERC20Address: \"0x47DD60FA40A050c0677dE19921Eb4cc512947729\",\n        xenCryptoAddress: \"0x2AB0e9e4eE70FFf1fB9D67031E44F6410170d00e\",\n        chainId: \"137\",\n        chainName: \"polygon\",\n        currency: \"MATIC\",\n        priceURL: \"https://polygon-mainnet.infura.io/v3/6010818c577b4531b1886965421a91d3\",\n        dxnTokenName: \"mDXN\"\n    },\n    setChain: (_value: any) => {}\n}\n\nconst ChainContext = createContext(initialChain);\nexport default ChainContext;","import { useState, useEffect, useContext } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport XENCrypto from '../../ethereum/XENCrypto';\nimport DBXen from \"../../ethereum/dbxen\"\nimport { ethers } from \"ethers\";\nimport \"../../componentsStyling/permanentDrawer.scss\";\nimport SnackbarNotification from './Snackbar';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport { Spinner } from './Spinner';\nimport axios, { Method } from 'axios';\nimport web3 from 'web3';\nimport ChainContext from '../Contexts/ChainContext';\nimport { useTranslation } from \"react-i18next\";\nconst { BigNumber } = require(\"ethers\");\n\nexport function Burn(): any {\n    const context = useWeb3React()\n    const { library, account } = context\n    const [notificationState, setNotificationState] = useState({});\n    const [value, setValue] = useState(1);\n    const [approveBurn, setApproveBurn] = useState<boolean>(false);\n    const [balanceGratherThanZero, checkBalance] = useState(\"\");\n    const [maticValue, setMaticValue] = useState<any>();\n    const [totalCost, setTotalCost] = useState<any>();\n    const [totalAmountOfXEN, setXENAmount] = useState<any>();\n    const [loading, setLoading] = useState(false)\n    const [gasLimit, setCurrentGasLimit] = useState<number>();\n    const [valueAndFee, setValueAndFee] = useState<any>();\n    const [totalBatchApproved, setBatchApproved] = useState<number>();\n    const [maxAvailableBatch, setMaxBatch] = useState<number>(0);\n    const { chain }  = useContext(ChainContext)\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        getAllowanceForAccount();\n        estimationValues();\n    }, [account]);\n\n    useEffect(() => {\n    }, [chain.deb0xAddress]);\n\n    useEffect(() => {\n        getAllowanceForAccount();\n        setXENAmount(value * 2500000);\n        estimationValues();\n        setBalance();\n    }, [value]);\n\n    useEffect(() => {\n        setBalance()\n    }, [account, balanceGratherThanZero]);\n\n    async function getAllowanceForAccount() {\n        const signer = library.getSigner(0)\n        const xenContract = XENCrypto(signer, chain.xenCryptoAddress);\n        await xenContract.allowance(account, chain.deb0xAddress).then((amount: any) =>{\n            let batchApproved = Number(ethers.utils.formatEther(amount)) / 2500000;\n            setBatchApproved(Math.trunc(batchApproved));\n            Number(ethers.utils.formatEther(amount)) < value * 2500000 ?\n                setApproveBurn(false) :\n                setApproveBurn(true)\n                setBalance();\n            })\n   \n    }\n\n    async function setBalance() {\n        setLoading(true);\n        const signer = library.getSigner(0)\n        const xenContract = XENCrypto(signer, chain.xenCryptoAddress);\n        let number;\n\n        await xenContract.balanceOf(account).then((balance: any) => {\n            number = ethers.utils.formatEther(balance);\n            setMaxBatch(Math.trunc(Number(number)/2500000))\n            checkBalance(number.toString())\n            setLoading(false);\n        })\n    }\n\n    async function estimationValues() {\n        let priceURL = chain.priceURL;\n        let method: Method = 'POST';\n        const options = {\n            method: method,\n            url: priceURL,\n            port: 443,\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            data: JSON.stringify({\n                \"jsonrpc\": \"2.0\", \"method\": \"eth_gasPrice\", \"params\": [], \"id\": 1\n            })\n        };\n\n        const signer = library.getSigner(0);\n        const deb0xContract = DBXen(signer, chain.deb0xAddress)\n        await deb0xContract.getCurrentCycle().then(async (currentCycle: any) => {\n            await deb0xContract.cycleTotalBatchesBurned(currentCycle).then(\n                async (numberBatchesBurnedInCurrentCycle: any) => {\n                    if(Number(chain.chainId) !=56 && Number(chain.chainId) != 66 && Number(chain.chainId) != 2000){\n                    await axios.request(options).then((result) => {\n                        if(result.data.result != undefined){\n                            let price = Number(web3.utils.fromWei(result.data.result.toString(), \"Gwei\"));\n                        let protocol_fee = value * (1 - 0.00005 * value);\n                        let gasLimitVal = 0;\n                        (Number(chain.chainId)) === 137 ?\n                        numberBatchesBurnedInCurrentCycle != 0 ?\n                            gasLimitVal = (BigNumber.from(\"350000\")) :\n                            gasLimitVal = (BigNumber.from(\"500000\"))\n                        :\n                        numberBatchesBurnedInCurrentCycle != 0 ?\n                        gasLimitVal = (BigNumber.from(\"500000\")) :\n                        gasLimitVal = (BigNumber.from(\"700000\"))\n                        setCurrentGasLimit(gasLimitVal);\n                        let fee = gasLimitVal * price * protocol_fee / 1000000000;\n                        let totalValue = fee + (fee / ((1 - 0.00005 * value) * value));\n\n                        setValueAndFee({ fee: fee.toFixed(4), total: totalValue.toFixed(4) })\n                        setMaticValue(fee.toFixed(4));\n                        setTotalCost(totalValue.toFixed(4));\n                        }\n                    })\n                }\n                 else {\n                        if(Number(chain.chainId) === 56){\n                        let price = 5;\n                        let protocol_fee = value * (1 - 0.00005 * value);\n                        let gasLimitVal = 0;\n                        numberBatchesBurnedInCurrentCycle != 0 ?\n                            gasLimitVal = (BigNumber.from(\"350000\")) :\n                            gasLimitVal = (BigNumber.from(\"500000\"))\n                   \n                        setCurrentGasLimit(gasLimitVal);\n                        let fee = gasLimitVal * price * protocol_fee / 1000000000;\n                        let totalValue = fee + (fee / ((1 - 0.00005 * value) * value));\n                        setValueAndFee({ fee: fee.toFixed(4), total: totalValue.toFixed(4) })\n                        setMaticValue(fee.toFixed(4));\n                        setTotalCost(totalValue.toFixed(4));\n                    }\n                    if(Number(chain.chainId) === 2000){\n                        let price = 250;\n                        let protocol_fee = value * (1 - 0.00005 * value);\n                        let gasLimitVal = 0;\n                        numberBatchesBurnedInCurrentCycle != 0 ?\n                            gasLimitVal = (BigNumber.from(\"350000\")) :\n                            gasLimitVal = (BigNumber.from(\"500000\"))\n                   \n                        setCurrentGasLimit(gasLimitVal);\n                        let fee = gasLimitVal * price * protocol_fee / 1000000000;\n                        let totalValue = fee + (fee / ((1 - 0.00005 * value) * value));\n                        setValueAndFee({ fee: fee.toFixed(5), total: totalValue.toFixed(5) })\n                        setMaticValue(fee.toFixed(5));\n                        setTotalCost(totalValue.toFixed(5));\n                    }\n                 else if(Number(chain.chainId) === 66){\n                    let price = 0.1;\n                    let protocol_fee = value * (1 - 0.00005 * value);\n                    let gasLimitVal = 0;\n                    numberBatchesBurnedInCurrentCycle != 0 ?\n                        gasLimitVal = (BigNumber.from(\"350000\")) :\n                        gasLimitVal = (BigNumber.from(\"500000\"))\n               \n                    setCurrentGasLimit(gasLimitVal);\n                    let fee = gasLimitVal * price * protocol_fee / 1000000000;\n                    let totalValue = fee + (fee / ((1 - 0.00005 * value) * value));\n                    setValueAndFee({ fee: fee.toFixed(5), total: totalValue.toFixed(5) })\n                    setMaticValue(fee.toFixed(5));\n                    setTotalCost(totalValue.toFixed(5));\n                }\n            }\n                }\n            )\n        })\n    }\n\n    async function setApproval() {\n        setLoading(true);\n        const signer = library.getSigner(0)\n        const xenContract = XENCrypto(signer, chain.xenCryptoAddress)\n        let amountToApprove = 0;\n            if(totalBatchApproved != undefined){\n                if(value > totalBatchApproved){\n                    amountToApprove = value - totalBatchApproved;\n                }\n            }\n        try {\n            const tx = await xenContract.increaseAllowance(chain.deb0xAddress, ethers.utils.parseEther(Number(amountToApprove*2500000).toString()))\n            tx.wait()\n                .then((result: any) => {\n                    getAllowanceForAccount();\n                    setNotificationState({\n                        message: \"Your succesfully approved contract for burn.\", open: true,\n                        severity: \"success\"\n                    })\n                    setLoading(false)\n                })\n                .catch((error: any) => {\n                    setNotificationState({\n                        message: \"Contract couldn't be approved for burn!\", open: true,\n                        severity: \"error\"\n                    })\n                    setLoading(false)\n                })\n        } catch (error) {\n            setNotificationState({\n                message: \"You rejected the transaction. Contract hasn't been approved for burn.\", open: true,\n                severity: \"info\"\n            })\n            setLoading(false)\n        }\n    }\n\n    async function burnXEN() {\n        setLoading(true)\n        const signer = await library.getSigner(0)\n        const deb0xContract = DBXen(signer, chain.deb0xAddress)\n        let gasLimitIntervalValue = gasLimit\n        let currentValue = valueAndFee.fee;\n  \n        try {\n            const overrides =\n            {\n                value: ethers.utils.parseUnits(currentValue.toString(), \"ether\"),\n                gasLimit: gasLimitIntervalValue\n            }\n            const tx = await deb0xContract[\"burnBatch(uint256)\"](value, overrides)\n\n            await tx.wait()\n                .then((result: any) => {\n                    setNotificationState({\n                        message: \"Burn completed\",\n                        open: true,\n                        severity: \"success\"\n                    })\n                    getAllowanceForAccount();\n                    setLoading(false)\n                })\n                .catch((error: any) => {\n                    setNotificationState({\n                        message: \"Something went wrong!\",\n                        open: true,\n                        severity: \"error\"\n                    })\n                    setLoading(false)\n                })\n        } catch (error: any) {\n            console.log(error.message)\n            setNotificationState({\n                message: \"You rejected the transaction.\",\n                open: true,\n                severity: \"info\"\n            })\n            setLoading(false)\n        }\n    }\n\n    useEffect(() => {\n        setTimeout(() => { setNotificationState({}) }, 2000)\n    }, [notificationState])\n\n    const handleInputChange = (e: any) => {\n        if (value > 10000) {\n            setValue(10000)\n        } else {\n            setValue(e.target.value);\n        }\n    }\n\n    const incNum = () => {\n        if (value < 10000)\n            setValue(Number(value) + 1);\n    };\n\n    const decNum = () => {\n        if (value > 1)\n            setValue(value - 1);\n    }\n\n    useEffect(() => {\n        if (value > 10000) {\n            setValue(10000)\n        }\n        if (value <= 0) {\n            setValue(1)\n        }\n    }, [value])\n\n    return (\n        <>\n            <SnackbarNotification state={notificationState}\n                setNotificationState={setNotificationState} />\n            <div className=\"side-menu--bottom burn-container\">\n                <div className=\"row\">\n                    <p className=\"text-center mb-0\">{t(\"burn.label\")}</p>\n                    <p className=\"text-center\">(1 batch = 2,500,000 XEN)</p>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col input-col\">\n                        <input type=\"number\" value={value} max=\"10000\" onChange={handleInputChange} />\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <button className=\"btn count-btn col\" type=\"button\" onClick={decNum}>-</button>\n                    <button className=\"btn count-btn col\" type=\"button\" onClick={incNum}>+</button>\n                </div>\n                <div className=\"row\">\n                    <button className=\"btn count-btn max-btn col\" type=\"button\"\n                        onClick={() => setValue(10000)}>{t(\"burn.max\")}</button>\n                </div>\n                <div className=\"values-container\">\n                    <div className=\"value-content\">\n                        <p>{t(\"burn.protocol_fee\")}:</p>\n                        <p> ~{maticValue} {chain.currency}</p>\n                    </div>\n                    <div className=\"value-content\">\n                        <p>{t(\"burn.transaction_cost\")}:</p>\n                        <p> ~{totalCost} {chain.currency}</p>\n                    </div>\n                    <div className=\"value-content\">\n                        <p>{t(\"burn.xen_burned\")}:</p>\n                        <p>\n                            {Number(totalAmountOfXEN).toLocaleString('en-US', {\n                                minimumFractionDigits: 2,\n                                maximumFractionDigits: 2\n                            })} XEN</p>\n                    </div>\n                </div>\n                {approveBurn ?\n                maxAvailableBatch < value ?\n                    <LoadingButton className=\"burn-btn\"\n                    loadingPosition=\"end\"\n                    disabled={true}>\n                    {loading ? <Spinner color={'black'} /> : \"Insufficient XEN balance\"}\n                </LoadingButton> :\n                    <LoadingButton className=\"burn-btn\"\n                        loadingPosition=\"end\"\n                        onClick={() => burnXEN()} >\n                        {loading ? <Spinner color={'black'} /> : t(\"burn.burn_button\")}\n                    </LoadingButton> :\n                    balanceGratherThanZero === '0.0' || balanceGratherThanZero === '0' ?\n                        <LoadingButton className=\"burn-btn\"\n                            loadingPosition=\"end\"\n                            disabled={balanceGratherThanZero === '0.0' || balanceGratherThanZero === '0'}>\n                            {loading ? <Spinner color={'black'} /> : t(\"burn.balance\")}\n                        </LoadingButton> :\n                        <LoadingButton className=\"burn-btn\"\n                            loadingPosition=\"end\"\n                            disabled={balanceGratherThanZero === '0.0' || balanceGratherThanZero === '0'}\n                            onClick={() => setApproval()} >\n                            {loading ? <Spinner color={'black'} /> : t(\"burn.approve_button\")}\n                        </LoadingButton>\n                }\n            </div>\n        </>\n    )\n}\n","export default function formatAccountName(account: string)\n{   \n    return `${account.substring(0, 5)}...${account.substring(account.length - 4)}`\n}","import React, { useState, useEffect, useContext, useDebugValue } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport Box from '@mui/material/Box';\nimport Drawer from '@mui/material/Drawer';\nimport { injected } from '../../connectors';\nimport { ethers } from \"ethers\";\nimport \"../../componentsStyling/permanentDrawer.scss\";\nimport ScreenSize from '../Common/ScreenSize';\nimport SnackbarNotification from './Snackbar';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter, faGithub, faTelegram } from \"@fortawesome/free-brands-svg-icons\";\nimport document from \"../../photos/icons/file-icon.svg\";\nimport { Burn } from './Burn';\nimport formatAccountName from '../Common/AccountName';\nimport ChainContext from '../Contexts/ChainContext';\n\ndeclare global {\n    interface Window {\n        ethereum: any;\n    }\n}\n\nexport function PermanentDrawer(props: any): any {\n    const context = useWeb3React()\n    const { connector } = context\n    const [activatingConnector, setActivatingConnector] = useState<any>()\n    const dimensions = ScreenSize();\n    const [notificationState, setNotificationState] = useState({});\n    const [networkName, setNetworkName] = useState<any>();\n    const { chain } = useContext(ChainContext);\n    const [baseUrl, setBaseUrl] = useState(\"\");\n\n    useEffect(() => {\n        injected.supportedChainIds?.forEach(chainId =>\n            setNetworkName((ethers.providers.getNetwork(chainId).name)));\n        if (activatingConnector && activatingConnector === connector) {\n            setActivatingConnector(undefined)\n        }\n    }, [activatingConnector, connector])\n\n    useEffect(() => {\n        switch(Number(chain.chainId)) {\n            case 137:\n                setBaseUrl(\"https://polygonscan.com/address/\")\n                break;\n            case 43114:\n                setBaseUrl(\"https://snowtrace.io/address/\")\n                break;\n            case 56:\n                setBaseUrl(\"https://bscscan.com/address/\")\n                break;\n            case 250:\n                setBaseUrl(\"https://ftmscan.com/address/\")\n                break;\n            case 1284:\n                setBaseUrl(\"https://moonbeam.moonscan.io/address/\")\n                break;\n            case 66:\n                setBaseUrl(\"https://www.oklink.com/okc/address/\")\n                break;\n            case 9001:\n                setBaseUrl(\"https://escan.live/address/\")\n                break;\n            case 2000:\n                setBaseUrl(\"https://explorer.dogechain.dog/address/\")\n                break;\n            case 10001:\n                setBaseUrl(\"https://www.oklink.com/ethw/address/\")\n                break;\n        }\n    }, [])\n\n    useEffect(() => {\n        setTimeout(() => { setNotificationState({}) }, 2000)\n    }, [notificationState])\n    return (\n        <>\n            <SnackbarNotification state={notificationState}\n                setNotificationState={setNotificationState} />\n            {dimensions.width > 768 ?\n                <Box className=\"side-menu-box\" sx={{ display: 'flex' }}>\n                    <Drawer variant=\"permanent\"\n                        anchor='left'\n                        className=\"side-menu\">\n                        <div className=\"image-container\">\n                            <div className=\"img\"></div>\n                        </div>\n                        <Burn />\n                        <div className=\"content\">\n                            <div className=\"social-media\">\n                                <a href=\"https://twitter.com/DBXen_crypto\" target=\"_blank\" className=\"logo-text-color\">\n                                    <FontAwesomeIcon icon={faTwitter} size=\"xl\" />\n                                </a>\n                                <a href=\"https://dbxen.gitbook.io/dbxen-litepaper/\" target=\"_blank\" className=\"logo-text-color\">\n                                    <img src={document} />\n                                </a>\n                                <a href=\"https://github.com/deb0x/dbXenBurnerProject\" target=\"_blank\" className=\"logo-text-color\">\n                                    <FontAwesomeIcon icon={faGithub} size=\"xl\" />\n                                </a>\n                                <a href=\"https://t.me/+_Q3prZI35gJkZmI0\" target=\"_blank\" className=\"logo-text-color\">\n                                    <FontAwesomeIcon icon={faTelegram} size=\"xl\" />\n                                </a>\n                            </div>\n                            <div className=\"contracts\">\n                                <div className=\"row\">\n                                    <span className=\"col-6\">DBXen: </span>\n                                    <a className=\"col-6\" target=\"_blank\"\n                                        href={baseUrl+chain.deb0xAddress}>\n                                        {formatAccountName(chain.deb0xAddress)}\n                                    </a>\n                                </div>\n                                <div className=\"row\">\n                                    <span className=\"col-6\">DBXenERC20: </span>\n                                    <a className=\"col-6\" target=\"_blank\"\n                                        href={baseUrl+chain.deb0xERC20Address}>\n                                        {formatAccountName(chain.deb0xERC20Address)}\n                                    </a>\n                                </div>\n                                <div className=\"row\">\n                                    <span className=\"col-6\">DBXenViews:</span>\n                                    <a className=\"col-6\" target=\"_blank\"\n                                        href={baseUrl+chain.deb0xViewsAddress}>\n                                        {formatAccountName(chain.deb0xViewsAddress)}\n                                    </a>\n                                </div>\n                            </div>\n                        </div>\n                    </Drawer>\n                </Box> : <></>\n            }\n\n        </>\n    );\n}","import { ethers } from \"ethers\";\n\nconst { abi } = require(\"./DBXenViews.json\");\n\nexport default (signerOrProvider, address) => {\n    return new ethers.Contract(address, abi, signerOrProvider);\n}","import { ethers } from \"ethers\";\n\nconst { abi } = require(\"./DBXenERC20.json\");\n\nexport default (signerOrProvider, address) => {\n    return new ethers.Contract(address, abi, signerOrProvider);\n}\n","export default __webpack_public_path__ + \"static/media/coin-bag-solid--light.d9344235.svg\";","export default __webpack_public_path__ + \"static/media/token.0bd78e9a.svg\";","export default __webpack_public_path__ + \"static/media/coin-bag-solid--dark.b9b74873.svg\";","export default __webpack_public_path__ + \"static/media/wallet--light.60fbc32b.svg\";","export default __webpack_public_path__ + \"static/media/wallet--dark.307c5384.svg\";","export default __webpack_public_path__ + \"static/media/fees.50cb4df6.svg\";","export default __webpack_public_path__ + \"static/media/finance.d8ebf4c0.svg\";","const ethSigUtil = require('eth-sig-util');\n\nconst ethers = require('ethers')\n\nconst ethereumJsUtil = require('ethereumjs-util')\n\nconst GENERIC_PARAMS = 'address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data,uint256 validUntilTime'\nconst typeName = `ForwardRequest(${GENERIC_PARAMS})`\nconst typeHash = ethers.utils.id(typeName)\n\nconst EIP712Domain = [\n    { name: 'name', type: 'string' },\n    { name: 'version', type: 'string' },\n    { name: 'chainId', type: 'uint256' },\n    { name: 'verifyingContract', type: 'address' }\n];\n\nconst ForwardRequest = [\n    { name: 'from', type: 'address' },\n    { name: 'to', type: 'address' },\n    { name: 'value', type: 'uint256' },\n    { name: 'gas', type: 'uint256' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'data', type: 'bytes' },\n    { name: 'validUntilTime', type: 'uint256' }\n];\n\nfunction getMetaTxTypeData(chainId, verifyingContract) {\n    return {\n        types: {\n            EIP712Domain,\n            ForwardRequest,\n        },\n        domain: {\n            name: 'Forwarder',\n            version: '0.0.1',\n            chainId,\n            verifyingContract,\n        },\n        primaryType: 'ForwardRequest',\n    }\n};\n\nasync function signTypedData(signer, from, data) {\n    const [method, argData] = ['eth_signTypedData_v4', JSON.stringify(data)]\n    return await signer.send(method, [from, argData]);\n}\n\nasync function buildRequest(forwarder, input, valueParam) {\n    const value = valueParam ? valueParam : '0';\n    const nonce = await forwarder.getNonce(input.from).then(nonce => nonce.toString());\n    return { value, gas: '100000', nonce, validUntilTime: '0', ...input };\n}\n\nasync function buildTypedData(forwarder, request) {\n    const chainId = await forwarder.provider.getNetwork().then(n => n.chainId);\n    const typeData = getMetaTxTypeData(chainId, forwarder.address);\n    return {...typeData, message: request };\n}\n\nasync function getDomainSeparator(forwarder) {\n    const chainId = await forwarder.provider.getNetwork().then(n => n.chainId);\n    const typeData = getMetaTxTypeData(chainId, forwarder.address);\n    return ethereumJsUtil.bufferToHex(ethSigUtil.TypedDataUtils.hashStruct('EIP712Domain', typeData.domain, { EIP712Domain }, 'V4'))\n}\n\nexport async function signMetaTxRequest(signer, forwarder, input, value) {\n    const request = await buildRequest(forwarder, input, value);\n    const toSign = await buildTypedData(forwarder, request);\n    const signature = await signTypedData(signer, input.from, toSign);\n    const domainSeparator = await getDomainSeparator(forwarder)\n    return { typeHash, domainSeparator, signature, request };\n}","import { ethers } from 'ethers';\nimport { Forwarder as address } from '../deploy.json';\n\nconst { abi } = require(\"./Forwarder.json\");\n\nexport function createInstance(provider) {\n  return new ethers.Contract(address, abi, provider);\n}\n","import { useState, useEffect, useContext } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport {\n    Card, CardActions, CardContent, Button, Grid,\n    Typography, Box, OutlinedInput\n} from '@mui/material';\n\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport DBXen from \"../../ethereum/dbxen\"\nimport DBXenViews from \"../../ethereum/dbxenViews\";\nimport DBXenERC20 from \"../../ethereum/dbxenerc20\"\nimport SnackbarNotification from './Snackbar';\nimport { BigNumber, ethers } from \"ethers\";\nimport \"../../componentsStyling/stake.scss\";\nimport token from \"../../photos/icons/token.svg\"\nimport coinBagLight from \"../../photos/icons/coin-bag-solid--light.svg\";\nimport coinBagDark from \"../../photos/icons/coin-bag-solid--dark.svg\";\nimport walletLight from \"../../photos/icons/wallet--light.svg\";\nimport walletDark from \"../../photos/icons/wallet--dark.svg\";\nimport fees from \"../../photos/icons/fees.svg\";\nimport finance from \"../../photos/icons/finance.svg\";\nimport { signMetaTxRequest } from '../../ethereum/signer';\nimport { createInstance } from '../../ethereum/forwarder'\nimport dataFromWhitelist from '../../constants.json';\nimport useAnalyticsEventTracker from '../Common/GaEventTracker';\nimport Countdown, { zeroPad } from \"react-countdown\";\nimport { useTranslation } from 'react-i18next';\nimport ChainContext from '../Contexts/ChainContext';\n\nconst { whitelist } = dataFromWhitelist;\n\nexport function Stake(props: any): any {\n\n    const { account, library, activate } = useWeb3React()\n    const { chain }  = useContext(ChainContext)\n    const [notificationState, setNotificationState] = useState({})\n    const gaEventTracker = useAnalyticsEventTracker('Stake');\n    const [previousCycleXENBurned, setPreviousCycleXENBurned] = useState<any>();\n    const datePolygon: any = new Date(Date.UTC(2023, 3, 17, 14, 3, 19, 0));\n    const dateAvalanche: any = new Date(Date.UTC(2023, 3, 17, 14, 7, 20, 0));\n    const dateBinance: any = new Date(Date.UTC(2023, 3, 17, 13, 57, 40, 0));\n    const dateOKXChain: any = new Date(Date.UTC(2023, 3, 17, 11, 24, 7, 0));\n    const dateFantom: any = new Date(Date.UTC(2023, 3, 17, 11, 44, 7, 0));\n    const dateDogechain: any = new Date(Date.UTC(2023, 3, 17, 11, 55, 14, 0));\n    const dateMoonbeam: any = new Date(Date.UTC(2023, 3, 17, 12, 3, 30, 0));\n    const dateEvmos: any = new Date(Date.UTC(2023, 3, 17, 12, 16, 48, 0));\n    const dateEthereumPow: any = new Date(Date.UTC(2023, 3, 17, 12, 24, 59, 0));\n    const now: any = Date.now();\n    const { t } = useTranslation();\n    const [endDate, setEndDate] = useState<any>();\n\n    const renderer = ({ hours, minutes, seconds, completed }: any) => {\n        if (completed) {\n            // Render a complete state\n            return;\n        } else {\n            // Render a countdown\n            return (\n                <span>\n                    ~ {zeroPad(hours)}:{zeroPad(minutes)}:{zeroPad(seconds)}\n                </span>\n            );\n        }\n    };\n\n    useEffect(() => {\n        switch(Number(chain.chainId)) {\n            case 137: \n                setEndDate(datePolygon.getTime() - now);\n                break;\n            case 43114: \n                setEndDate(dateAvalanche.getTime() - now);\n                break;\n            case 56:\n                setEndDate(dateBinance.getTime() - now);\n                break;\n            case 250:\n                setEndDate(dateFantom.getTime() - now);\n                break;\n            case 1284:\n                setEndDate(dateMoonbeam.getTime() - now);\n                break;\n            case 66:\n                setEndDate(dateOKXChain.getTime() - now);\n                break;\n            case 9001:\n                setEndDate(dateEvmos.getTime() - now);\n                break;\n            case 2000:\n                setEndDate(dateDogechain.getTime() - now);\n                break;\n            case 10001:\n                setEndDate(dateEthereumPow.getTime() - now);\n                break;\n        }\n    }, [])\n\n    function FeesPanel() {\n        const [feesUnclaimed, setFeesUnclaimed] = useState(\"\")\n        const [loading, setLoading] = useState(false)\n\n        useEffect(() => {\n            feesAccrued()\n        }, [feesUnclaimed]);\n\n\n        useEffect(() => {\n            totalXenBurnedPreviousCycle();\n        }, []);\n\n        async function totalXenBurnedPreviousCycle() {\n            await getTotalXenBurnedInPreviusCycle().then((result: any) => {\n                setPreviousCycleXENBurned(result);\n            })\n        }\n\n        async function getTotalXenBurnedInPreviusCycle() {\n            const signer = await library.getSigner(0)\n            const deb0xContract = DBXen(signer, chain.deb0xAddress)\n\n            await deb0xContract.getCurrentCycle().then(async (currentCycle: any) => {\n                if (currentCycle != 0) {\n                    await deb0xContract.cycleTotalBatchesBurned(currentCycle)\n                        .then((numberBatchesBurnedInCurrentCycle: any) => {\n                            return numberBatchesBurnedInCurrentCycle.toNumber() * 2500000;\n                        })\n                }\n            })\n            return 0;\n        }\n\n        async function feesAccrued() {\n            const deb0xViewsContract = DBXenViews(library, chain.deb0xViewsAddress);\n            await deb0xViewsContract.getUnclaimedFees(account).then((result: any) => {\n                setFeesUnclaimed(ethers.utils.formatEther(result))\n            });\n        }\n\n        async function fetchClaimFeesResult(request: any, url: any) {\n            await fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(request),\n                headers: { 'Content-Type': 'application/json' },\n            })\n                .then((response) => response.json())\n                .then(async (data) => {\n                    try {\n                        const { tx: txReceipt } = JSON.parse(data.result)\n                        if (txReceipt.status == 1) {\n                            setNotificationState({\n                                message: t(\"fees.toastify.success\"), open: true,\n                                severity: \"success\"\n                            })\n                        } else {\n                            setNotificationState({\n                                message: t(\"fees.toastify.error\"), open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    } catch (error) {\n                        if (data.status == \"pending\") {\n                            setNotificationState({\n                                message: t(\"fees.toastify.info\"),\n                                open: true,\n                                severity: \"info\"\n                            })\n                        } else if (data.status == \"error\") {\n                            setNotificationState({\n                                message: t(\"fees.toastify.transaction_error\"),\n                                open: true,\n                                severity: \"error\"\n                            })\n                        }\n                    }\n\n                })\n        }\n\n        async function sendClaimFeesTx(deb0xContract: any) {\n            try {\n                const tx = await deb0xContract.claimFees()\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: t(\"fees.toastify.success\"), open: true,\n                            severity: \"success\"\n                        })\n                        //setLoading(false)\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: t(\"fees.toastify.error\"), open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n            } catch (error: any) {\n                setNotificationState({\n                    message: t(\"fees.toastify.rejected\"),\n                    open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function claimFees() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = DBXen(signer, chain.deb0xAddress)\n\n            const from = signer.getAddress();\n            if (whitelist.includes(from)) {\n                const url = \"https://api.defender.openzeppelin.com/autotasks/b939da27-4a61-4464-8d7e-4b0c5dceb270/runs/webhook/f662ac31-8f56-4b4c-9526-35aea314af63/SPs6smVfv41kLtz4zivxr8\";\n                const forwarder = createInstance(library)\n                const data = deb0xContract.interface.encodeFunctionData(\"claimFees()\")\n                const to = deb0xContract.address\n\n                try {\n                    const request = await signMetaTxRequest(library, forwarder, { to, from, data });\n\n                    gaEventTracker(\"Success: Claim fees\");\n\n                    await fetchClaimFeesResult(request, url)\n\n                } catch (error: any) {\n                    setNotificationState({\n                        message: t(\"fees.toastify.rejected\"),\n                        open: true,\n                        severity: \"info\"\n                    })\n\n                    gaEventTracker(\"Rejected: Claim fees\");\n                }\n            } else {\n                await sendClaimFeesTx(deb0xContract)\n            }\n        }\n\n        return (\n            <>\n            <Card variant=\"outlined\" className=\"card-container\">\n                <CardContent className=\"row\">\n                    <div className=\"col-12 col-md-8 mb-2\">\n                        <Typography variant=\"h4\" component=\"div\" className=\"rewards mb-3\">\n                            {t(\"fees.title\")}\n                        </Typography>\n                        <Typography className=\"data-height\">\n                            {t(\"fees.unclaimed_fees\")} {chain.currency} {t(\"fees.unclaimed_fees_2\")}:&nbsp;\n                                <strong>\n                                    {Number(feesUnclaimed).toLocaleString('en-US', {\n                                        minimumFractionDigits: 10,\n                                        maximumFractionDigits: 10\n                                    })}\n                                </strong>\n                            </Typography>\n                            <p className='my-2 counter'>\n                                {t(\"fees.counter\")} \n                                <Countdown date={Date.now() + endDate} renderer={renderer} />\n                            </p>\n                        </div>\n                        <div className='col-12 col-md-4 d-flex justify-content-end align-items-start'>\n                            <img src={fees} alt=\"trophyRewards\" className=\"p-3 medium-img\" />\n                        </div>\n                    </CardContent>\n                    <CardActions className='button-container px-3'>\n                        <LoadingButton\n                            className=\"collect-btn\"\n                            disabled={feesUnclaimed == \"0.0\"}\n                            loading={loading}\n                            variant=\"contained\"\n                            onClick={claimFees}>\n                            {t(\"fees.collect\")}\n                        </LoadingButton>\n                    </CardActions>\n                </Card>\n            </>\n        )\n    }\n\n    function CyclePanel() {\n        const [currentReward, setCurrentReward] = useState(\"\")\n\n    \n        async function getChainId() {\n            const currentChainId = await window.ethereum.request({\n                method: 'eth_chainId',\n            }).then((result:any) =>{\n                \n            })\n        }\n\n        useEffect(() => {\n            getChainId();\n        }, [])\n\n        useEffect(() => {\n            cycleReward()\n        }, [currentReward]);\n\n        async function cycleReward() {\n            const deb0xContract = DBXen(library, chain.deb0xAddress);\n            await deb0xContract.currentCycleReward().then((result: any) => {\n                setCurrentReward(ethers.utils.formatEther(result))\n            })\n        }\n        return (\n            <>\n            <Card variant=\"outlined\" className=\"card-container\">\n                <CardContent className=\"row\">\n                    <div className=\"col-12 col-md-12 mb-2\">\n                        <Typography variant=\"h4\" component=\"div\" className=\"rewards mb-3\">\n                            {t(\"daily_stats.title\")}\n                        </Typography>\n                        <Typography className=\"data-height\">\n                            {t(\"daily_stats.this_cycle\")}:&nbsp; \n                            <strong>\n                                {Number(currentReward).toLocaleString('en-US', {\n                                    minimumFractionDigits: 10,\n                                    maximumFractionDigits: 10\n                                })}\n                            </strong> DXN\n                        </Typography>\n                        {/* <Typography className=\"data-height\">\n                            Total XEN burned in previous cycle: <strong>{previousCycleXENBurned}</strong>\n                        </Typography> */}\n                        </div>\n                    </CardContent>\n                </Card>\n            </>\n        )\n    }\n\n    function RewardsPanel() {\n\n        const [rewardsUnclaimed, setRewardsUnclaimed] = useState(\"\")\n        const [feeSharePercentage, setFeeSharePercentage] = useState(\"\")\n        const [loading, setLoading] = useState(false)\n\n    \n        async function getChainId() {\n            const currentChainId = await window.ethereum.request({\n                method: 'eth_chainId',\n            }).then((result:any) =>{\n                \n            })\n        }\n\n        useEffect(() => {\n            getChainId();\n        }, [])\n\n        useEffect(() => {\n            rewardsAccrued()\n        }, [rewardsUnclaimed]);\n\n        useEffect(() => {\n            feeShare()\n        }, [feeSharePercentage]);\n\n        async function rewardsAccrued() {\n            const deb0xViewsContract = DBXenViews(library, chain.deb0xViewsAddress);\n\n            await deb0xViewsContract.getUnclaimedRewards(account).then((result: any) => {\n                setRewardsUnclaimed(ethers.utils.formatEther(result))\n            })\n        }\n\n        async function feeShare() {\n            const deb0xViewsContract = DBXenViews(library, chain.deb0xViewsAddress);\n\n            const deb0xContract = DBXen(library, chain.deb0xAddress);\n\n            const unclaimedRewards = await deb0xViewsContract.getUnclaimedRewards(account);\n\n            const accWithdrawableStake = await deb0xViewsContract.getAccWithdrawableStake(account);\n\n            let balance = parseFloat((ethers.utils.formatEther(unclaimedRewards.add(accWithdrawableStake))))\n\n            const currentCycle = await deb0xContract.currentStartedCycle();\n\n            const totalSupply = await deb0xContract.summedCycleStakes(currentCycle);\n\n            const feeShare = balance * 100 / totalSupply\n            setFeeSharePercentage(((Math.round(feeShare * 100) / 100).toFixed(2)).toString() + \"%\")\n        }\n\n        async function fetchClaimRewardsResult(request: any, url: any) {\n            await fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(request),\n                headers: { 'Content-Type': 'application/json' },\n            })\n                .then((response) => response.json())\n                .then(async (data) => {\n                    try {\n                        const { tx: txReceipt } = JSON.parse(data.result)\n                        if (txReceipt.status == 1) {\n                            setNotificationState({\n                                message: t(\"rewards.toastify.success\"), open: true,\n                                severity: \"success\"\n                            })\n                        } else {\n                            setNotificationState({\n                                message: t(\"rewards.toastify.error\"), open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    } catch (error) {\n                        if (data.status == \"pending\") {\n                            setNotificationState({\n                                message: t(\"rewards.toastify.info\"),\n                                open: true,\n                                severity: \"info\"\n                            })\n                        } else if (data.status == \"error\") {\n                            setNotificationState({\n                                message: t(\"rewards.toastify.transaction_error\"),\n                                open: true,\n                                severity: \"error\"\n                            })\n                        }\n                    }\n\n                })\n        }\n\n        async function sendClaimRewardsTx(deb0xContract: any) {\n            try {\n                const tx = await deb0xContract.claimRewards()\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: t(\"rewards.toastify.success\"), open: true,\n                            severity: \"success\"\n                        })\n                        //setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: t(\"rewards.toastify.error\"), open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n            } catch (error: any) {\n                setNotificationState({\n                    message: t(\"rewards.toastify.rejected\"),\n                    open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function claimRewards() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = DBXen(signer, chain.deb0xAddress)\n\n\n            const from = await signer.getAddress();\n            if (whitelist.includes(from)) {\n                const url = \"https://api.defender.openzeppelin.com/autotasks/b939da27-4a61-4464-8d7e-4b0c5dceb270/runs/webhook/f662ac31-8f56-4b4c-9526-35aea314af63/SPs6smVfv41kLtz4zivxr8\";\n                const forwarder = createInstance(library)\n                const data = deb0xContract.interface.encodeFunctionData(\"claimRewards()\")\n                const to = deb0xContract.address\n\n                try {\n                    const request = await signMetaTxRequest(library, forwarder, { to, from, data });\n\n                    gaEventTracker(\"Success: Claim rewards\");\n\n                    await fetchClaimRewardsResult(request, url)\n\n                } catch (error: any) {\n                    setNotificationState({\n                        message: t(\"rewards.toastify.rejected\"),\n                        open: true,\n                        severity: \"info\"\n                    })\n\n                    gaEventTracker(\"Rejected: Claim rewards\");\n                }\n            } else {\n                await sendClaimRewardsTx(deb0xContract)\n            }\n        }\n\n        return (\n            <>\n            <Card variant=\"outlined\" className=\"card-container\">\n                <CardContent className=\"row\">\n                    <div className=\"col-12 col-md-10 mb-2\">\n                        <Typography variant=\"h4\" component=\"div\" className=\"rewards mb-3\">\n                            {t(\"rewards.title\")}\n                        </Typography>\n                        <Typography className=\"data-height\">\n                            {t(\"rewards.unclaimed_rewards\")}:&nbsp;\n                                <strong>\n                                    {Number(rewardsUnclaimed).toLocaleString('en-US', {\n                                        minimumFractionDigits: 10,\n                                        maximumFractionDigits: 10\n                                    })}\n                                </strong>\n                            </Typography>\n                            <p className='my-2 counter'>\n                                {t(\"rewards.counter\")} \n                                <Countdown date={Date.now() + endDate} renderer={renderer} /> \n                            </p>\n                        </div>\n                        <div className='col-12 col-md-2 d-flex justify-content-end align-items-start'>\n                            <img src={finance} alt=\"trophyRewards\" className=\"p-3 medium-img\" />\n                        </div>\n                    </CardContent>\n                    <CardActions className='button-container px-3'>\n                        <LoadingButton className=\"collect-btn\" loading={loading} variant=\"contained\" onClick={claimRewards}>\n                        {t(\"rewards.claim\")}\n                    </LoadingButton>\n                        <span className=\"text\">{t(\"rewards.claim_description\")}</span>\n                    </CardActions>\n                </Card>\n            </>\n        )\n    }\n\n    function floorPrecised(number: any) {\n        var power = Math.pow(10, 2);\n        return (Math.floor(parseFloat(number) * power) / power).toString();\n    }\n\n    function StakeUnstake() {\n        const [alignment, setAlignment] = useState(\"stake\");\n\n        const [userStakedAmount, setUserStakedAmount] = useState(\"\")\n        const [userUnstakedAmount, setUserUnstakedAmount] = useState(\"\")\n        const [tokensForUnstake, setTokenForUnstake] = useState(\"\");\n        const [totalStaked, setTotalStaked] = useState(\"\")\n        const [amountToUnstake, setAmountToUnstake] = useState(\"\")\n        const [amountToStake, setAmountToStake] = useState(\"\")\n        const [loading, setLoading] = useState(false)\n        const [approved, setApproved] = useState<Boolean | null>(false)\n\n    \n        async function getChainId() {\n            const currentChainId = await window.ethereum.request({\n                method: 'eth_chainId',\n            }).then((result:any) =>{\n                \n            })\n        }\n\n        useEffect(() => {\n            getChainId();\n        }, [])\n\n        const handleChange = (\n            event: React.MouseEvent<HTMLElement>,\n            newAlignment: string,\n        ) => {\n            setAlignment(newAlignment);\n            gaEventTracker(newAlignment + \" tab\");\n        };\n\n        const [theme, setTheme] = useState(localStorage.getItem('globalTheme'));\n        useEffect(() => {\n            setTheme(localStorage.getItem('globalTheme'));\n        });\n\n        useEffect(() => {\n            setStakedAmount()\n        }, [userStakedAmount]);\n\n        useEffect(() => {\n            totalAmountStaked()\n        }, [totalStaked]);\n\n\n        useEffect(() => {\n            setTokensForUntakedAmount()\n        }, []);\n\n        useEffect(() => {\n            setUnstakedAmount()\n        }, [userUnstakedAmount]);\n\n        useEffect(() => {\n            setApproval()\n        }, [approved]);\n\n        async function setStakedAmount() {\n            const deb0xContract = await DBXen(library, chain.deb0xAddress)\n            const deb0xViewsContract = await DBXenViews(library, chain.deb0xViewsAddress)\n            const balance = await deb0xViewsContract.getAccWithdrawableStake(account)\n            let firstStakeCycle = await deb0xContract.accFirstStake(account)\n            let secondStakeCycle = await deb0xContract.accSecondStake(account)\n            let firstStakeCycleAmount = await deb0xContract.accStakeCycle(account, firstStakeCycle);\n            let secondStakeCycleAmount = await deb0xContract.accStakeCycle(account, secondStakeCycle);\n            let withdawbleStake = await deb0xContract.accWithdrawableStake(account);\n            let totalStakedAmount = BigNumber.from(firstStakeCycleAmount).add(BigNumber.from(secondStakeCycleAmount)).add(BigNumber.from(withdawbleStake))\n            setUserStakedAmount(ethers.utils.formatEther(totalStakedAmount))\n        }\n\n        async function setTokensForUntakedAmount() {\n            const deb0xViewsContract =  DBXenViews(library, chain.deb0xViewsAddress)\n            const balance = await deb0xViewsContract.getAccWithdrawableStake(account).then((balance:any) =>{\n                setTokenForUnstake(ethers.utils.formatEther(balance.toString()));\n            })\n        }\n\n        async function setUnstakedAmount() {\n            const deb0xERC20Contract = await DBXenERC20(library, chain.deb0xERC20Address)\n            const balance = await deb0xERC20Contract.balanceOf(account).then((balance:any) =>{\n                let number = ethers.utils.formatEther(balance);\n                setUserUnstakedAmount(parseFloat(number.slice(0, (number.indexOf(\".\")) + 3)).toString())\n            })\n        }\n\n        async function setApproval() {\n            const deb0xERC20Contract = DBXenERC20(library, chain.deb0xERC20Address)\n\n            await deb0xERC20Contract.allowance(account, chain.deb0xAddress).then((allowance:any) =>\n                 allowance > 0 ? setApproved(true) : setApproved(false)\n            )\n        }\n\n        async function totalAmountStaked() {\n\n            const deb0xContract = DBXen(library, chain.deb0xAddress)\n\n           await deb0xContract.currentStartedCycle().then(async (currentCycle:any) =>{\n                await deb0xContract.summedCycleStakes(currentCycle).then((totalSupply:any) => {\n                    setTotalStaked(ethers.utils.formatEther(totalSupply))\n                })\n            })\n\n        }\n\n        async function approveStaking() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n            const deb0xERC20Contract = DBXenERC20(signer, chain.deb0xERC20Address)\n\n            try {\n                const tx = await deb0xERC20Contract.approve(chain.deb0xAddress, ethers.utils.parseEther(\"5010000\"))\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: t(\"rewards.toastify.success\"), open: true,\n                            severity: \"success\"\n                        })\n                        setLoading(false)\n\n                        gaEventTracker(\"Success: Approve staking\");\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: t(\"stake.toastify.error\"), open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                        gaEventTracker(\"Error: Approve staking\");\n                    })\n            } catch (error) {\n                setNotificationState({\n                    message: t(\"stake.toastify.info\"), open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n                gaEventTracker(\"Rejected: Approve staking\");\n            }\n        }\n\n        async function fetchUnstakeResult(request: any, url: any) {\n            await fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(request),\n                headers: { 'Content-Type': 'application/json' },\n            })\n                .then((response) => response.json())\n                .then(async (data) => {\n                    try {\n                        const { tx: txReceipt } = JSON.parse(data.result)\n                        if (txReceipt.status == 1) {\n                            setNotificationState({\n                                message: t(\"unstake.toastify.success\"), open: true,\n                                severity: \"success\"\n                            })\n                            setLoading(false)\n                        } else {\n                            setNotificationState({\n                                message: t(\"unstake.toastify.error\"), open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    } catch (error) {\n                        if (data.status == \"pending\") {\n                            setNotificationState({\n                                message: t(\"unstake.toastify.info\"),\n                                open: true,\n                                severity: \"info\"\n                            })\n                        } else if (data.status == \"error\") {\n                            setNotificationState({\n                                message: t(\"unstake.toastify.transaction_error\"),\n                                open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    }\n\n                })\n        }\n\n        async function sendUnstakeTx(deb0xContract: any) {\n            try {\n                const tx = await deb0xContract.unstake(ethers.utils.parseEther(amountToUnstake.toString()))\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: t(\"unstake.toastify.success\"), open: true,\n                            severity: \"success\"\n                        })\n                        setTokensForUntakedAmount();\n                        setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setLoading(false)\n                        setNotificationState({\n                            message: t(\"unstake.toastify.error\"), open: true,\n                            severity: \"error\"\n                        })\n\n                    })\n            } catch (error) {\n                setNotificationState({\n                    message: t(\"unstake.toastify.rejected\"),\n                    open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function unstake() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = DBXen(signer, chain.deb0xAddress)\n\n            const from = await signer.getAddress();\n            if (whitelist.includes(from)) {\n                const url = \"https://api.defender.openzeppelin.com/autotasks/b939da27-4a61-4464-8d7e-4b0c5dceb270/runs/webhook/f662ac31-8f56-4b4c-9526-35aea314af63/SPs6smVfv41kLtz4zivxr8\";\n                const forwarder = createInstance(library)\n                const data = deb0xContract.interface.encodeFunctionData(\"unstake\",\n                    [ethers.utils.parseEther(amountToUnstake.toString())])\n                const to = deb0xContract.address\n                try {\n                    const request = await signMetaTxRequest(library, forwarder, { to, from, data });\n\n                    gaEventTracker(\"Success: Unstake\");\n\n                    await fetchUnstakeResult(request, url)\n\n                } catch (error: any) {\n                    setNotificationState({\n                        message: t(\"unstake.toastify.rejected\"),\n                        open: true,\n                        severity: \"info\"\n                    })\n                    setLoading(false)\n\n                    gaEventTracker(\"Rejected: Unstake\");\n                }\n            } else {\n                await sendUnstakeTx(deb0xContract)\n            }\n        }\n\n        async function fetchStakeResult(request: any, url: any) {\n            await fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(request),\n                headers: { 'Content-Type': 'application/json' },\n            })\n                .then((response) => response.json())\n                .then(async (data) => {\n                    try {\n                        const { tx: txReceipt } = JSON.parse(data.result)\n                        if (txReceipt.status == 1) {\n                            setNotificationState({\n                                message: t(\"stake.toastify.staked\"), open: true,\n                                severity: \"success\"\n                            })\n                        } else {\n                            setNotificationState({\n                                message: t(\"stake.toastify.claim_error\"), open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    } catch (error) {\n                        if (data.status == \"pending\") {\n                            setNotificationState({\n                                message: t(\"stake.toastify.stake_info\"),\n                                open: true,\n                                severity: \"info\"\n                            })\n                        } else if (data.status == \"error\") {\n                            setNotificationState({\n                                message: t(\"stake.toastify.stake_transaction_error\"),\n                                open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    }\n\n                })\n        }\n\n        async function sendStakeTx(deb0xContract: any) {\n            try {\n                const tx = await deb0xContract.stake(ethers.utils.parseEther(amountToStake.toString()))\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: t(\"stake.toastify.staked\"), open: true,\n                            severity: \"success\"\n                        })\n                        //\n                        let tokensInWallet = Number(userUnstakedAmount) - Number(amountToStake);\n                        setUserUnstakedAmount(tokensInWallet.toString())\n                        //setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: t(\"stake.toastify.stake_error\"), open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n            } catch (error) {\n                setNotificationState({\n                    message: t(\"stake.toastify.rejected\"),\n                    open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function stake() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = DBXen(signer, chain.deb0xAddress)\n\n            const from = await signer.getAddress();\n            if (whitelist.includes(from)) {\n                const url = \"https://api.defender.openzeppelin.com/autotasks/b939da27-4a61-4464-8d7e-4b0c5dceb270/runs/webhook/f662ac31-8f56-4b4c-9526-35aea314af63/SPs6smVfv41kLtz4zivxr8\";\n                const forwarder = createInstance(library)\n                const data = deb0xContract.interface.encodeFunctionData(\"stake\",\n                    [ethers.utils.parseEther(amountToStake.toString())])\n                const to = deb0xContract.address\n\n                try {\n                    const request = await signMetaTxRequest(library, forwarder, { to, from, data });\n\n                    gaEventTracker(\"Success: Stake\");\n\n                    await fetchStakeResult(request, url)\n\n                } catch (error: any) {\n                    setNotificationState({\n                        message: t(\"stake.toastify.rejected\"),\n                        open: true,\n                        severity: \"info\"\n                    })\n                    setLoading(false)\n                    gaEventTracker(\"Rejected: Stake\");\n                }\n            } else {\n                await sendStakeTx(deb0xContract)\n            }\n        }\n\n        return (\n            <Card variant=\"outlined\" className=\"card-container\">\n                <ToggleButtonGroup\n                    color=\"primary\"\n                    value={alignment}\n                    exclusive\n                    onChange={handleChange}\n                    className=\"tab-container\"\n                >\n                    <ToggleButton className=\"tab-btn\" value=\"stake\">{t(\"stake.stake\")}</ToggleButton>\n                    <ToggleButton className=\"tab-btn\" value=\"unstake\" >{t(\"unstake.unstake\")}</ToggleButton>\n\n                </ToggleButtonGroup>\n              \n            {\n                alignment === \"stake\" ?\n                \n                <>\n                <CardContent className=\"row\">\n                    <div className=\"col-6 px-3\">\n                        <img className=\"display-element\" src={theme === \"classic\" ? coinBagDark : coinBagLight} alt=\"coinbag\" />\n                        <Typography className=\"p-0\">\n                            {t(\"stake.staked_amount\")}:\n                        </Typography>\n                        <Typography variant=\"h6\" className=\"p-0 data-height\">\n                            <strong>\n                                {Number(userStakedAmount).toLocaleString('en-US', {\n                                    minimumFractionDigits: 10,\n                                    maximumFractionDigits: 10\n                                })} DXN</strong>\n                        </Typography>\n                    </div>\n                    <div className=\"col-6 px-3\">\n                        <img className=\"display-element\" src={theme === \"classic\" ? walletDark : walletLight} alt=\"coinbag\" />\n                        <Typography className=\"p-0\">\n                            {t(\"stake.wallet\")}:\n                        </Typography>\n                        <Typography variant=\"h6\" className=\"p-0 data-height\" data-height>\n                            <strong>\n                                {Number(userUnstakedAmount).toLocaleString('en-US', {\n                                    minimumFractionDigits: 10,\n                                    maximumFractionDigits: 10\n                                })} DXN</strong>\n                        </Typography>\n                    </div>\n                    {approved && <Grid className=\"amount-row px-3\" container>\n                        <Grid item>\n                            <OutlinedInput id=\"outlined-basic\"\n                                placeholder={t(\"stake.amount_to_stake\")}\n                                type=\"number\"\n                                value={amountToStake}\n                                inputProps={{ min: 0 }}\n                                onChange={e => setAmountToStake(e.target.value)} />\n                        </Grid>\n                        <Grid className=\"max-btn-container\" item>\n                            <Button className=\"max-btn\" \n                                size=\"small\" variant=\"contained\" color=\"error\" \n                                onClick = {()=>setAmountToStake(userUnstakedAmount)  }>\n                                    {t(\"stake.max\")}\n                            </Button>\n                        </Grid>\n                    </Grid>}\n                </CardContent>\n                <CardActions className='button-container px-3'>\n                    {approved && \n                        <LoadingButton disabled={!amountToStake} className=\"collect-btn\" loading={loading} variant=\"contained\" onClick={stake}>\n                            {t(\"stake.stake\")}\n                        </LoadingButton>}\n                    {!approved &&\n                        <>\n                            <LoadingButton \n                                className=\"collect-btn\" \n                                loading={loading}\n                                variant=\"contained\"\n                                disabled={ userUnstakedAmount === '0.00' ||  userUnstakedAmount === '0'}\n                                onClick={approveStaking}>\n                                    {t(\"stake.init_button\")}\n                            </LoadingButton>\n                            <span className=\"text\">\n                                {t(\"stake.init_text\")}\n                            </span>\n                        </> \n                    }\n                </CardActions>\n                </>\n                : \n\n                <>\n                <CardContent className=\"row\">\n                    <div className=\"col-6 px-3\">\n                        <img className=\"display-element\" src={theme === \"classic\" ? coinBagDark : coinBagLight} alt=\"coinbag\" />\n                        <Typography className=\"p-0\">\n                            {t(\"unstake.available\")}:\n                        </Typography>\n                        <Typography variant=\"h6\" className=\"p-0\">\n                            <strong>{Number(tokensForUnstake).toLocaleString('en-US', {\n                                    minimumFractionDigits: 10,\n                                    maximumFractionDigits: 10\n                                })} DXN</strong>\n                        </Typography>\n                    </div>\n                    {/* <div className=\"col-6 px-3\">\n                        <img className=\"display-element\" src={theme === \"classic\" ? walletDark : walletLight} alt=\"coinbag\" />\n                        <Typography className=\"p-0\">\n                            Your actual stake:\n                        </Typography>\n                        <Typography variant=\"h6\" className=\"p-0 data-height\">\n                            <strong>{userStakedAmount} DXN</strong>\n                        </Typography>\n                    </div> */}\n\n\n                    <Grid className=\"amount-row px-3\" container>\n                        <Grid item>\n                            <OutlinedInput value={amountToUnstake}\n                                id=\"outlined-basic\"\n                                className=\"max-field\"\n                                placeholder={t(\"unstake.amount_to_unstake\")}\n                                onChange={e => setAmountToUnstake(e.target.value)}\n                                inputProps={{ min: 0 }}\n                                type=\"number\" />\n                        </Grid>\n                        <Grid className=\"max-btn-container\" item>\n                            <Button className=\"max-btn\"\n                                size=\"small\" variant=\"contained\" color=\"error\" \n                                onClick = {()=>setAmountToUnstake(tokensForUnstake)  }>\n                                {t(\"unstake.max\")}\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </CardContent>\n                <CardActions className='button-container px-3'>\n                    <LoadingButton className=\"collect-btn\" disabled={!amountToUnstake} loading={loading} variant=\"contained\" onClick={unstake}>\n                        {t(\"unstake.unstake\")}\n                    </LoadingButton>\n                </CardActions>\n                </>\n            }\n\n            </Card>\n\n        )\n    }\n\n    function TotalStaked() {\n        const [totalStaked, setTotalStaked] = useState(\"\")\n        useEffect(() => {\n            totalAmountStaked()\n        }, [totalStaked]);\n\n        async function totalAmountStaked() {\n\n            const deb0xContract = DBXen(library, chain.deb0xAddress)\n\n            const currentCycle = await deb0xContract.currentStartedCycle()\n\n            const currentStake = await deb0xContract.summedCycleStakes(currentCycle)\n\n            const pendingStakeWithdrawal = await deb0xContract.pendingStakeWithdrawal()\n            \n            // setTotalStaked(ethers.utils.formatEther(currentStake))\n\n            setTotalStaked(floorPrecised(ethers.utils.formatEther(currentStake.sub(pendingStakeWithdrawal))))\n\n        }\n\n        return (\n            <Card className=\"heading-card\">\n                <CardContent>\n                    <Typography variant=\"h5\">\n                        Total tokens staked:\n                    </Typography>\n                    <Typography variant=\"h4\">\n                        <img className=\"logo\" src={token} />\n                        {totalStaked} DXN\n                    </Typography>\n                </CardContent>\n            </Card>\n        )\n    }\n\n    return (\n        <>\n            <SnackbarNotification state={notificationState} setNotificationState={setNotificationState} />\n            <Box className=\"content-box stake-content\">\n                <div className=\"cards-grid\">\n                    <div className='row'>\n                        <Grid item className=\"col col-12 col-md-6 \">\n                            <FeesPanel />\n                        </Grid>\n                        <Grid item className=\"col col-12 col-md-6\">\n                            <CyclePanel />\n                        </Grid>\n                    </div>\n                    <div className='row'>\n                        <Grid item className=\"col col-12 col-md-6 \">\n                            <RewardsPanel />\n                        </Grid>\n                        <Grid item className=\"col col-12 col-md-6\">\n                            <StakeUnstake />\n                        </Grid>\n                    </div>\n                </div>\n            </Box>\n        </>\n    )\n}","import ReactGA from \"react-ga\";\n\nexport default function useAnalyticsEventTracker(category: string) {\n    const eventTracker = (action: string) => {\n      ReactGA.event({category, action});\n    }\n    return eventTracker;\n}","import { createContext } from \"react\";\n\nexport const initialThemeState = {\n  theme: \"dark\",\n  setTheme: (_value: string) => {}\n};\n\nconst ThemeContext = createContext(initialThemeState);\nexport default ThemeContext;","import { useState, useEffect } from \"react\";\nimport ThemeContext, { initialThemeState } from \"./ThemeContext\";\n\ntype Props = {\n    children: JSX.Element|JSX.Element[],\n};\n\nconst ThemeProvider = ( { children }: Props ) => {\n  const [theme, setTheme] = useState<any>(initialThemeState.theme);\n\n  const localStorage = window.localStorage;\n\n  useEffect(() => {\n    const savedThemeLocal = localStorage.getItem(\"globalTheme\");\n\n    if (!!savedThemeLocal) {\n      setTheme(savedThemeLocal);\n    }\n  }, [localStorage]);\n\n  useEffect(() => {\n    localStorage.setItem(\"globalTheme\", theme);\n  }, [theme, localStorage]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      <div className={`theme theme--${theme}`}>{children}</div>\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider;\n","export default __webpack_public_path__ + \"static/media/elephant.605d60c2.svg\";","export default __webpack_public_path__ + \"static/media/white_dbxen.8b09777a.svg\";","export default __webpack_public_path__ + \"static/media/elephant.b785cc48.png\";","export default __webpack_public_path__ + \"static/media/empty.efc45323.png\";","export default __webpack_public_path__ + \"static/media/copy-1.6be37e8f.svg\";","export default __webpack_public_path__ + \"static/media/wallet.0d69376a.svg\";","export default __webpack_public_path__ + \"static/media/diconnect.a287fc1c.svg\";","import { Popper } from \"@mui/material\";\nimport ClickAwayListener from \"@mui/material/ClickAwayListener\";\nimport { useState, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nconst DropdownLanguage = () => {\n    const { i18n, t } = useTranslation();\n    const [language, setLanguage] = useState(\"en\");\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const [open, setOpen] = useState<any>(false);\n    const id = open ? 'simple-popper' : \"\";\n\n    useEffect(() => {\n        if(JSON.parse(localStorage.getItem('language') || \"null\") !== null)\n            setLanguage(JSON.parse(localStorage.getItem('language') || \"null\"));\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem('language', JSON.stringify(language));\n    }, [language]);\n\n    const handleLangChange = (lang: any) => {\n        setLanguage(lang);\n        i18n.changeLanguage(lang);\n        setOpen(false);\n    };\n\n    const handleClick = (event: any) => {\n        const { currentTarget } = event;\n        setAnchorEl(currentTarget)\n        setOpen(!open)\n    };\n\n    const handleClickAway = () => {\n        setOpen(false)\n    };\n\n    return (\n        <ClickAwayListener onClickAway={handleClickAway}>\n            <div>\n                <button onClick={handleClick} className=\"language-switcher\">\n                    {t(\"app_bar.language.\"+language)}\n                </button>\n                <Popper id={id} open={open} anchorEl={anchorEl} className=\"language-popper\">\n                    <button\n                        onClick={() => handleLangChange(\"en\")}\n                        className=\"btn\"\n                    >\n                        {t(\"app_bar.language.en\")}\n                    </button>\n                    <button\n                        onClick={() => handleLangChange(\"zh\")}\n                        className=\"btn\"\n                    >\n                        {t(\"app_bar.language.zh\")}\n                    </button>       \n                </Popper>\n            </div>\n        </ClickAwayListener>\n    );\n};\n\nexport default DropdownLanguage;\n","import { useState, useEffect } from \"react\";\nimport ChainContext, { initialChain } from './ChainContext';\n\ntype Props = {\n    children: JSX.Element|JSX.Element[],\n};\n\nconst ChainProvider = ( { children }: Props ) => {\n    const [chain, setChain] = useState<any>(initialChain.chain);\n\n    useEffect(\n        () => {\n            window.ethereum.request({\n                method: 'eth_chainId',\n            }).then((result: any) => {\n                switch(parseInt(result, 16)) {\n                    case 137: \n                        setChain({\n                            deb0xAddress: \"0x4F3ce26D9749C0f36012C9AbB41BF9938476c462\",\n                            deb0xViewsAddress: \"0x93CC648eE2fBf366DD5d8D354C0946bE6ee4936c\",\n                            deb0xERC20Address: \"0x47DD60FA40A050c0677dE19921Eb4cc512947729\",\n                            xenCryptoAddress: \"0x2AB0e9e4eE70FFf1fB9D67031E44F6410170d00e\",\n                            chainId: parseInt(result, 16),\n                            chainName: \"polygon\",\n                            currency: \"MATIC\",\n                            priceURL: \"https://polygon-mainnet.infura.io/v3/6010818c577b4531b1886965421a91d3\",\n                            dxnTokenName: \"mDXN\"\n                        })\n                        break;\n                    case 43114: \n                        setChain({\n                            deb0xAddress: \"0xF5c80c305803280B587F8cabBcCdC4d9BF522AbD\",\n                            deb0xViewsAddress: \"0x3DB1CcF6FC69D3265a8Ec2BF8Da0CBF17F6E76fD\",\n                            deb0xERC20Address: \"0x80f0C1c49891dcFDD40b6e0F960F84E6042bcB6F\",\n                            xenCryptoAddress: \"0xC0C5AA69Dbe4d6DDdfBc89c0957686ec60F24389\",\n                            chainId: parseInt(result, 16),\n                            chainName: \"avalanche\",\n                            currency: \"AVAX\",\n                            priceURL: \"https://avalanche-mainnet.infura.io/v3/6010818c577b4531b1886965421a91d3\",\n                            dxnTokenName: \"aDXN\"\n                        })\n                        break;\n                    case 56:\n                        setChain({\n                            deb0xAddress: \"0x9caf6C4e5B9E3A6f83182Befd782304c7A8EE6De\",\n                            deb0xViewsAddress: \"0x6d38Ab9f5b5Edfb22e57a44c3c747f9584de1f1a\",\n                            deb0xERC20Address: \"0xCcd09b80453335aa914f5d9174984b6586c315EC\",\n                            xenCryptoAddress: \"0x2AB0e9e4eE70FFf1fB9D67031E44F6410170d00e\",\n                            chainId: parseInt(result, 16),\n                            chainName: \"binance\",\n                            currency: \"BNB\",\n                            priceURL: \"https://bsc-mainnet.gateway.pokt.network/v1/lb/b1ad9a15615e95af1a87f86d\",\n                            dxnTokenName: \"bDXN\"\n                        })\n                        break;\n                    case 250:\n                        setChain({\n                            deb0xAddress: \"0x2A9C55b6Dc56da178f9f9a566F1161237b73Ba66\",\n                            deb0xViewsAddress: \"0x72Ec36D3593ba1fc7Aa5dFDc1ADdf551FE599837\",\n                            deb0xERC20Address: \"0xc418B123885d732ED042b16e12e259741863F723\",\n                            xenCryptoAddress: \"0xeF4B763385838FfFc708000f884026B8c0434275\",\n                            chainId: parseInt(result, 16),\n                            chainName: \"fantom\",\n                            currency: \"FTM\",\n                            priceURL: \"https://fantom-mainnet.gateway.pokt.network/v1/lb/b1ad9a15615e95af1a87f86d\",\n                            dxnTokenName: \"fmDXN\"\n                        })\n                        break;\n                    case 1284:\n                        setChain({\n                            deb0xAddress: \"0x2A9C55b6Dc56da178f9f9a566F1161237b73Ba66\",\n                            deb0xViewsAddress: \"0x72Ec36D3593ba1fc7Aa5dFDc1ADdf551FE599837\",\n                            deb0xERC20Address: \"0xc418B123885d732ED042b16e12e259741863F723\",\n                            xenCryptoAddress: \"0xb564A5767A00Ee9075cAC561c427643286F8F4E1\",\n                            chainId: parseInt(result, 16),\n                            chainName: \"moonbeam\",\n                            currency: \"GLMR\",\n                            priceURL: \"https://moonbeam-mainnet.gateway.pokt.network/v1/lb/b1ad9a15615e95af1a87f86d\",\n                            dxnTokenName: \"mbDXN\"\n                        })\n                        break;\n                    case 66:\n                        setChain({\n                            deb0xAddress: \"0x2A9C55b6Dc56da178f9f9a566F1161237b73Ba66\",\n                            deb0xViewsAddress: \"0x4bD737C3104100d175d0b3B8F17d095f2718faC0\",\n                            deb0xERC20Address: \"0xc418B123885d732ED042b16e12e259741863F723\",\n                            xenCryptoAddress: \"0x1cC4D981e897A3D2E7785093A648c0a75fAd0453\",\n                            chainId: parseInt(result, 16),\n                            chainName: \"okx\",\n                            currency: \"OKT\",\n                            priceURL: \"https://oKc-mainnet.gateway.pokt.network/v1/lb/b1ad9a15615e95af1a87f86d\",\n                            dxnTokenName: \"okDXN\"\n                        })\n                        break;\n                    case 9001:\n                        setChain({\n                            deb0xAddress: \"0x2A9C55b6Dc56da178f9f9a566F1161237b73Ba66\",\n                            deb0xViewsAddress: \"0x72Ec36D3593ba1fc7Aa5dFDc1ADdf551FE599837\",\n                            deb0xERC20Address: \"0xc418B123885d732ED042b16e12e259741863F723\",\n                            xenCryptoAddress: \"0x2ab0e9e4ee70fff1fb9d67031e44f6410170d00e\",\n                            chainId: parseInt(result, 16),\n                            chainName: \"Evmos\",\n                            currency: \"EVMOS\",\n                            priceURL: \"https://evmos-mainnet.gateway.pokt.network/v1/lb/b1ad9a15615e95af1a87f86d\",\n                            dxnTokenName: \"coDXN\"\n                        })\n                        break;\n                    case 2000:\n                        setChain({\n                            deb0xAddress: \"0x2A9C55b6Dc56da178f9f9a566F1161237b73Ba66\",\n                            deb0xViewsAddress: \"0x72Ec36D3593ba1fc7Aa5dFDc1ADdf551FE599837\",\n                            deb0xERC20Address: \"0xc418B123885d732ED042b16e12e259741863F723\",\n                            xenCryptoAddress: \"0x948eed4490833D526688fD1E5Ba0b9B35CD2c32e\",\n                            chainId: parseInt(result, 16),\n                            chainName: \"Dogechain\",\n                            currency: \"DOGE\",\n                            priceURL: \"https://dogechain-mainnet.gateway.pokt.network/v1/lb/b1ad9a15615e95af1a87f86d\",\n                            dxnTokenName: \"dcDXN\"\n                        })\n                        break;\n                    case 10001:\n                        setChain({\n                            deb0xAddress: \"0x2A9C55b6Dc56da178f9f9a566F1161237b73Ba66\",\n                            deb0xViewsAddress: \"0x72Ec36D3593ba1fc7Aa5dFDc1ADdf551FE599837\",\n                            deb0xERC20Address: \"0xc418B123885d732ED042b16e12e259741863F723\",\n                            xenCryptoAddress: \"0x2AB0e9e4eE70FFf1fB9D67031E44F6410170d00e\",\n                            chainId: parseInt(result, 16),\n                            chainName: \"EthereumPoW\",\n                            currency: \"ETHW\",\n                            priceURL: \"https://mainnet.ethereumpow.org\",\n                            dxnTokenName: \"vvDXN\"\n                        })\n                        break;\n                }\n            });\n        },\n        []\n    );\n    \n    return (\n      <ChainContext.Provider value={{chain, setChain}}>\n        <>{children}</>\n      </ChainContext.Provider>\n    );\n  };\n  \n  export default ChainProvider;","export default __webpack_public_path__ + \"static/media/polygon.c13e4066.svg\";","export default __webpack_public_path__ + \"static/media/avalanche.234db155.svg\";","export default __webpack_public_path__ + \"static/media/bnb.797868eb.svg\";","export default __webpack_public_path__ + \"static/media/fantom.3f8c71bb.svg\";","export default __webpack_public_path__ + \"static/media/moonbeam.c0522d32.svg\";","export default __webpack_public_path__ + \"static/media/okx.6ecc0351.svg\";","export default __webpack_public_path__ + \"static/media/evmos.59e38ec2.svg\";","export default __webpack_public_path__ + \"static/media/dc.27c8576a.svg\";","export default __webpack_public_path__ + \"static/media/ethpow.bcd11d82.svg\";","import Popper from '@mui/material/Popper';\nimport { useContext, useEffect, useState } from \"react\";\nimport ChainContext from \"./ChainContext\";\nimport polygon from \"../../photos/icons/polygon.svg\";\nimport avalanche from \"../../photos/icons/avalanche.svg\";\nimport bnb from \"../../photos/icons/bnb.svg\";\nimport fantom from \"../../photos/icons/fantom.svg\";\nimport moonbeam from \"../../photos/icons/moonbeam.svg\";\nimport okx from \"../../photos/icons/okx.svg\";\nimport evmos from \"../../photos/icons/evmos.svg\";\nimport dc from \"../../photos/icons/dc.svg\";\nimport ethpow from \"../../photos/icons/ethpow.svg\";\nimport ClickAwayListener from '@mui/base/ClickAwayListener';\n\nconst networks: any = {\n    polygon: {\n      chainId: `0x${Number(137).toString(16)}`,\n      chainName: \"Polygon Mainnet\",\n      nativeCurrency: {\n        name: \"MATIC\",\n        symbol: \"MATIC\",\n        decimals: 18\n      },\n      rpcUrls: [\"https://rpc-mainnet.maticvigil.com\"],\n      blockExplorerUrls: [\"https://polygonscan.com/\"]\n    },\n    avalanche: {\n        chainId: `0x${Number(43114).toString(16)}`,\n        chainName: \"Avalanche Mainnet C-Chain\",\n        nativeCurrency: {\n          name: \"Avalanche\",\n          symbol: \"AVAX\",\n          decimals: 18,\n        },\n        rpcUrls: [\"https://api.avax.network/ext/bc/C/rpc\"],\n        blockExplorerUrls: [\"https://snowtrace.io/\"],\n    },\n    binance:{\n        chainId: `0x${Number(56).toString(16)}`,\n        chainName: 'Binance Smart Chain',\n        nativeCurrency: {\n            name: 'Binance Coin',\n            symbol: 'BNB',\n            decimals: 18\n        },\n        rpcUrls: ['https://bsc.rpc.blxrbdn.com'],\n        blockExplorerUrls: ['https://bscscan.com'] \n    },\n    fantom:{\n        chainId: `0x${Number(250).toString(16)}`,\n        chainName: 'Fantom Opera',\n        nativeCurrency: {\n            name: 'Fantom Token',\n            symbol: 'FTM',\n            decimals: 18\n        },\n        rpcUrls: ['https://endpoints.omniatech.io/v1/fantom/mainnet/public'],\n        blockExplorerUrls: ['https://ftmscan.com'] \n    },\n    moonbeam:{\n        chainId: `0x${Number(1284).toString(16)}`,\n        chainName: 'Moonbeam',\n        nativeCurrency: {\n            name: 'Moonbeam',\n            symbol: 'GLMR',\n            decimals: 18\n        },\n        rpcUrls: ['https://moonbeam.api.onfinality.io/public'],\n        blockExplorerUrls: ['https://moonscan.io'] \n    },\n    okx:{\n        chainId: `0x${Number(66).toString(16)}`,\n        chainName: 'OKXChain Mainnet',\n        nativeCurrency: {\n            name: 'OKXChain Token',\n            symbol: 'OKT',\n            decimals: 18\n        },\n        rpcUrls: ['https://exchainrpc.okex.org'],\n        blockExplorerUrls: ['https://www.oklink.com/en/okc'] \n    },\n    evmos: {\n            chainId: `0x${Number(9001).toString(16)}`,\n            chainName: 'Evmos',\n            nativeCurrency: {\n                name: 'Evmos',\n                symbol: 'EVMOS',\n                decimals: 18\n            },\n            rpcUrls: ['https://eth.bd.evmos.org:8545'],\n            blockExplorerUrls: ['https://escan.live'] \n    },\n    doge: {\n        chainId: `0x${Number(2000).toString(16)}`,\n        chainName: 'Dogechain Mainnet',\n        nativeCurrency: {\n            name: 'Dogechain Token',\n            symbol: 'DC',\n            decimals: 18\n        },\n        rpcUrls: ['https://rpc.dogechain.dog'],\n        blockExplorerUrls: ['https://explorer.dogechain.dog'] \n    },\n    ethpow: {\n        chainId: `0x${Number(10001).toString(16)}`,\n        chainName: 'Ethereum PoW',\n        nativeCurrency: {\n            name: 'EthereumPoW',\n            symbol: 'ETHW',\n            decimals: 18\n        },\n        rpcUrls: ['https://mainnet.ethereumpow.org'],\n        blockExplorerUrls: ['https://www.oklink.com/en/ethw/'] \n    }\n};\n\nexport default function ChainSetter(props: any) {\n    const { chain, setChain } = useContext(ChainContext);\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const [open, setOpen] = useState<any>(false);\n    const id = open ? 'simple-popper' : \"\";\n\n    useEffect(() => {\n        window.ethereum.on(\"chainChanged\", networkChanged);\n\n        return () => {\n            window.ethereum.removeListener(\"chainChanged\", networkChanged);\n            };\n    }, [])\n\n    const changeNetwork = async ({ networkName, setError }: any) => {\n        try {\n            if (!window.ethereum) throw new Error(\"No crypto wallet found\");\n            await window.ethereum.request({\n                method: \"wallet_addEthereumChain\",\n                params: [\n                    {\n                        ...networks[networkName]\n                    }\n                ]\n            }).then((result: any) => {\n                switch(parseInt(result, 16)) {\n                    case 137: \n                        setChain({\n                            deb0xAddress: \"0x4F3ce26D9749C0f36012C9AbB41BF9938476c462\",\n                            deb0xViewsAddress: \"0x93CC648eE2fBf366DD5d8D354C0946bE6ee4936c\",\n                            deb0xERC20Address: \"0x47DD60FA40A050c0677dE19921Eb4cc512947729\",\n                            xenCryptoAddress: \"0x2AB0e9e4eE70FFf1fB9D67031E44F6410170d00e\",\n                            chainId: parseInt(result, 16),\n                            chainName: \"polygon\",\n                            currency: \"MATIC\",\n                            priceURL: \"https://polygon-mainnet.infura.io/v3/6010818c577b4531b1886965421a91d3\",\n                            dxnTokenName: \"mDXN\"\n                        })\n                        break;\n                    case 43114: \n                        setChain({\n                            deb0xAddress: \"0xF5c80c305803280B587F8cabBcCdC4d9BF522AbD\",\n                            deb0xViewsAddress: \"0x6d38Ab9f5b5Edfb22e57a44c3c747f9584de1f1a\",\n                            deb0xERC20Address: \"0x80f0C1c49891dcFDD40b6e0F960F84E6042bcB6F\",\n                            xenCryptoAddress: \"0xC0C5AA69Dbe4d6DDdfBc89c0957686ec60F24389\",\n                            chainId: parseInt(result, 16),\n                            chainName: \"avalanche\",\n                            currency: \"AVAX\",\n                            priceURL: \"https://avalanche-mainnet.infura.io/v3/6010818c577b4531b1886965421a91d3\",\n                            dxnTokenName: \"aDXN\"\n                        })\n                        break;\n                    case 56:\n                        setChain({\n                            deb0xAddress: \"0x9caf6C4e5B9E3A6f83182Befd782304c7A8EE6De\",\n                            deb0xViewsAddress: \"0xA0C192aE0C75FDE64A42D9f0430e7163Fd6701e5\",\n                            deb0xERC20Address: \"0xCcd09b80453335aa914f5d9174984b6586c315EC\",\n                            xenCryptoAddress: \"0x2AB0e9e4eE70FFf1fB9D67031E44F6410170d00e\",\n                            chainId: parseInt(result, 16),\n                            chainName: \"binance\",\n                            currency: \"BNB\",\n                            priceURL: \"https://bsc-mainnet.gateway.pokt.network/v1/lb/b1ad9a15615e95af1a87f86d\",\n                            dxnTokenName: \"bDXN\"\n                        })\n                        break;\n                    case 250:\n                        setChain({\n                            deb0xAddress: \"0x2A9C55b6Dc56da178f9f9a566F1161237b73Ba66\",\n                            deb0xViewsAddress: \"0x72Ec36D3593ba1fc7Aa5dFDc1ADdf551FE599837\",\n                            deb0xERC20Address: \"0xc418B123885d732ED042b16e12e259741863F723\",\n                            xenCryptoAddress: \"0xeF4B763385838FfFc708000f884026B8c0434275\",\n                            chainId: parseInt(result, 16),\n                            chainName: \"fantom\",\n                            currency: \"FTM\",\n                            priceURL: \"https://fantom-mainnet.gateway.pokt.network/v1/lb/b1ad9a15615e95af1a87f86d\",\n                            dxnTokenName: \"fmDXN\"\n                        })\n                        break;\n                    case 1284:\n                        setChain({\n                            deb0xAddress: \"0x2A9C55b6Dc56da178f9f9a566F1161237b73Ba66\",\n                            deb0xViewsAddress: \"0x72Ec36D3593ba1fc7Aa5dFDc1ADdf551FE599837\",\n                            deb0xERC20Address: \"0xc418B123885d732ED042b16e12e259741863F723\",\n                            xenCryptoAddress: \"0xb564A5767A00Ee9075cAC561c427643286F8F4E1\",\n                            chainId: parseInt(result, 16),\n                            chainName: \"moonbeam\",\n                            currency: \"GLMR\",\n                            priceURL: \"https://moonbeam-mainnet.gateway.pokt.network/v1/lb/b1ad9a15615e95af1a87f86d\",\n                            dxnTokenName: \"mbDXN\"\n                        })\n                        break;\n                    case 66:\n                        setChain({\n                            deb0xAddress: \"0x2A9C55b6Dc56da178f9f9a566F1161237b73Ba66\",\n                            deb0xViewsAddress: \"0x4bD737C3104100d175d0b3B8F17d095f2718faC0\",\n                            deb0xERC20Address: \"0xc418B123885d732ED042b16e12e259741863F723\",\n                            xenCryptoAddress: \"0x1cC4D981e897A3D2E7785093A648c0a75fAd0453\",\n                            chainId: parseInt(result, 16),\n                            chainName: \"okx\",\n                            currency: \"OKT\",\n                            priceURL: \"https://oKc-mainnet.gateway.pokt.network/v1/lb/b1ad9a15615e95af1a87f86d\",\n                            dxnTokenName: \"okDXN\"\n                        })\n                        break;\n                    case 9001:\n                        setChain({\n                            deb0xAddress: \"0x2A9C55b6Dc56da178f9f9a566F1161237b73Ba66\",\n                            deb0xViewsAddress: \"0x72Ec36D3593ba1fc7Aa5dFDc1ADdf551FE599837\",\n                            deb0xERC20Address: \"0xc418B123885d732ED042b16e12e259741863F723\",\n                            xenCryptoAddress: \"0x2ab0e9e4ee70fff1fb9d67031e44f6410170d00e\",\n                            chainId: parseInt(result, 16),\n                            chainName: \"Evmos\",\n                            currency: \"EVMOS\",\n                            priceURL: \"https://evmos-mainnet.gateway.pokt.network/v1/lb/b1ad9a15615e95af1a87f86d\",\n                            dxnTokenName: \"coDXN\"\n                        })\n                        break;\n                    case 2000:\n                        setChain({\n                            deb0xAddress: \"0x2A9C55b6Dc56da178f9f9a566F1161237b73Ba66\",\n                            deb0xViewsAddress: \"0x72Ec36D3593ba1fc7Aa5dFDc1ADdf551FE599837\",\n                            deb0xERC20Address: \"0xc418B123885d732ED042b16e12e259741863F723\",\n                            xenCryptoAddress: \"0x948eed4490833D526688fD1E5Ba0b9B35CD2c32e\",\n                            chainId: parseInt(result, 16),\n                            chainName: \"Dogechain\",\n                            currency: \"DOGE\",\n                            priceURL: \"https://dogechain-mainnet.gateway.pokt.network/v1/lb/b1ad9a15615e95af1a87f86d\",\n                            dxnTokenName: \"dcDXN\"\n                        })\n                        break;\n                    case 10001:\n                        setChain({\n                            deb0xAddress: \"0x2A9C55b6Dc56da178f9f9a566F1161237b73Ba66\",\n                            deb0xViewsAddress: \"0x72Ec36D3593ba1fc7Aa5dFDc1ADdf551FE599837\",\n                            deb0xERC20Address: \"0xc418B123885d732ED042b16e12e259741863F723\",\n                            xenCryptoAddress: \"0x2AB0e9e4eE70FFf1fB9D67031E44F6410170d00e\",\n                            chainId: parseInt(result, 16),\n                            chainName: \"EthereumPoW\",\n                            currency: \"ETHW\",\n                            priceURL: \"https://mainnet.ethereumpow.org\",\n                            dxnTokenName: \"vvDXN\"\n                        })\n                        break;\n                }\n            });\n        } catch (err: any) {\n            setError(err.message);\n        }\n    };\n    \n    const [error, setError] = useState<any>();\n\n    const handleNetworkSwitch = async (networkName: any) => {\n        setError(\"\");\n        await changeNetwork({ networkName, setError }).then(() => {\n            window.location.reload();\n        });\n    };\n\n    const networkChanged = (chainId: any) => {\n       window.location.reload()\n    };\n\n    const handleClick = (event: any) => {\n        const { currentTarget } = event;\n        setAnchorEl(currentTarget)\n        setOpen(!open)\n    };\n\n    const handleClickAway = () => {\n        setOpen(false)\n    };\n\n\n    return (\n        <ClickAwayListener onClickAway={handleClickAway}>\n            <div>\n                <button onClick={handleClick} className=\"chain-switcher\">\n                    {chain.chainName.charAt(0).toUpperCase() + chain.chainName.slice(1)}\n                </button>\n                <Popper id={id} open={open} anchorEl={anchorEl} className=\"chain-popper\">\n                    <button\n                        onClick={() => handleNetworkSwitch(\"polygon\")}\n                        className=\"btn\"\n                    >\n                        <img alt=\"polygon\" src={polygon} className=\"polygon\"/>\n                        Switch to Polygon\n                    </button>\n                    <button\n                        onClick={() => handleNetworkSwitch(\"avalanche\")}\n                        className=\"btn\"\n                    >\n                        <img alt=\"avalanche\" src={avalanche} className=\"avalanche\"/>\n                        Switch to Avalanche\n                    </button>\n                    <button\n                        onClick={() => handleNetworkSwitch(\"binance\")}\n                        className=\"btn\"\n                    >\n                        <img alt=\"bnb\" src={bnb} className=\"bnb\"/>\n                        Switch to Binance\n                    </button>\n                    <button\n                        onClick={() => handleNetworkSwitch(\"fantom\")}\n                        className=\"btn\"\n                    >\n                        <img alt=\"fantom\" src={fantom} className=\"fantom\"/>\n                        Switch to Fantom\n                    </button>\n                    <button\n                        onClick={() => handleNetworkSwitch(\"moonbeam\")}\n                        className=\"btn\"\n                    >\n                        <img alt=\"moonbeam\" src={moonbeam} className=\"moonbeam\"/>\n                        Switch to Moonbeam\n                    </button>\n                    <button\n                        onClick={() => handleNetworkSwitch(\"okx\")}\n                        className=\"btn\"\n                    >\n                        <img alt=\"okx\" src={okx} className=\"okx\"/>\n                        Switch to OKXChain\n                    </button>\n                    <button\n                        onClick={() => handleNetworkSwitch(\"evmos\")}\n                        className=\"btn\"\n                    >\n                        <img alt=\"evmos\" src={evmos} className=\"evmos\"/>\n                        Switch to Evmos\n                    </button>\n                    <button\n                        onClick={() => handleNetworkSwitch(\"doge\")}\n                        className=\"btn\"\n                    >\n                        <img alt=\"dc\" src={dc} className=\"dc\"/>\n                        Switch to Dogechain\n                    </button>\n                    <button\n                        onClick={() => handleNetworkSwitch(\"ethpow\")}\n                        className=\"btn\"\n                    >\n                        <img alt=\"ethpow\" src={ethpow} className=\"ethpow\"/>\n                        Switch to EthereumPoW\n                    </button>\n                </Popper>\n            </div>\n        </ClickAwayListener>\n    )\n}","import { useContext, useEffect, useState } from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport { injected } from '../../connectors';\nimport { useWeb3React } from '@web3-react/core';\nimport { Spinner } from './Spinner';\nimport { ethers } from 'ethers';\nimport formatAccountName from '../Common/AccountName';\nimport DBXen from \"../../ethereum/dbxen\"\nimport DBXenViews from \"../../ethereum/dbxenViews\";\nimport DBXenERC20 from \"../../ethereum/dbxenerc20\"\nimport Popper from '@mui/material/Popper';\nimport ClickAwayListener from '@mui/base/ClickAwayListener';\nimport '../../componentsStyling/appBar.scss';\nimport copyIcon from '../../photos/icons/copy-1.svg';\nimport walletIcon from '../../photos/icons/wallet.svg';\nimport disconnectIcon from '../../photos/icons/diconnect.svg';\nimport logo from \"../../photos/white_dbxen.svg\";\nimport \"i18next\";\nimport { useTranslation } from 'react-i18next';\nimport DropdownLanguage from '../DropdownLanguage';\nimport ChainProvider from '../Contexts/ChainProvider';\nimport ChainSetter from '../Contexts/ChainSetter';\nimport ChainContext from '../Contexts/ChainContext';\nconst tokenSymbol = 'DBXen';\n\n\nconst tokenDecimals = 18;\nenum ConnectorNames { Injected = 'Injected' };\n\nconst connectorsByName: { [connectorName in ConnectorNames]: any } = {\n    [ConnectorNames.Injected]: injected\n}\n\nexport function AppBarComponent(props: any): any {\n    const context = useWeb3React();\n    const { connector, library, chainId, account, activate, deactivate } = context\n    const { chain }  = useContext(ChainContext)\n    const [activatingConnector, setActivatingConnector] = useState<any>();\n    const [networkName, setNetworkName] = useState<any>();\n    const [userUnstakedAmount,setUserUnstakedAmount] = useState<any>(0);\n    const [ensName, setEnsName] = useState<any>(\"\");\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const [, setNotificationState] = useState({})\n    const [theme, setTheme] = useState(localStorage.getItem('globalTheme'));\n    const [userStakedAmount, setUserStakedAmount] = useState(\"\")\n    const [rewardsUnclaimed, setRewardsUnclaimed] = useState(\"\")\n    const [open, setOpen] = useState<any>(false);\n    const deb0xViewsContract = DBXenViews(library, chain.deb0xViewsAddress)\n    const [totalStaked, setTotalStaked] = useState(\"\")\n    const [totalXENBurned, setTotalXENBurned] = useState<any>();\n    const { t } = useTranslation();\n\n    const id = open ? 'simple-popper' : \"\";\n\n    if(library){\n        // checkENS();\n        setUnstakedAmount();\n    }\n\n    useEffect(() => {\n        totalAmountStaked()\n    }, [totalAmountStaked]);\n\n    useEffect(() => {\n        setTheme(localStorage.getItem('globalTheme'));\n    }, []);\n\n    useEffect(() => {\n        injected.supportedChainIds?.forEach(chainId => \n            setNetworkName((ethers.providers.getNetwork(chainId).name)));\n        if (activatingConnector && activatingConnector === connector) {\n            setActivatingConnector(undefined)\n        }\n    }, [activatingConnector, connector]);\n\n    useEffect(() => {\n        xenBurned();\n    },[]);\n\n    const xenBurned = async () => {\n        await getTotalXenBurned().then((result: any) => {\n            setTotalXENBurned(result.toLocaleString('en-US'));\n        })\n    }\n\n    async function getTotalXenBurned(){\n        const signer = await library.getSigner(0)\n        const deb0xContract = DBXen(signer, chain.deb0xAddress)\n        let numberBatchesBurnedInCurrentCycle = await deb0xContract.totalNumberOfBatchesBurned();\n        let batchBurned =numberBatchesBurnedInCurrentCycle.toNumber();\n        return batchBurned * 2500000;\n    }\n\n    async function setUnstakedAmount() {\n        const deb0xERC20Contract = DBXenERC20(library, chain.deb0xERC20Address)\n        if(account){\n            await deb0xERC20Contract.balanceOf(account).then((result: any) => \n                setUserUnstakedAmount(floorPrecised(ethers.utils.formatEther(result)))\n            )\n        }\n    }\n\n    useEffect(() => {\n        const deb0xERC20Contract = DBXenERC20(library, chain.deb0xERC20Address)\n        const filterFrom = deb0xERC20Contract.filters.Transfer(account)\n        const filterTo =  deb0xERC20Contract.filters.Transfer(null, account)\n        deb0xERC20Contract.on(filterFrom, () => {\n            setUnstakedAmount()\n        })\n        deb0xERC20Contract.on(filterTo, () => {\n            setUnstakedAmount()\n        })\n\n        return () => {\n            deb0xERC20Contract.removeAllListeners()\n        }\n    },[])\n\n    async function checkENS(){\n        if(Number(chain.chainId) !== 137){\n            var name = await library.lookupAddress(account);\n            if(name !== null)\n            {   \n                setEnsName(name);\n            }\n        }\n       \n    }\n\n    function floorPrecised(number:any) {\n        var power = Math.pow(10, 2);\n        return (Math.floor(parseFloat(number) * power) / power).toString();\n    }\n\n    async function totalAmountStaked() {\n        const deb0xContract = DBXen(library, chain.deb0xAddress)\n        const currentCycle= await deb0xContract.currentStartedCycle()\n        const currentStake = await deb0xContract.summedCycleStakes(currentCycle)\n        const pendingStakeWithdrawal = await deb0xContract.pendingStakeWithdrawal()\n        setTotalStaked(floorPrecised(ethers.utils.formatEther(currentStake.sub(pendingStakeWithdrawal))))\n    }\n\n    async function addToken() {\n        try {\n            const wasAdded = await window.ethereum.request({\n              method: 'wallet_watchAsset',\n              params: {\n                type: 'ERC20',\n                options: {\n                  address: chain.deb0xERC20Address,\n                  symbol: chain.dxnTokenName,\n                  decimals: tokenDecimals,\n                //   image: tokenImage,\n                },\n              },\n            });\n\n            if (wasAdded) {\n                setNotificationState({\n                    message: t(\"app_bar.toastify.token_added\"),\n                    open: true,\n                    severity: \"success\"\n                })      \n                setOpen(false)      \n            }\n            } catch (error: any) {\n                setNotificationState({\n                    message: t(\"app_bar.toastify.error\"),\n                    open: true,\n                    severity: \"info\"\n                })\n            }\n    }\n\n    function copyWalletID() {\n        if(account) {\n            navigator.clipboard.writeText(account)\n            setNotificationState({\n                message: t(\"app_bar.toastify.address_copied\"),\n                open: true,\n                severity: \"success\"\n            })\n        }\n        setOpen(false)\n        \n    }\n\n    async function rewardsAccrued() {\n        await deb0xViewsContract.getUnclaimedRewards(account).then((result: any) => \n            setRewardsUnclaimed(floorPrecised(ethers.utils.formatEther(result)))\n        )\n    }\n\n    async function setStakedAmount() {\n        await deb0xViewsContract.getAccWithdrawableStake(account).then((result: any) => \n            setUserStakedAmount(floorPrecised(ethers.utils.formatEther(result)))\n        )\n    }\n\n    const handleClick = (event: any) => {\n        rewardsAccrued();\n        setStakedAmount();\n        setUnstakedAmount();\n        const { currentTarget } = event;\n        setAnchorEl(currentTarget)\n        setOpen(!open)\n    };\n\n    const handleClickAway = () => {\n        setOpen(false)\n    };\n\n    return (\n        <ChainProvider>\n            <div>\n                <div className=\"app-bar--top\">\n                    <img className=\"logo\" src={logo} alt=\"logo\" />\n                    <Box className=\"main-menu--left\">\n                        <p className=\"mb-0\">{t(\"app_bar.tokens_staked\")}:&nbsp; \n                            {Number(totalStaked).toLocaleString('en-US', {\n                                minimumFractionDigits: 2,\n                                maximumFractionDigits: 2\n                            })} DXN</p>\n                        <p className=\"mb-0\">\n                            {t(\"app_bar.xen_burned\")}: {totalXENBurned}\n                        </p>\n                    </Box>\n                    <Box className=\"main-menu--right d-flex\">\n                        <DropdownLanguage />\n                        <ChainSetter />\n                        <ClickAwayListener onClickAway={handleClickAway}>\n                            <div>\n                                { (() =>  {\n                                    const currentConnector = connectorsByName[ConnectorNames.Injected]\n                                    const activating = currentConnector === activatingConnector\n                                    const connected = currentConnector === connector\n\n                                    return (\n                                        <Button variant=\"contained\"\n                                            key={ConnectorNames.Injected}\n                                            aria-describedby={id}\n                                            onClick={!connected ? \n                                                () => {\n                                                    setActivatingConnector(currentConnector)\n                                                    activate(currentConnector)\n                                                } : \n                                                handleClick\n                                            }>\n                                            \n                                            { activating ? \n                                                <Spinner color={'black'} /> :\n                                                !connected ? \n                                                    t(\"home.connect_text\") :\n                                                    <span>\n                                                        {account === undefined ? \n                                                            t(\"home.unsupported_network\") + ` ${networkName}` : \n                                                            account ? \n                                                                ensName === \"\" ? \n                                                                    `${formatAccountName(account)}` :\n                                                                    `${ensName.toLowerCase()} \n                                                                    (${formatAccountName(account)})`\n                                                            : ''}\n                                                    </span>\n                                            }\n                                        </Button>\n                                    )\n                                }) ()}\n                                <Popper className={`popper ${theme === \"classic\" ? \"classic\" : \"dark\"}` } id={id} open={open} anchorEl={anchorEl}>\n                                    <ul>\n                                        <li>\n                                            {t(\"app_bar.rewards\")}: <br/> \n                                            {Number(rewardsUnclaimed).toLocaleString('en-US', {\n                                                minimumFractionDigits: 10,\n                                                maximumFractionDigits: 10\n                                            })} \n                                            <span>DXN</span>\n                                        </li>\n                                        <li>\n                                            {t(\"app_bar.stake\")}: <br/>\n                                            {Number(userStakedAmount).toLocaleString('en-US', {\n                                                minimumFractionDigits: 10,\n                                                maximumFractionDigits: 10\n                                            })} \n                                            <span>DXN</span>\n                                        </li>\n                                        <li>\n                                            {t(\"app_bar.wallet\")}: <br/> \n                                            {Number(userUnstakedAmount).toLocaleString('en-US', {\n                                                minimumFractionDigits: 10,\n                                                maximumFractionDigits: 10\n                                            })} \n                                            <span>DXN</span>\n                                        </li>\n                                    </ul>\n                                    <Button \n                                        onClick={(event: any) => {\n                                            copyWalletID()\n                                        }}\n                                        className=\"copy-wallet-btn\">\n                                        <span><img src={copyIcon} alt=\"copy\" /></span>{t(\"app_bar.wallet_id\")}\n                                    </Button>\n                                    <Button\n                                        onClick={(event: any) => {\n                                            addToken()\n                                        }}\n                                        className=\"add-token-btn\">\n                                        <span><img src={walletIcon} alt=\"wallet\"/></span>{t(\"app_bar.add_token\")}\n                                    </Button>\n                                    <Button \n                                        onClick={(event: any) => {\n                                            handleClick(event)\n                                            deactivate()\n                                        }}\n                                            className=\"logout-btn\">\n                                            <span><img src={disconnectIcon} alt=\"disconnect\"/></span>{t(\"app_bar.disconnect\")}\n                                    </Button>  \n                                </Popper>\n                            </div>\n                        </ClickAwayListener>\n                    </Box>\n                </div>\n            </div>\n        </ChainProvider>\n    );\n}\n","import { useState, useEffect, useContext } from 'react';\nimport './App.css';\nimport { \n    Web3ReactProvider,\n    useWeb3React\n} from '@web3-react/core';\nimport { ethers } from \"ethers\";\nimport { useEagerConnect, useInactiveListener } from './hooks'\nimport { PermanentDrawer } from './components/App/PermanentDrawer'\nimport { Stake } from './components/App/Stake';\nimport { Box, Button } from '@mui/material';\nimport ThemeProvider from './components/Contexts/ThemeProvider';\nimport './index.scss';\nimport { injected, network } from './connectors';\nimport elephant from './photos/icons/elephant.svg';\nimport elephantWithText from './photos/icons/elephant.png';\nimport deb0xen from './photos/white_dbxen.svg';\nimport maintenanceImg from './photos/empty.png';\nimport { Spinner } from './components/App/Spinner';\nimport { AppBarComponent } from './components/App/AppBar';\nimport { Burn } from './components/App/Burn';\nimport ScreenSize from './components/Common/ScreenSize';\nimport Countdown, { zeroPad } from \"react-countdown\";\nimport { useTranslation } from 'react-i18next';\nimport DropdownLanguage from './components/DropdownLanguage';\nimport ChainContext from './components/Contexts/ChainContext';\nimport ChainProvider from './components/Contexts/ChainProvider';\n\nconst maintenance = process.env.REACT_APP_MAINTENANCE_MODE;\n\n\nenum ConnectorNames { Injected = 'Injected', Network = 'Network' };\n\nconst connectorsByName: { [connectorName in ConnectorNames]: any } = {\n  [ConnectorNames.Injected]: injected,\n  [ConnectorNames.Network]: network\n}\n\nfunction getLibrary(provider: any): ethers.providers.Web3Provider {\n  const library = new ethers.providers.Web3Provider(provider)\n\n  library.pollingInterval = 12000\n  return library\n}\n\nexport default function web3App(): any {\n    const date:any = new Date(Date.UTC(2023, 2, 16, 13, 55, 0, 0));\n    const now: any = Date.now()\n    let endDate = date.getTime() - now\n\n  return (\n        <Web3ReactProvider getLibrary={getLibrary}>\n            {/* <Countdown date={Date.now() + endDate} renderer={renderer} /> */}\n            {/* <ContractsDeployed /> */}\n            <App />\n        </Web3ReactProvider>\n    )\n}\n\nconst renderer = ({ hours, minutes, seconds, completed }: any) => {\n    if (completed) {\n      // Render a complete state\n      return <ContractsDeployed />;\n    } else {\n      // Render a countdown\n      return (\n        <ThemeProvider>\n            <div className=\"app-container p-0 \">\n                <div className=\"initial-page contracts\">\n                    <div className=\"row\">\n                        <div className=\"col-12 img-container mr-4\">\n                            <p>DBXen time in:</p>\n                            <p>\n                                {zeroPad(hours)}:{zeroPad(minutes)}:{zeroPad(seconds)}\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ThemeProvider>\n      );\n    }\n};\n\nfunction ContractsDeployed() {\n    return (\n        <ThemeProvider>\n            <div className=\"app-container p-0 \">\n                <div className=\"initial-page contracts\">\n                    <div className=\"row\">\n                        <div className=\"col-12 img-container mr-4\">\n                            <img className=\"image--left\" src={elephantWithText} alt=\"elephant\" />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ThemeProvider>\n    )\n}\n\nfunction App() {\n    const context = useWeb3React<ethers.providers.Web3Provider>()\n    const { connector, account, activate } = context\n    const [selectedIndex, setSelectedIndex] = useState<any>(0);\n    // handle logic to recognize the connector currently being activated\n    const [activatingConnector, setActivatingConnector] = useState<any>()\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const [networkName, setNetworkName] = useState<any>();\n    let errorMsg;\n    const dimensions = ScreenSize();\n    const { t } = useTranslation();\n    const { chain, setChain }  = useContext(ChainContext)\n    \n    useEffect(() => {\n        injected.supportedChainIds?.forEach(chainId => \n            setNetworkName((ethers.providers.getNetwork(chainId).name)));\n        if (activatingConnector && activatingConnector === connector) {\n            setActivatingConnector(undefined)\n        }\n    }, [activatingConnector, connector])\n\n    // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n    const triedEager = useEagerConnect()\n\n    // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n    useInactiveListener(!triedEager || !!activatingConnector)\n\n    function handleClick (event: React.MouseEvent<HTMLElement>) {\n        setAnchorEl(anchorEl ? null : event.currentTarget);\n    };\n\n    useEffect(() => {   \n        window.ethereum ?\n            window.ethereum.request({method: \"eth_requestAccounts\"}).then(() => {\n                 window.ethereum.request({\n                    method: 'eth_chainId',\n                  }).then((chainId:any) => {\n                 //   switchNetwork(chainId); \n                  })\n            }).catch((err: any) => displayErrorMsg(err))\n            : displayErrorMsg(\"Please install MetaMask\");\n    }, [])\n\n    async function switchNetwork(chainId:any) {\n        if((parseInt(chainId.toString(), 16) !== 137) && (parseInt(chainId.toString(), 16) !== 43114)){\n        try {\n            await window.ethereum.request({\n            method: 'wallet_switchEthereumChain',\n            params: [{ chainId: \"0x89\"}],\n            }).then(\n                displayErrorMsg(\"You have switched to the right network\")\n            );            \n        } catch (switchError) {\n            try {\n                await window.ethereum.request({\n                method: 'wallet_addEthereumChain',\n                params: [\n                    {\n                        chainId: '0x89', \n                        chainName:'Polygon Network',\n                        rpcUrls:['https://polygon.llamarpc.com'],                   \n                        blockExplorerUrls:['https://polygonscan.com/'],  \n                        nativeCurrency: { \n                        symbol:'Matic',   \n                        decimals: 18\n                        }       \n                    }\n                    ]});\n            } catch (err) {\n                displayErrorMsg(\"Cannot switch to the network\");\n            }\n        }\n    }\n    }\n\n    function displayErrorMsg(error: string) {\n        errorMsg = error;\n        return errorMsg;\n    }\n    \n    return (\n\n    <ChainProvider>\n        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n            {!!errorMsg &&\n                <p className='alert alert-danger position-fixed' style={{ marginTop: '4rem', marginBottom: '0' }}>\n                    {displayErrorMsg(errorMsg)}\n                </p>\n            }\n        </div>\n            <ThemeProvider>\n            { account ? \n                <div className=\"app-container container-fluid\">\n                    { maintenance === \"true\" ?\n                        <div className=\"row main-row maintenance-mode\">\n                            <img className=\"maintenance-img\" src={maintenanceImg} alt=\"maintenance\" />\n                            <h1>Maintenance Mode</h1>\n                            <h4>We're tightening some nuts and bolts round the back. We'll be back up and running soon.</h4>\n                        </div> :\n                        <div className=\"row main-row\">\n                            <div className=\"col col-lg-3 col-12 p-0 side-menu-container\">\n                                <PermanentDrawer />\n                            </div>\n                            <div className=\"col col-lg-9 col-12\">\n                                <AppBarComponent />\n                                \n                                <Box className=\"main-container\" sx={{marginTop: 12}}>\n                                {dimensions.width > 768 ? \n                                    <Stake />\n                                    :\n                                    <>\n                                        {selectedIndex === 0 && <Burn /> }\n                                        {selectedIndex === 1 && <Stake /> }\n                                    </>\n                                }\n                                </Box>\n                            </div>\n                        </div>\n                    }\n                    <div className=\"navigation-mobile\">\n                        <div className={`navigation-item ${selectedIndex === 0 ? \"active\" : \"\"}`}\n                            onClick={() => setSelectedIndex(0)}>\n                                {t(\"mobile.mint\")}\n                        </div>\n                        <div className={`navigation-item ${selectedIndex === 1 ? \"active\" : \"\"}`}\n                            onClick={() => setSelectedIndex(1)}>\n                                {t(\"mobile.fees\")}\n                        </div>\n                    </div>\n                </div> :\n                <div className=\"app-container p-0 \">\n                    <div className=\"initial-page\">\n                    <DropdownLanguage />\n                        <div className=\"row\">\n                            <div className=\"col-lg-7 img-container mr-4\">\n                                <img className=\"image--left\" src={elephant} alt=\"elephant\" />\n                                <div className=\"img-content\">\n                                    <p>{t(\"home.connect_text\")}</p>\n                                    <p>{t(\"home.burn_text\")}</p>\n                                    <p>{t(\"home.earn_text\")}</p>\n                                    \n                                    <div>\n                                        { (() =>  {\n                                            const currentConnector = connectorsByName[ConnectorNames.Injected]\n                                            const activating = currentConnector === activatingConnector\n                                            const connected = currentConnector === connector\n\n                                            return (\n                                                <Button variant=\"contained\"\n                                                    key={ConnectorNames.Injected}\n                                                    // aria-describedby={id}\n                                                    onClick={!connected ? \n                                                        () => {\n                                                            setActivatingConnector(currentConnector)\n                                                            activate(currentConnector)\n                                                        } : \n                                                        handleClick}\n                                                        className=\"connect-button\">\n                                                    \n                                                    { activating ? \n                                                        <Spinner color={'black'} /> :\n                                                        !connected ? \n                                                            \"Connect\" :\n                                                            <span  className=\"unsupported\">\n                                                                {typeof window.ethereum === 'undefined' ? \n                                                                    `Check your prerequisites` : \n                                                                    account === undefined ? \"Unsupported network\" : ''}\n                                                            </span>\n                                                    }\n                                                </Button>\n                                            )\n                                        }) ()}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"col-12 col-lg-5 text-center\">\n                                <div className=\"text-container\">\n                                    <img className=\"dark-logo\" src={deb0xen} alt=\"logo\" />\n                                    <p>\n                                        Community built crypto protocol <br/> contributing to XEN deflation\n                                    </p>\n                                    <div className=\"connect-mobile\">\n                                        { (() =>  {\n                                            const currentConnector = connectorsByName[ConnectorNames.Injected]\n                                            const activating = currentConnector === activatingConnector\n                                            const connected = currentConnector === connector\n\n                                        return (\n                                            <Button variant=\"contained\"\n                                                key={ConnectorNames.Injected}\n                                                // aria-describedby={id}\n                                                onClick={!connected ? \n                                                    () => {\n                                                        setActivatingConnector(currentConnector)\n                                                        activate(currentConnector)\n                                                    } : \n                                                    handleClick}\n                                                    className=\"connect-button\">\n                                                \n                                                { activating ? \n                                                    <Spinner color={'black'} /> :\n                                                    !connected ? \n                                                        t(\"home.connect\") :\n                                                        <span>\n                                                            {typeof window.ethereum === 'undefined' ? \n                                                                t(\"home.prerequisites\") : \n                                                                account === undefined ? t(\"home.unsupported_network\") + ` ${networkName}` : ''}\n                                                        </span>\n                                                }\n                                            </Button>\n                                        )\n                                    }) ()}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        }\n        </ThemeProvider>\n    </ChainProvider>\n  )\n}\n\n\n","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\n\nimport { injected } from './connectors'\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        setTried(true)\n      }\n    })\n  }, [activate]) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport function useInactiveListener(suppress: boolean = false) {\n  const { active, error, activate } = useWeb3React()\n\n  useEffect((): any => {\n    const { ethereum } = window as any\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        activate(injected)\n      }\n      const handleChainChanged = (chainId: string | number) => {\n        activate(injected)\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        if (accounts.length > 0) {\n          activate(injected)\n        }\n      }\n      const handleNetworkChanged = (networkId: string | number) => {\n        activate(injected)\n      }\n\n      ethereum.on('connect', handleConnect)\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n      ethereum.on('networkChanged', handleNetworkChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('connect', handleConnect)\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n          ethereum.removeListener('networkChanged', handleNetworkChanged)\n        }\n      }\n    }\n  }, [active, error, suppress, activate])\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport Backend from \"i18next-http-backend\";\n\ni18n\n    .use(Backend)\n    .use(initReactI18next)\n    .init({\n        lng: JSON.parse(localStorage.getItem('language')),\n        fallbackLng: \"en\",\n        interpolation: {\n            escapeValue: false\n        },\n        react: { \n            useSuspense: false\n        }\n    });\n\nexport default i18n;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './i18n';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}