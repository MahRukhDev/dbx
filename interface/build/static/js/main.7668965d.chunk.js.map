{"version":3,"sources":["connectors.ts","hooks.ts","ethereum/XENCrypto.js","ethereum/deb0x.js","components/App/Snackbar.tsx","components/App/Spinner.tsx","photos/icons/file-icon.svg","components/App/PermanentDrawer.tsx","components/Common/ScreenSize.tsx","ethereum/deb0xViews.js","ethereum/deb0xerc20.js","photos/icons/coin-bag-solid--light.svg","photos/icons/token.svg","photos/icons/coin-bag-solid--dark.svg","photos/icons/wallet--light.svg","photos/icons/wallet--dark.svg","photos/icons/fees.svg","photos/icons/finance.svg","ethereum/signer.js","ethereum/forwarder.js","components/App/Stake.tsx","components/Common/GaEventTracker.tsx","components/Contexts/ThemeContext.tsx","components/Contexts/ThemeProvider.tsx","photos/icons/elephant.svg","photos/white_dbxen.svg","photos/empty.png","components/Common/AccountName.tsx","components/App/AppBar.tsx","photos/icons/copy-1.svg","photos/icons/wallet.svg","photos/icons/diconnect.svg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["injected","InjectedConnector","supportedChainIds","network","NetworkConnector","urls","defaultChainId","useEagerConnect","useWeb3React","activate","active","useState","tried","setTried","useEffect","isAuthorized","then","undefined","catch","abi","require","signerOrProvider","address","ethers","Contract","Alert","forwardRef","props","ref","elevation","variant","SnackbarNotification","severity","state","open","message","setState","handleClose","event","reason","Snackbar","autoHideDuration","onClose","sx","width","Spinner","color","rest","height","viewBox","xmlns","stroke","fill","fillRule","transform","strokeWidth","strokeOpacity","cx","cy","r","d","attributeName","type","from","to","dur","repeatCount","BigNumber","deb0xAddress","xenCryptoAddress","PermanentDrawer","context","connector","library","account","chainId","activatingConnector","setActivatingConnector","dimensions","windowSize","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","ScreenSize","notificationState","setNotificationState","setNetworkName","value","setValue","approveBrun","setApproveBurn","balanceGratherThanZero","checkBalance","loading","setLoading","getSigner","signer","XENCrypto","xenContract","balanceOf","balance","number","utils","formatEther","toString","totalAmountToBurn","approve","parseEther","wait","result","error","deb0xContract","Deb0x","gasLimitIntervalValue","firstValue","overrides","parseUnits","gasLimit","constants","AddressZero","tx","setBalance","forEach","providers","getNetwork","name","setTimeout","Box","className","display","Drawer","anchor","max","onChange","e","target","onClick","Number","LoadingButton","loadingPosition","burnXEN","disabled","setApproval","href","icon","faTwitter","size","src","document","faGithub","ethSigUtil","ethereumJsUtil","typeName","typeHash","id","EIP712Domain","ForwardRequest","getMetaTxTypeData","verifyingContract","types","domain","version","primaryType","signTypedData","data","JSON","stringify","method","argData","send","buildRequest","forwarder","input","valueParam","getNonce","nonce","gas","validUntilTime","buildTypedData","request","provider","n","typeData","getDomainSeparator","bufferToHex","TypedDataUtils","hashStruct","signMetaTxRequest","toSign","signature","domainSeparator","createInstance","whitelist","dataFromWhitelist","deb0xViewsAddress","deb0xERC20Address","Stake","category","gaEventTracker","action","ReactGA","FeesPanel","feesUnclaimed","setFeesUnclaimed","Deb0xViews","deb0xViewsContract","getUnclaimedFees","unclaimedRewards","fetchClaimFeesResult","url","fetch","body","headers","response","json","parse","status","sendClaimFeesTx","claimFees","getAddress","includes","interface","encodeFunctionData","feesAccrued","Card","CardContent","Typography","component","fees","alt","CardActions","CyclePanel","currentReward","setCurrentReward","currentCycleReward","cycleReward","RewardsPanel","rewardsUnclaimed","setRewardsUnclaimed","feeSharePercentage","setFeeSharePercentage","getUnclaimedRewards","getAccWithdrawableStake","accWithdrawableStake","parseFloat","add","currentStartedCycle","currentCycle","summedCycleStakes","totalSupply","feeShare","Math","round","toFixed","fetchClaimRewardsResult","sendClaimRewardsTx","claimRewards","rewardsAccrued","finance","StakeUnstake","alignment","setAlignment","userStakedAmount","setUserStakedAmount","userUnstakedAmount","setUserUnstakedAmount","tokensForUnstake","setTokenForUnstake","totalStaked","setTotalStaked","amountToUnstake","setAmountToUnstake","amountToStake","setAmountToStake","approved","setApproved","localStorage","getItem","theme","setTheme","accFirstStake","firstStakeCycle","accSecondStake","secondStakeCycle","accStakeCycle","firstStakeCycleAmount","secondStakeCycleAmount","withdawbleStake","totalStakedAmount","Deb0xERC20","deb0xERC20Contract","slice","indexOf","allowance","fetchUnstakeResult","sendUnstakeTx","unstake","fetchStakeResult","sendStakeTx","stake","setStakedAmount","totalAmountStaked","setTokensForUntakedAmount","setUnstakedAmount","ToggleButtonGroup","exclusive","newAlignment","ToggleButton","coinBagDark","coinBagLight","walletDark","walletLight","Grid","container","item","OutlinedInput","placeholder","inputProps","min","Button","initialThemeState","_value","ThemeContext","createContext","ThemeProvider","children","savedThemeLocal","setItem","Provider","formatAccountName","substring","length","ConnectorNames","tokenSymbol","connectorsByName","Injected","AppBarComponent","deactivate","networkName","ensName","setEnsName","anchorEl","setAnchorEl","setOpen","floorPrecised","lookupAddress","TotalStaked","currentStake","pendingStakeWithdrawal","sub","power","pow","floor","ethereum","params","options","symbol","decimals","checkENS","filterFrom","filters","Transfer","filterTo","on","removeAllListeners","handleClick","currentTarget","ClickAwayListener","onClickAway","currentConnector","activating","connected","toLowerCase","Popper","navigator","clipboard","writeText","copyIcon","addToken","walletIcon","disconnectIcon","maintenance","process","REACT_APP_MAINTENANCE_MODE","Network","getLibrary","Web3Provider","pollingInterval","App","errorMsg","triedEager","displayErrorMsg","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","suppress","handleConnect","handleChainChanged","handleAccountsChanged","accounts","handleNetworkChanged","networkId","removeListener","useInactiveListener","switchNetwork","err","style","flexDirection","alignItems","marginTop","marginBottom","maintenanceImg","elephant","deb0xen","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7668965d.chunk.js","sourcesContent":["\nimport { InjectedConnector } from '@web3-react/injected-connector'\nimport { NetworkConnector } from '@web3-react/network-connector'\n\n// const POLLING_INTERVAL = 12000\nconst RPC_URLS: { [chainId: number]: string } = {\n    137: 'https://polygon-mainnet.g.alchemy.com/v2/qthz4_6kfuPquCG5N1A6v5Waz9YW0pNZ'\n}\n\nexport const injected = new InjectedConnector({ supportedChainIds: [137] })\n\nexport const network = new NetworkConnector({\n    urls: { 137: RPC_URLS[137] },\n    defaultChainId: 137\n  })","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\n\nimport { injected } from './connectors'\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        setTried(true)\n      }\n    })\n  }, [activate]) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport function useInactiveListener(suppress: boolean = false) {\n  const { active, error, activate } = useWeb3React()\n\n  useEffect((): any => {\n    const { ethereum } = window as any\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        activate(injected)\n      }\n      const handleChainChanged = (chainId: string | number) => {\n        activate(injected)\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        if (accounts.length > 0) {\n          activate(injected)\n        }\n      }\n      const handleNetworkChanged = (networkId: string | number) => {\n        activate(injected)\n      }\n\n      ethereum.on('connect', handleConnect)\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n      ethereum.on('networkChanged', handleNetworkChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('connect', handleConnect)\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n          ethereum.removeListener('networkChanged', handleNetworkChanged)\n        }\n      }\n    }\n  }, [active, error, suppress, activate])\n}","import { ethers } from \"ethers\";\n\nconst { abi } = require(\"./XENCrypto.json\");\n\nexport default (signerOrProvider, address) => {\n    return new ethers.Contract(address, abi, signerOrProvider);\n}","import { ethers } from \"ethers\";\n\nconst { abi } = require(\"./Deb0x.json\");\n\nexport default (signerOrProvider, address) => {\n  return new ethers.Contract(address, abi, signerOrProvider);\n}","import { useState, forwardRef, useEffect } from 'react'\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\nconst Alert = forwardRef<HTMLDivElement, AlertProps>(function Alert(\n  props,\n  ref,\n) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport default function SnackbarNotification(props: any) {\n\n  const [state, setState] = useState({ severity: props.state.severity, open: props.state.open, message: props.state.message })\n\n  useEffect(() => {\n    setState({severity: props.state.severity, open: props.state.open, message: props.state.message})\n  }, [props])\n\n  const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setState({\n      message: state.message, open: false,\n      severity: state.severity\n    })\n  };\n\n  return (\n    <Snackbar open={state.open} autoHideDuration={6000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity={state.severity} sx={{ width: '100%' }}>\n        {state.message}\n      </Alert>\n    </Snackbar>\n  )\n}","// <!-- By Sam Herbert (@sherb), for everyone. More @ http://goo.gl/7AJzbL -->\nexport function Spinner({ color, ...rest }: any) {\n    return (\n        <svg width=\"38\" height=\"38\" viewBox=\"0 0 38 38\" \n            xmlns=\"http://www.w3.org/2000/svg\" stroke={color} {...rest}>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <g transform=\"translate(1 1)\" strokeWidth=\"2\">\n                    <circle strokeOpacity=\".5\" cx=\"18\" cy=\"18\" r=\"18\" />\n                    <path d=\"M36 18c0-9.94-8.06-18-18-18\">\n                    <animateTransform\n                        attributeName=\"transform\"\n                        type=\"rotate\"\n                        from=\"0 18 18\"\n                        to=\"360 18 18\"\n                        dur=\"1s\"\n                        repeatCount=\"indefinite\" />\n                    </path>\n                </g>\n            </g>\n        </svg>\n    )\n}","export default __webpack_public_path__ + \"static/media/file-icon.92106822.svg\";","import React, { useState, useEffect, useContext } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport Box from '@mui/material/Box';\nimport Drawer from '@mui/material/Drawer';\nimport { injected } from '../../connectors';\nimport Deb0xERC20 from \"../../ethereum/deb0xerc20\"\nimport XENCrypto from '../../ethereum/XENCrypto';\nimport Deb0x from \"../../ethereum/deb0x\"\nimport { ethers } from \"ethers\";\nimport \"../../componentsStyling/permanentDrawer.scss\";\nimport ScreenSize from '../Common/ScreenSize';\nimport SnackbarNotification from './Snackbar';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport { Spinner } from './Spinner';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter, faGithub } from \"@fortawesome/free-brands-svg-icons\";\nimport document from \"../../photos/icons/file-icon.svg\";\nconst { BigNumber } = require(\"ethers\");\n\n\nconst deb0xAddress = \"0xD6F478aa29c8c5Dc233D846D85F064DE30170aD4\";\nconst deb0xERC20Address = \" 0x62E6B821353eAe41859B52bDc885f9cfA70B2c80\";\nconst xenCryptoAddress = \"0x2AB0e9e4eE70FFf1fB9D67031E44F6410170d00e\";\n\ndeclare global {\n    interface Window {\n        ethereum: any;\n    }\n}\n\nexport function PermanentDrawer(props: any): any {\n    const context = useWeb3React()\n    const { connector, library, chainId, account } = context\n    const [activatingConnector, setActivatingConnector] = useState<any>()\n    const dimensions = ScreenSize();\n    const [notificationState, setNotificationState] = useState({});\n    const [networkName, setNetworkName] = useState<any>();\n    const [value, setValue] = useState(1);\n    const [approveBrun, setApproveBurn] = useState<boolean>();\n    const [balanceGratherThanZero, checkBalance] = useState(\"\");\n\n    const [loading, setLoading] = useState(false)\n\n    useEffect(() => {\n        setApproveBurn(false)\n    }, [account]);\n\n    useEffect(() => {\n        setBalance()\n    }, [account,balanceGratherThanZero]);\n\n    useEffect(() => {\n        injected.supportedChainIds?.forEach(chainId => \n            setNetworkName((ethers.providers.getNetwork(chainId).name)));\n        if (activatingConnector && activatingConnector === connector) {\n            setActivatingConnector(undefined)\n        }\n    }, [activatingConnector, connector])\n\n    async function setBalance(){\n        setLoading(true);\n        const signer = await library.getSigner(0)\n        const xenContract = await XENCrypto(signer, xenCryptoAddress);\n        let number;\n\n        await xenContract.balanceOf(account).then((balance: any) => {\n            number = ethers.utils.formatEther(balance);\n            checkBalance(number.toString()) \n            setLoading(false);\n        })\n    }\n\n    async function setApproval() {\n        setLoading(true);\n        const signer = await library.getSigner(0)\n        const xenContract = await XENCrypto(signer, xenCryptoAddress)\n        let totalAmountToBurn = value * 250000;\n        try {\n            const tx = await xenContract.approve(deb0xAddress, ethers.utils.parseEther(totalAmountToBurn.toString()))\n            tx.wait()\n                .then((result: any) => {\n                    setApproveBurn(true);\n                    setNotificationState({\n                        message: \"Your succesfully approved contract for burn.\", open: true,\n                        severity: \"success\"\n                    })\n                    setLoading(false)\n                })\n                .catch((error: any) => {\n                    setNotificationState({\n                        message: \"Contract couldn't be approved for burn!\", open: true,\n                        severity: \"error\"\n                    })\n                    setLoading(false)\n                })\n        } catch (error) {\n            setNotificationState({\n                message: \"You rejected the transaction. Contract hasn't been approved for burn.\", open: true,\n                severity: \"info\"\n            })\n            setLoading(false)\n        }\n    }\n\n    async function burnXEN(){\n        setLoading(true)\n        const signer = await library.getSigner(0)\n        const deb0xContract = Deb0x(signer, deb0xAddress)\n        let gasLimitIntervalValue = BigNumber.from(\"7000000\");\n        let firstValue =  \"0.1\";\n\n        if(value > 500 && value < 1000){\n             gasLimitIntervalValue = BigNumber.from(\"1200000\");\n             firstValue =  \"0.2\";\n        }\n\n        if(value >= 1000 && value < 1500){\n            gasLimitIntervalValue = BigNumber.from(\"17000000\");\n            firstValue =  \"0.3\";\n       }\n\n       if(value >= 1500 && value <= 2000){\n        gasLimitIntervalValue = BigNumber.from(\"20000000\");\n        firstValue =  \"0.4\";\n        }\n\n        try {\n            const overrides = \n                { value: ethers.utils.parseUnits(firstValue, \"ether\"),\n                    gasLimit:gasLimitIntervalValue }\n            const tx = await deb0xContract[\"burnBatch(uint256,address,uint256,uint256)\"](value,\n                ethers.constants.AddressZero,\n                0,\n                0,\n                overrides)\n\n            await tx.wait()\n                .then((result: any) => {\n                    setNotificationState({\n                        message: \"Burn completed\",\n                        open: true,\n                        severity: \"success\"\n                    })\n                    setLoading(false)\n                    setApproveBurn(false)\n                })\n                .catch((error: any) => {\n                    setNotificationState({\n                        message: \"Something went wrong!\",\n                        open: true,\n                        severity: \"error\"\n                    })\n                    setLoading(false)\n                })\n            } catch (error: any) {\n                setNotificationState({\n                    message: \"You rejected the transaction.\",\n                    open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n    }\n\n    useEffect(() => {\n        setTimeout(() => {setNotificationState({})}, 2000)\n    }, [notificationState])\n\n    const handleInputChange = (e: any)=>{\n        if(value > 20000000) {\n            setValue(20000000)\n        } else {\n            setValue(e.target.value);\n        }\n    }\n\n    const incNum = () => {\n        if(value < 20000000)\n            setValue(Number(value)+1);\n    };\n\n    const decNum = () => {\n        if(value > 1)\n            setValue(value - 1);\n    }\n\n    return (\n        <>\n            <SnackbarNotification state={notificationState} \n                setNotificationState={setNotificationState} />\n            <Box className=\"side-menu-box\" sx={{ display: 'flex' }}>\n                <Drawer variant=\"permanent\"\n                    anchor={dimensions.width > 768 ? 'left' : 'bottom'}\n                    className=\"side-menu\">\n                    <div className=\"image-container\">\n                        <div className=\"img\"></div>\n                    </div>\n                    <div className=\"side-menu--bottom burn-container\">\n                        <div className=\"row\">\n                            <p className=\"text-center mb-0\">Choose the number of XEN batches you want to burn</p>\n                            <p className=\"text-center\">(1 batch = 250 000 XEN)</p>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col input-col\">\n                                <input type=\"number\" value={value} max=\"1000000\" onChange={handleInputChange}/>\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <button className=\"btn count-btn col\" type=\"button\" onClick={decNum}>-</button>\n                            <button className=\"btn count-btn col\" type=\"button\" onClick={incNum}>+</button>\n                        </div>\n                        <div className=\"row\">\n                            <button className=\"btn count-btn max-btn col\" type=\"button\" \n                                onClick={() => setValue(1000000)}>MAX</button>\n                        </div>\n                        {approveBrun ?\n                            <LoadingButton className=\"burn-btn\" \n                                loadingPosition=\"end\"\n                                onClick={() => burnXEN()} >\n                                    {loading ? <Spinner color={'black'} /> : \"Burn XEN\" }\n                            </LoadingButton> :\n                           balanceGratherThanZero === '0.0' ||  balanceGratherThanZero === '0' ? \n                            <LoadingButton className=\"burn-btn\" \n                               loadingPosition=\"end\"\n                               disabled={ balanceGratherThanZero === '0.0' ||  balanceGratherThanZero === '0'}>\n                                   {loading ? <Spinner color={'black'} /> : \"Your balance is 0!\" }\n                            </LoadingButton> :\n                            <LoadingButton className=\"burn-btn\" \n                                loadingPosition=\"end\"\n                                disabled={  balanceGratherThanZero === '0.0' ||  balanceGratherThanZero === '0'}\n                                onClick={() => setApproval()} >\n                                    {loading ? <Spinner color={'black'} /> : \"Approve Burn XEN\" }\n                            </LoadingButton>\n                        }\n                        \n                    </div>\n                    <div className=\"content\">\n                        <div className=\"social-media\">\n                            <a href=\"https://mobile.twitter.com/deb0xDAO\" target=\"_blank\" className=\"logo-text-color\">\n                                <FontAwesomeIcon icon={faTwitter} size=\"xl\"/>\n                            </a>\n                            <a href=\"https://dbxen.gitbook.io/dbxen-litepaper/\" target=\"_blank\" className=\"logo-text-color\">\n                                <img src={document} />\n                            </a>\n                            <a href=\"https://github.com/deb0x\" target=\"_blank\" className=\"logo-text-color\">\n                                <FontAwesomeIcon icon={faGithub} size=\"xl\"/>\n                            </a>\n                        </div>\n                    </div>\n                </Drawer>\n            </Box>\n        </>\n    );\n}","import React, { useState, useEffect } from 'react'\n\nexport default function useWindowSize() {\n    // Initialize state with undefined width/height so server and client renders match\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n    const [windowSize, setWindowSize] = useState({\n      width: 0,\n      height: 0,\n    });\n    useEffect(() => {\n      // Handler to call on window resize\n      function handleResize() {\n        // Set window width/height to state\n        setWindowSize({\n          width: window.innerWidth,\n          height: window.innerHeight,\n        });\n      }\n      // Add event listener\n      window.addEventListener(\"resize\", handleResize);\n      // Call handler right away so state gets updated with initial window size\n      handleResize();\n      // Remove event listener on cleanup\n      return () => window.removeEventListener(\"resize\", handleResize);\n    }, []); // Empty array ensures that effect is only run on mount\n    return windowSize;\n  }","import { ethers } from \"ethers\";\n\nconst { abi } = require(\"./Deb0xViews.json\");\n\nexport default (signerOrProvider, address) => {\n    return new ethers.Contract(address, abi, signerOrProvider);\n}","import { ethers } from \"ethers\";\n\nconst { abi } = require(\"./Deb0xERC20.json\");\n\nexport default (signerOrProvider, address) => {\n    return new ethers.Contract(address, abi, signerOrProvider);\n}\n","export default __webpack_public_path__ + \"static/media/coin-bag-solid--light.d9344235.svg\";","export default __webpack_public_path__ + \"static/media/token.0bd78e9a.svg\";","export default __webpack_public_path__ + \"static/media/coin-bag-solid--dark.b9b74873.svg\";","export default __webpack_public_path__ + \"static/media/wallet--light.60fbc32b.svg\";","export default __webpack_public_path__ + \"static/media/wallet--dark.307c5384.svg\";","export default __webpack_public_path__ + \"static/media/fees.50cb4df6.svg\";","export default __webpack_public_path__ + \"static/media/finance.d8ebf4c0.svg\";","const ethSigUtil = require('eth-sig-util');\n\nconst ethers = require('ethers')\n\nconst ethereumJsUtil = require('ethereumjs-util')\n\nconst GENERIC_PARAMS = 'address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data,uint256 validUntilTime'\nconst typeName = `ForwardRequest(${GENERIC_PARAMS})`\nconst typeHash = ethers.utils.id(typeName)\n\nconst EIP712Domain = [\n    { name: 'name', type: 'string' },\n    { name: 'version', type: 'string' },\n    { name: 'chainId', type: 'uint256' },\n    { name: 'verifyingContract', type: 'address' }\n];\n\nconst ForwardRequest = [\n    { name: 'from', type: 'address' },\n    { name: 'to', type: 'address' },\n    { name: 'value', type: 'uint256' },\n    { name: 'gas', type: 'uint256' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'data', type: 'bytes' },\n    { name: 'validUntilTime', type: 'uint256' }\n];\n\nfunction getMetaTxTypeData(chainId, verifyingContract) {\n    return {\n        types: {\n            EIP712Domain,\n            ForwardRequest,\n        },\n        domain: {\n            name: 'Forwarder',\n            version: '0.0.1',\n            chainId,\n            verifyingContract,\n        },\n        primaryType: 'ForwardRequest',\n    }\n};\n\nasync function signTypedData(signer, from, data) {\n    const [method, argData] = ['eth_signTypedData_v4', JSON.stringify(data)]\n    return await signer.send(method, [from, argData]);\n}\n\nasync function buildRequest(forwarder, input, valueParam) {\n    const value = valueParam ? valueParam : '0';\n    const nonce = await forwarder.getNonce(input.from).then(nonce => nonce.toString());\n    return { value, gas: '100000', nonce, validUntilTime: '0', ...input };\n}\n\nasync function buildTypedData(forwarder, request) {\n    const chainId = await forwarder.provider.getNetwork().then(n => n.chainId);\n    const typeData = getMetaTxTypeData(chainId, forwarder.address);\n    return {...typeData, message: request };\n}\n\nasync function getDomainSeparator(forwarder) {\n    const chainId = await forwarder.provider.getNetwork().then(n => n.chainId);\n    const typeData = getMetaTxTypeData(chainId, forwarder.address);\n    return ethereumJsUtil.bufferToHex(ethSigUtil.TypedDataUtils.hashStruct('EIP712Domain', typeData.domain, { EIP712Domain }, 'V4'))\n}\n\nexport async function signMetaTxRequest(signer, forwarder, input, value) {\n    const request = await buildRequest(forwarder, input, value);\n    const toSign = await buildTypedData(forwarder, request);\n    const signature = await signTypedData(signer, input.from, toSign);\n    const domainSeparator = await getDomainSeparator(forwarder)\n    return { typeHash, domainSeparator, signature, request };\n}","import { ethers } from 'ethers';\nimport { Forwarder as address } from '../deploy.json';\n\nconst { abi } = require(\"./Forwarder.json\");\n\nexport function createInstance(provider) {\n  return new ethers.Contract(address, abi, provider);\n}\n","import { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport {\n    Card, CardActions, CardContent, Button, Grid,\n    Typography, Box, OutlinedInput\n} from '@mui/material';\n\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport Deb0x from \"../../ethereum/deb0x\"\nimport Deb0xViews from \"../../ethereum/deb0xViews\";\nimport Deb0xERC20 from \"../../ethereum/deb0xerc20\"\nimport SnackbarNotification from './Snackbar';\nimport { BigNumber, ethers } from \"ethers\";\nimport \"../../componentsStyling/stake.scss\";\nimport token from \"../../photos/icons/token.svg\"\nimport coinBagLight from \"../../photos/icons/coin-bag-solid--light.svg\";\nimport coinBagDark from \"../../photos/icons/coin-bag-solid--dark.svg\";\nimport walletLight from \"../../photos/icons/wallet--light.svg\";\nimport walletDark from \"../../photos/icons/wallet--dark.svg\";\nimport fees from \"../../photos/icons/fees.svg\";\nimport finance from \"../../photos/icons/finance.svg\";\nimport { signMetaTxRequest } from '../../ethereum/signer';\nimport { createInstance } from '../../ethereum/forwarder'\nimport dataFromWhitelist from '../../constants.json';\nimport useAnalyticsEventTracker from '../Common/GaEventTracker';\n\nconst { whitelist } = dataFromWhitelist;\nconst deb0xAddress = \"0xD6F478aa29c8c5Dc233D846D85F064DE30170aD4\";\nconst deb0xViewsAddress = \"0x65DC3F867535fc92669922Ea49aa9420A332e93f\";\nconst deb0xERC20Address = \"0x62E6B821353eAe41859B52bDc885f9cfA70B2c80\";\n\nexport function Stake(props: any): any {\n\n    const { account, library } = useWeb3React()\n    const [notificationState, setNotificationState] = useState({})\n    const gaEventTracker = useAnalyticsEventTracker('Stake');\n\n    function FeesPanel() {\n        const [feesUnclaimed, setFeesUnclaimed] = useState(\"\")\n        const [loading, setLoading] = useState(false)\n\n        useEffect(() => {\n            feesAccrued()\n        }, [feesUnclaimed]);\n\n        async function feesAccrued() {\n            const deb0xViewsContract = await Deb0xViews(library, deb0xViewsAddress);\n            \n            const unclaimedRewards = await deb0xViewsContract.getUnclaimedFees(account);\n\n            setFeesUnclaimed(ethers.utils.formatEther(unclaimedRewards))\n        }\n\n        async function fetchClaimFeesResult(request: any, url: any) {\n            await fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(request),\n                headers: { 'Content-Type': 'application/json' },\n            })\n                .then((response) => response.json())\n                .then(async (data) => {\n                    try{\n                        const {tx: txReceipt} = JSON.parse(data.result)\n                        if(txReceipt.status == 1){\n                            setNotificationState({\n                                message: \"You succesfully claimed your fees.\", open: true,\n                                severity: \"success\"\n                            })\n                        } else {\n                            setNotificationState({\n                                message: \"Fees couldn't be claimed!\", open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    } catch(error) {\n                        if(data.status == \"pending\") {\n                            setNotificationState({\n                                message: \"Your transaction is pending. Your fees should arrive shortly\",\n                                open: true,\n                                severity: \"info\"\n                            })\n                        } else if(data.status == \"error\") {\n                            setNotificationState({\n                                message: \"Transaction relayer error. Please try again\",\n                                open: true,\n                                severity: \"error\"\n                            })\n                        }\n                    }\n                    \n                })\n        }\n\n        async function sendClaimFeesTx(deb0xContract: any) {\n            try {\n                const tx = await deb0xContract.claimFees()\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"You succesfully claimed your fees.\", open: true,\n                            severity: \"success\"\n                        })\n                        //setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: \"Fees couldn't be claimed!\", open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n            } catch (error: any) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Your fees haven't been claimed.\",\n                    open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function claimFees() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = Deb0x(signer, deb0xAddress)\n\n            \n            const from = await signer.getAddress();\n            if(whitelist.includes(from)) {\n                const url = \"https://api.defender.openzeppelin.com/autotasks/b939da27-4a61-4464-8d7e-4b0c5dceb270/runs/webhook/f662ac31-8f56-4b4c-9526-35aea314af63/SPs6smVfv41kLtz4zivxr8\";\n                const forwarder = createInstance(library)\n                const data = deb0xContract.interface.encodeFunctionData(\"claimFees()\")\n                const to = deb0xContract.address\n\n                try {\n                    const request = await signMetaTxRequest(library, forwarder, { to, from, data });\n\n                    gaEventTracker(\"Success: Claim fees\");\n        \n                    await fetchClaimFeesResult(request, url)\n        \n                } catch (error: any) {\n                    setNotificationState({\n                        message: \"You rejected the transaction. Fees were not claimed.\",\n                        open: true,\n                        severity: \"info\"\n                    })\n\n                    gaEventTracker(\"Rejected: Claim fees\");\n                }\n            } else {\n                await sendClaimFeesTx(deb0xContract)\n            }\n        }\n\n        return (\n            <>\n            <Card variant=\"outlined\" className=\"card-container\">\n                <CardContent className=\"row\">\n                    <div className=\"col-12 col-md-6 mb-2\">\n                        <Typography variant=\"h4\" component=\"div\" className=\"rewards mb-3\">\n                            Fees\n                        </Typography>\n                        <Typography >\n                            Your unclaimed MATIC fees:\n                        </Typography>\n                        <Typography variant=\"h6\" className=\"data-height\">\n                            <strong>{feesUnclaimed}</strong>\n                        </Typography>\n                    </div>\n                    <div className='col-12 col-md-6 d-flex justify-content-end align-items-start'>\n                        <img src={fees} alt=\"trophyRewards\" className=\"p-3\"/>\n                    </div>\n                </CardContent>\n                <CardActions className='button-container px-3'>\n                    <LoadingButton \n                        className=\"collect-btn\"\n                        disabled={feesUnclaimed==\"0.0\"}\n                        loading={loading}\n                        variant=\"contained\"\n                        onClick={claimFees}>\n                            Collect\n                    </LoadingButton>\n                </CardActions>\n            </Card>\n            </>\n        )\n    }\n\n    function CyclePanel() {\n        const [currentReward, setCurrentReward] = useState(\"\")\n        useEffect(() => {\n            cycleReward()\n        }, [currentReward]);\n        async function cycleReward() {\n            const deb0xContract = await Deb0x(library, deb0xAddress);\n            const currentReward = await deb0xContract.currentCycleReward();\n            setCurrentReward(ethers.utils.formatEther(currentReward))\n        }\n        return (\n            <>\n            <Card variant=\"outlined\" className=\"card-container\">\n                <CardContent className=\"row\">\n                    <div className=\"col-12 col-md-12 mb-2\">\n                        <Typography variant=\"h4\" component=\"div\" className=\"rewards mb-3\">\n                            Daily stats\n                        </Typography>\n                        <Typography className=\"data-height\">\n                            Total amount of daily cycle DXN tokens: <strong>{currentReward}</strong>\n                        </Typography>\n                        <Typography className=\"data-height\">\n                            Total burn until now: <strong>{0}</strong>\n                        </Typography>\n                    </div>\n                </CardContent>\n            </Card>\n            </>\n        )\n    }\n\n    function RewardsPanel() {\n        \n        const [rewardsUnclaimed, setRewardsUnclaimed] = useState(\"\")\n        const [feeSharePercentage, setFeeSharePercentage] = useState(\"\")\n        const [loading, setLoading] = useState(false)\n\n        useEffect(() => {\n            rewardsAccrued()\n        }, [rewardsUnclaimed]);\n\n        useEffect(() => {\n            feeShare()\n        }, [feeSharePercentage]);\n\n        async function rewardsAccrued() {\n            const deb0xViewsContract = await Deb0xViews(library, deb0xViewsAddress);\n\n            const unclaimedRewards = await deb0xViewsContract.getUnclaimedRewards(account);\n         \n            setRewardsUnclaimed(ethers.utils.formatEther(unclaimedRewards))\n        }\n\n        async function feeShare() {\n            const deb0xViewsContract = await Deb0xViews(library, deb0xViewsAddress);\n\n            const deb0xContract = await Deb0x(library, deb0xAddress);\n\n            const unclaimedRewards = await deb0xViewsContract.getUnclaimedRewards(account);\n\n            const accWithdrawableStake = await deb0xViewsContract.getAccWithdrawableStake(account);\n            \n            let balance = parseFloat((ethers.utils.formatEther(unclaimedRewards.add(accWithdrawableStake))))\n            \n            const currentCycle = await deb0xContract.currentStartedCycle();\n\n            const totalSupply = await deb0xContract.summedCycleStakes(currentCycle);\n\n            const feeShare = balance * 100 / totalSupply\n            setFeeSharePercentage(((Math.round(feeShare * 100) / 100).toFixed(2)).toString() + \"%\")\n        }\n\n        async function fetchClaimRewardsResult(request: any, url: any) {\n            await fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(request),\n                headers: { 'Content-Type': 'application/json' },\n            })\n                .then((response) => response.json())\n                .then(async (data) => {\n                    try{\n                        const {tx: txReceipt} = JSON.parse(data.result)\n                        if(txReceipt.status == 1){\n                            setNotificationState({\n                                message: \"You succesfully claimed your rewards.\", open: true,\n                                severity: \"success\"\n                            })\n                        } else {\n                            setNotificationState({\n                                message: \"Rewards couldn't be claimed!\", open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    } catch(error) {\n                        if(data.status == \"pending\") {\n                            setNotificationState({\n                                message: \"Your transaction is pending. Your rewards should arrive shortly\",\n                                open: true,\n                                severity: \"info\"\n                            })\n                        } else if(data.status == \"error\") {\n                            setNotificationState({\n                                message: \"Transaction relayer error. Please try again\",\n                                open: true,\n                                severity: \"error\"\n                            })\n                        }\n                    }\n                    \n                })\n        }\n\n        async function sendClaimRewardsTx(deb0xContract: any) {\n            try {\n                const tx = await deb0xContract.claimRewards()\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"You succesfully claimed your rewards.\", open: true,\n                            severity: \"success\"\n                        })\n                        //setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: \"Rewards couldn't be claimed!\", open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n            } catch (error: any) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Your rewards haven't been claimed.\",\n                    open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function claimRewards() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = Deb0x(signer, deb0xAddress)\n\n            \n            const from = await signer.getAddress();\n            if(whitelist.includes(from)) {\n                const url = \"https://api.defender.openzeppelin.com/autotasks/b939da27-4a61-4464-8d7e-4b0c5dceb270/runs/webhook/f662ac31-8f56-4b4c-9526-35aea314af63/SPs6smVfv41kLtz4zivxr8\";\n                const forwarder = createInstance(library)\n                const data = deb0xContract.interface.encodeFunctionData(\"claimRewards()\")\n                const to = deb0xContract.address\n\n                try {\n                    const request = await signMetaTxRequest(library, forwarder, { to, from, data });\n\n                    gaEventTracker(\"Success: Claim rewards\");\n        \n                    await fetchClaimRewardsResult(request, url)\n        \n                } catch (error: any) {\n                    setNotificationState({\n                        message: \"You rejected the transaction. Rewards were not claimed.\",\n                        open: true,\n                        severity: \"info\"\n                    })\n\n                    gaEventTracker(\"Rejected: Claim rewards\");\n                }\n            } else {\n                await sendClaimRewardsTx(deb0xContract)\n            }\n        }\n\n        return (\n            <>\n            <Card variant=\"outlined\" className=\"card-container\">\n                <CardContent className=\"row\">\n                    <div className=\"col-12 col-md-6 mb-2\">\n                        <Typography variant=\"h4\" component=\"div\" className=\"rewards mb-3\">\n                            Rewards\n                        </Typography>\n                        <Typography >\n                            Your unclaimed DXN rewards:\n                        </Typography>\n                        <Typography variant=\"h6\" className=\"data-height\">\n                            <strong>{rewardsUnclaimed}</strong>\n                        </Typography>\n                    </div>\n                    <div className='col-12 col-md-6 d-flex justify-content-end align-items-start'>\n                        <img src={finance} alt=\"trophyRewards\" className=\"p-3\"/>\n                    </div>\n                </CardContent>\n                <CardActions className='button-container px-3'>\n                    <LoadingButton className=\"collect-btn\" loading={loading} variant=\"contained\" onClick={claimRewards}>Claim</LoadingButton>\n                </CardActions>\n            </Card>\n            </>\n        )\n    }\n\n    function floorPrecised(number:any) {\n        var power = Math.pow(10, 2);\n        return (Math.floor(parseFloat(number) * power) / power).toString();\n    }\n\n    function StakeUnstake() {\n        const [alignment, setAlignment] = useState(\"stake\");\n\n        const [userStakedAmount, setUserStakedAmount] = useState(\"\")\n        const [userUnstakedAmount, setUserUnstakedAmount] = useState(\"\")\n        const [tokensForUnstake, setTokenForUnstake] = useState(\"\");\n        const [totalStaked, setTotalStaked] = useState(\"\")\n        const [amountToUnstake, setAmountToUnstake] = useState(\"\")\n        const [amountToStake, setAmountToStake] = useState(\"\")\n        const [loading, setLoading] = useState(false)\n        const [approved, setApproved] = useState<Boolean | null>(false)\n        \n        const handleChange = (\n            event: React.MouseEvent<HTMLElement>,\n            newAlignment: string,\n        ) => {\n            setAlignment(newAlignment);\n            gaEventTracker(newAlignment + \" tab\");\n        };\n        \n        const [theme, setTheme] = useState(localStorage.getItem('globalTheme'));\n        useEffect(() => {\n            setTheme(localStorage.getItem('globalTheme'));\n        });\n\n        useEffect(() => {\n            setStakedAmount()\n        }, [userStakedAmount]);\n\n        useEffect(() => {\n            totalAmountStaked()\n        }, [totalStaked]);\n\n\n        useEffect(() => {\n            setTokensForUntakedAmount()\n        },[]);\n\n        useEffect(() => {\n            setUnstakedAmount()\n        }, [userUnstakedAmount]);\n\n        useEffect(() => {\n            setApproval()\n        }, [approved]);\n\n        async function setStakedAmount() {\n            const deb0xContract = await Deb0x(library, deb0xAddress)\n            const deb0xViewsContract = await Deb0xViews(library, deb0xViewsAddress)\n            const balance = await deb0xViewsContract.getAccWithdrawableStake(account)\n            let firstStakeCycle = await deb0xContract.accFirstStake(account)\n            let secondStakeCycle =  await deb0xContract.accSecondStake(account)\n            let firstStakeCycleAmount = await deb0xContract.accStakeCycle(account,firstStakeCycle);\n            let secondStakeCycleAmount = await deb0xContract.accStakeCycle(account,secondStakeCycle);\n            let withdawbleStake = await deb0xContract.accWithdrawableStake(account);\n            let totalStakedAmount = BigNumber.from(firstStakeCycleAmount).add(BigNumber.from(secondStakeCycleAmount)).add(BigNumber.from(withdawbleStake))\n            setUserStakedAmount(ethers.utils.formatEther(totalStakedAmount))\n        }\n\n        async function setTokensForUntakedAmount() {\n            const deb0xViewsContract = await Deb0xViews(library, deb0xViewsAddress)\n            const balance = await deb0xViewsContract.getAccWithdrawableStake(account)\n            setTokenForUnstake(ethers.utils.formatEther(balance.toString()));\n        }\n\n        async function setUnstakedAmount() {\n            const deb0xERC20Contract = await Deb0xERC20(library, deb0xERC20Address)\n            const balance = await deb0xERC20Contract.balanceOf(account)\n            let number = ethers.utils.formatEther(balance);\n            setUserUnstakedAmount(parseFloat(number.slice(0, (number.indexOf(\".\")) +3)).toString()) \n        }\n\n        async function setApproval() {\n            const deb0xERC20Contract = await Deb0xERC20(library, deb0xERC20Address)\n\n            const allowance = await deb0xERC20Contract.allowance(account, deb0xAddress)\n            allowance > 0 ? setApproved(true) : setApproved(false)\n        }\n\n        async function totalAmountStaked() {\n\n            const deb0xContract = await Deb0x(library, deb0xAddress)\n\n            const currentCycle = await deb0xContract.currentStartedCycle()\n\n            const totalSupply = await deb0xContract.summedCycleStakes(currentCycle)\n\n            setTotalStaked(ethers.utils.formatEther(totalSupply))\n        }\n\n        async function approveStaking() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n            const deb0xERC20Contract = await Deb0xERC20(signer, deb0xERC20Address)\n\n            try {\n                const tx = await deb0xERC20Contract.approve(deb0xAddress, ethers.utils.parseEther(\"5010000\"))\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"Your succesfully approved contract for staking.\", open: true,\n                            severity: \"success\"\n                        })\n                        setLoading(false)\n\n                        gaEventTracker(\"Success: Approve staking\");\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: \"Contract couldn't be approved for staking!\", open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                        gaEventTracker(\"Error: Approve staking\");\n                    })\n            } catch (error) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Contract hasn't been approved for staking.\", open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n                gaEventTracker(\"Rejected: Approve staking\");\n            }\n        }\n\n        async function fetchUnstakeResult(request: any, url: any) {\n            await fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(request),\n                headers: { 'Content-Type': 'application/json' },\n            })\n                .then((response) => response.json())\n                .then(async (data) => {\n                    try{\n                        const {tx: txReceipt} = JSON.parse(data.result)\n                        if(txReceipt.status == 1){\n                            setNotificationState({\n                                message: \"Your tokens were succesfully unstaked.\", open: true,\n                                severity: \"success\"\n                            })\n                            setLoading(false)\n                        } else {\n                            setNotificationState({\n                                message: \"Your tokens couldn't be unstaked!\", open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    } catch(error) {\n                        if(data.status == \"pending\") {\n                            setNotificationState({\n                                message: \"Your transaction is pending. Your DXN should be unstaked shortly\",\n                                open: true,\n                                severity: \"info\"\n                            })\n                        } else if(data.status == \"error\") {\n                            setNotificationState({\n                                message: \"Transaction relayer error. Please try again\",\n                                open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    }\n                    \n                })\n        }\n\n        async function sendUnstakeTx(deb0xContract: any) {\n            try {\n                const tx = await deb0xContract.unstake(ethers.utils.parseEther(amountToUnstake.toString()))\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"Your tokens were succesfully unstaked.\", open: true,\n                            severity: \"success\"\n                        })\n                        setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setLoading(false)\n                        setNotificationState({\n                            message: \"Your tokens couldn't be unstaked!\", open: true,\n                            severity: \"error\"\n                        })\n\n                    })\n            } catch(error) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Your tokens haven't been unstaked.\",\n                    open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function unstake() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = Deb0x(signer, deb0xAddress)\n            \n            const from = await signer.getAddress();\n            if(whitelist.includes(from)) {\n                const url = \"https://api.defender.openzeppelin.com/autotasks/b939da27-4a61-4464-8d7e-4b0c5dceb270/runs/webhook/f662ac31-8f56-4b4c-9526-35aea314af63/SPs6smVfv41kLtz4zivxr8\";\n                const forwarder = createInstance(library)\n                const data = deb0xContract.interface.encodeFunctionData(\"unstake\",\n                    [ethers.utils.parseEther(amountToUnstake.toString())])\n                const to = deb0xContract.address\n                try {\n                    const request = await signMetaTxRequest(library, forwarder, { to, from, data });\n\n                    gaEventTracker(\"Success: Unstake\");\n        \n                    await fetchUnstakeResult(request, url)\n        \n                } catch (error: any) {\n                    setNotificationState({\n                        message: \"You rejected the transaction. DXN were not unstaked.\",\n                        open: true,\n                        severity: \"info\"\n                    })\n                    setLoading(false)\n\n                    gaEventTracker(\"Rejected: Unstake\");\n                }\n            } else { \n                await sendUnstakeTx(deb0xContract)\n            }\n        }\n\n        async function fetchStakeResult(request: any, url: any) {\n            await fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(request),\n                headers: { 'Content-Type': 'application/json' },\n            })\n                .then((response) => response.json())\n                .then(async (data) => {\n                    try{\n                        const {tx: txReceipt} = JSON.parse(data.result)\n                        if(txReceipt.status == 1){\n                            setNotificationState({\n                                message: \"You succesfully staked your DXN.\", open: true,\n                                severity: \"success\"\n                            })\n                        } else {\n                            setNotificationState({\n                                message: \"DXN couldn't be claimed!\", open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    } catch(error) {\n                        if(data.status == \"pending\") {\n                            setNotificationState({\n                                message: \"Your transaction is pending. Your DXN should be staked shortly\",\n                                open: true,\n                                severity: \"info\"\n                            })\n                        } else if(data.status == \"error\") {\n                            setNotificationState({\n                                message: \"Transaction relayer error. Please try again\",\n                                open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    }\n                    \n                })\n        }\n\n        async function sendStakeTx(deb0xContract: any) {\n            try {\n                const tx = await deb0xContract.stake(ethers.utils.parseEther(amountToStake.toString()))\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"Your tokens were succesfully staked.\", open: true,\n                            severity: \"success\"\n                        })\n                        //setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: \"Your tokens couldn't be staked!\", open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n            } catch(error) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Your tokens haven't been staked.\",\n                    open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function stake() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = Deb0x(signer, deb0xAddress)\n            \n            const from = await signer.getAddress();\n            if(whitelist.includes(from)){\n                const url = \"https://api.defender.openzeppelin.com/autotasks/b939da27-4a61-4464-8d7e-4b0c5dceb270/runs/webhook/f662ac31-8f56-4b4c-9526-35aea314af63/SPs6smVfv41kLtz4zivxr8\";\n                const forwarder = createInstance(library)\n                const data = deb0xContract.interface.encodeFunctionData(\"stake\",\n                    [ethers.utils.parseEther(amountToStake.toString())])\n                const to = deb0xContract.address\n\n                try {\n                    const request = await signMetaTxRequest(library, forwarder, { to, from, data });\n\n                    gaEventTracker(\"Success: Stake\");\n        \n                    await fetchStakeResult(request, url)\n        \n                } catch (error: any) {\n                    setNotificationState({\n                        message: \"You rejected the transaction. DXN were not staked.\",\n                        open: true,\n                        severity: \"info\"\n                    })\n                    setLoading(false)\n                    gaEventTracker(\"Rejected: Stake\");\n                }\n            } else {\n                await sendStakeTx(deb0xContract)\n            }\n        }\n\n        return (\n            <Card variant = \"outlined\" className=\"card-container\">\n                <ToggleButtonGroup\n                    color=\"primary\"\n                    value={alignment}\n                    exclusive\n                    onChange={handleChange}\n                    className=\"tab-container\"\n                >\n                    <ToggleButton className=\"tab-btn\" value=\"stake\">Stake</ToggleButton>\n                    <ToggleButton className=\"tab-btn\" value=\"unstake\" >Unstake</ToggleButton>\n\n                </ToggleButtonGroup>\n              \n            {\n                alignment === \"stake\" ?\n                \n                <>\n                <CardContent className=\"row\">\n                    <div className=\"col-6 px-3\">\n                        <img className=\"display-element\" src={theme === \"classic\" ? coinBagDark : coinBagLight} alt=\"coinbag\" />\n                        <Typography className=\"p-0\">\n                            Your staked amount:\n                        </Typography>\n                        <Typography variant=\"h6\" className=\"p-0 data-height\">\n                            <strong>{userStakedAmount} DXN</strong>\n                        </Typography>\n                    </div>\n                    <div className=\"col-6 px-3\">\n                        <img className=\"display-element\" src={theme === \"classic\" ? walletDark : walletLight} alt=\"coinbag\" />\n                        <Typography className=\"p-0\">\n                            Your tokens in wallet:\n                        </Typography>\n                        <Typography variant=\"h6\" className=\"p-0\" data-height>\n                            <strong>{userUnstakedAmount} DXN</strong>\n                        </Typography>\n                    </div>\n                    {approved && <Grid className=\"amount-row px-3\" container>\n                        <Grid item>\n                            <OutlinedInput id=\"outlined-basic\"\n                                placeholder=\"Amount to stake\"\n                                type=\"number\"\n                                value={amountToStake}\n                                inputProps={{ min: 0 }}\n                                onChange={e => setAmountToStake(e.target.value)} />\n                        </Grid>\n                        <Grid className=\"max-btn-container\" item>\n                            <Button className=\"max-btn\" \n                                size=\"small\" variant=\"contained\" color=\"error\" \n                               onClick = {()=>setAmountToStake(userUnstakedAmount)  }>\n                                max\n                            </Button>\n                        </Grid>\n                    </Grid>}\n                </CardContent>\n                <CardActions className='button-container px-3'>\n                    {approved && <LoadingButton disabled={!amountToStake} className=\"collect-btn\" loading={loading} variant=\"contained\" onClick={stake}>Stake</LoadingButton>}\n                    {!approved &&\n                        <>\n                            <LoadingButton \n                                className=\"collect-btn\" \n                                loading={loading}\n                                variant=\"contained\"\n                                disabled={ userUnstakedAmount === '0.00' ||  userUnstakedAmount === '0'}\n                                onClick={approveStaking}>\n                                    Initialize Staking\n                            </LoadingButton>\n                            <span className=\"text\">\n                                Make sure you have DXN tokens in your wallet before you can stake them.\n                            </span>\n                        </> \n                    }\n                </CardActions>\n                </>\n                : \n\n                <>\n                <CardContent className=\"row\">\n                    <div className=\"col-6 px-3\">\n                        <img className=\"display-element\" src={theme === \"classic\" ? coinBagDark : coinBagLight} alt=\"coinbag\" />\n                        <Typography className=\"p-0\">\n                            Available to unstake:\n                        </Typography>\n                        <Typography variant=\"h6\" className=\"p-0\">\n                            <strong>{tokensForUnstake} DXN</strong>\n                        </Typography>\n                    </div>\n                    <div className=\"col-6 px-3\">\n                        <img className=\"display-element\" src={theme === \"classic\" ? walletDark : walletLight} alt=\"coinbag\" />\n                        <Typography className=\"p-0\">\n                            Your actual stake:\n                        </Typography>\n                        <Typography variant=\"h6\" className=\"p-0 data-height\">\n                            <strong>{userStakedAmount} DXN</strong>\n                        </Typography>\n                    </div>\n                  \n\n                    <Grid className=\"amount-row px-3\" container>\n                        <Grid item>\n                            <OutlinedInput value={amountToUnstake}\n                                id=\"outlined-basic\"\n                                className=\"max-field\"\n                                placeholder=\"Amount to unstake\"\n                                onChange={e => setAmountToUnstake(e.target.value)}\n                                inputProps={{ min: 0 }}\n                                type=\"number\" />\n                        </Grid>\n                        <Grid className=\"max-btn-container\" item>\n                            <Button className=\"max-btn\"\n                                size=\"small\" variant=\"contained\" color=\"error\" \n                                onClick = {()=>setAmountToUnstake(tokensForUnstake)  }>\n                                max\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </CardContent>\n                <CardActions className='button-container px-3'>\n                    <LoadingButton className=\"collect-btn\" disabled={!amountToUnstake} loading={loading} variant=\"contained\" onClick={unstake}>Unstake</LoadingButton>\n                </CardActions>\n                </>\n            }\n\n            </Card>\n\n        )\n    }\n\n    function TotalStaked() {\n        const [totalStaked, setTotalStaked] = useState(\"\")\n        useEffect(() => {\n            totalAmountStaked()\n        }, [totalStaked]);\n    \n        async function totalAmountStaked() {\n    \n            const deb0xContract = await Deb0x(library, deb0xAddress)\n\n            const currentCycle= await deb0xContract.currentStartedCycle()\n\n            const currentStake = await deb0xContract.summedCycleStakes(currentCycle)\n\n            const pendingStakeWithdrawal = await deb0xContract.pendingStakeWithdrawal()\n    \n            // setTotalStaked(ethers.utils.formatEther(currentStake))\n\n            setTotalStaked(floorPrecised(ethers.utils.formatEther(currentStake.sub(pendingStakeWithdrawal))))\n\n        }\n\n        return (\n            <Card className=\"heading-card\">\n                <CardContent>\n                    <Typography variant=\"h5\">\n                        Total tokens staked:\n                    </Typography>\n                    <Typography variant=\"h4\">\n                        <img className=\"logo\" src={token} />\n                        {totalStaked} DXN\n                    </Typography>\n                </CardContent>\n            </Card>\n        )\n    }\n\n    return (\n        <>\n            <SnackbarNotification state={notificationState} setNotificationState={setNotificationState} />\n            <Box className=\"content-box stake-content\">\n                <div className=\"cards-grid\">\n                    <div className='row'>\n                        <Grid item className=\"col col-md-6 \">\n                            <FeesPanel />\n                        </Grid>\n                        <Grid item className=\"col col-md-6\">\n                            <CyclePanel />\n                        </Grid>\n                    </div>\n                    <div className='row'>\n                        <Grid item className=\"col col-md-6 \">\n                            <RewardsPanel />\n                        </Grid>\n                        <Grid item className=\"col col-md-6\">\n                            <StakeUnstake/>\n                        </Grid>\n                    </div>\n                </div>\n            </Box>\n        </>\n    )\n}","import ReactGA from \"react-ga\";\n\nexport default function useAnalyticsEventTracker(category: string) {\n    const eventTracker = (action: string) => {\n      ReactGA.event({category, action});\n    }\n    return eventTracker;\n}","import { createContext } from \"react\";\n\nexport const initialThemeState = {\n  theme: \"dark\",\n  setTheme: (_value: string) => {}\n};\n\nconst ThemeContext = createContext(initialThemeState);\nexport default ThemeContext;","import { useState, useEffect } from \"react\";\nimport ThemeContext, { initialThemeState } from \"./ThemeContext\";\n\ntype Props = {\n    children: JSX.Element|JSX.Element[],\n};\n\nconst ThemeProvider = ( { children }: Props ) => {\n  const [theme, setTheme] = useState<any>(initialThemeState.theme);\n\n  const localStorage = window.localStorage;\n\n  useEffect(() => {\n    const savedThemeLocal = localStorage.getItem(\"globalTheme\");\n\n    if (!!savedThemeLocal) {\n      setTheme(savedThemeLocal);\n    }\n  }, [localStorage]);\n\n  useEffect(() => {\n    localStorage.setItem(\"globalTheme\", theme);\n  }, [theme, localStorage]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      <div className={`theme theme--${theme}`}>{children}</div>\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider;\n","export default __webpack_public_path__ + \"static/media/elephant.605d60c2.svg\";","export default __webpack_public_path__ + \"static/media/white_dbxen.8b09777a.svg\";","export default __webpack_public_path__ + \"static/media/empty.efc45323.png\";","export default function formatAccountName(account: string)\n{   \n    return `${account.substring(0, 5)}...${account.substring(account.length - 4)}`\n}","import { useEffect, useState } from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport { injected } from '../../connectors';\nimport { useWeb3React } from '@web3-react/core';\nimport ThemeSetter from '../ThemeSetter';\nimport { Spinner } from './Spinner';\nimport { ethers } from 'ethers';\nimport { useEagerConnect } from '../../hooks';\nimport formatAccountName from '../Common/AccountName';\nimport Deb0x from \"../../ethereum/deb0x\"\nimport Deb0xViews from \"../../ethereum/deb0xViews\";\nimport Deb0xERC20 from \"../../ethereum/deb0xerc20\";\nimport Popper from '@mui/material/Popper';\nimport ClickAwayListener from '@mui/base/ClickAwayListener';\nimport '../../componentsStyling/appBar.scss';\nimport copyIcon from '../../photos/icons/copy-1.svg';\nimport walletIcon from '../../photos/icons/wallet.svg';\nimport disconnectIcon from '../../photos/icons/diconnect.svg';\nimport { disconnect } from 'process';\n\n\nconst deb0xAddress = \"0xD6F478aa29c8c5Dc233D846D85F064DE30170aD4\";\nconst deb0xViewsAddress = \"0x65DC3F867535fc92669922Ea49aa9420A332e93f\";\nconst deb0xERC20Address = \"0x62E6B821353eAe41859B52bDc885f9cfA70B2c80\"\nconst tokenSymbol = 'DBXen';\n\nconst tokenDecimals = 18;\nenum ConnectorNames { Injected = 'Injected' };\n\nconst connectorsByName: { [connectorName in ConnectorNames]: any } = {\n    [ConnectorNames.Injected]: injected\n}\n\nexport function AppBarComponent(props: any): any {\n    const context = useWeb3React();\n    const { connector, library, chainId, account, activate, deactivate, active, error } = context\n    const [activatingConnector, setActivatingConnector] = useState<any>();\n    const [networkName, setNetworkName] = useState<any>();\n    const [userUnstakedAmount,setUserUnstakedAmount] = useState<any>(0);\n    const triedEager = useEagerConnect();\n    const [ensName, setEnsName] = useState<any>(\"\");\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const [notificationState, setNotificationState] = useState({})\n    const [theme, setTheme] = useState(localStorage.getItem('globalTheme'));\n    const [userStakedAmount, setUserStakedAmount] = useState(\"\")\n    const [rewardsUnclaimed, setRewardsUnclaimed] = useState(\"\")\n    const [open, setOpen] = useState<any>();\n\n    const id = open ? 'simple-popper' : undefined;\n\n    if(library){\n        checkENS();\n        setUnstakedAmount();\n    }\n\n    useEffect(() => {\n        setTheme(localStorage.getItem('globalTheme'));\n    });\n\n    useEffect(() => {\n        injected.supportedChainIds?.forEach(chainId => \n            setNetworkName((ethers.providers.getNetwork(chainId).name)));\n        if (activatingConnector && activatingConnector === connector) {\n            setActivatingConnector(undefined)\n        }\n    }, [activatingConnector, connector]);\n\n    async function setUnstakedAmount() {\n        const deb0xERC20Contract = Deb0xERC20(library, deb0xERC20Address)\n        if(account){\n            const balance = await deb0xERC20Contract.balanceOf(account)\n            setUserUnstakedAmount(floorPrecised(ethers.utils.formatEther(balance)))\n        }\n    }\n\n    useEffect(() => {\n        const deb0xERC20Contract = Deb0xERC20(library, deb0xERC20Address)\n        const filterFrom = deb0xERC20Contract.filters.Transfer(account)\n        const filterTo =  deb0xERC20Contract.filters.Transfer(null, account)\n        deb0xERC20Contract.on(filterFrom, () => {\n            setUnstakedAmount()\n        })\n        deb0xERC20Contract.on(filterTo, () => {\n            setUnstakedAmount()\n        })\n\n        return () => {\n            deb0xERC20Contract.removeAllListeners()\n        }\n    },[])\n\n    useEffect(() => {\n        setUnstakedAmount();\n    },[userUnstakedAmount])\n\n    async function checkENS(){\n        if(chainId !=137){\n            var name = await library.lookupAddress(account);\n            if(name !== null)\n            {   \n                setEnsName(name);\n            }\n        }\n       \n    }\n    function TotalStaked() {\n        const [totalStaked, setTotalStaked] = useState(\"\")\n        useEffect(() => {\n            totalAmountStaked()\n        }, [totalStaked]);\n        async function totalAmountStaked() {\n            const deb0xContract = await Deb0x(library, deb0xAddress)\n            const currentCycle= await deb0xContract.currentStartedCycle()\n            const currentStake = await deb0xContract.summedCycleStakes(currentCycle)\n            const pendingStakeWithdrawal = await deb0xContract.pendingStakeWithdrawal()\n            // setTotalStaked(ethers.utils.formatEther(currentStake))\n            setTotalStaked(floorPrecised(ethers.utils.formatEther(currentStake.sub(pendingStakeWithdrawal))))\n        }\n        return (\n            <p className=\"mb-0\">Total tokens staked: {totalStaked} DXN</p>\n        )\n    }\n\n    function floorPrecised(number:any) {\n        var power = Math.pow(10, 2);\n        return (Math.floor(parseFloat(number) * power) / power).toString();\n    }\n\n    async function addToken() {\n        try {\n            const wasAdded = await window.ethereum.request({\n              method: 'wallet_watchAsset',\n              params: {\n                type: 'ERC20',\n                options: {\n                  address: deb0xERC20Address,\n                  symbol: tokenSymbol,\n                  decimals: tokenDecimals,\n                //   image: tokenImage,\n                },\n              },\n            });\n\n            if (wasAdded) {\n                setNotificationState({\n                    message: \"The token was added in your wallet\",\n                    open: true,\n                    severity: \"success\"\n                })      \n                setOpen(false)      \n            }\n            } catch (error: any) {\n                setNotificationState({\n                    message: \"There was an error. Try again later\",\n                    open: true,\n                    severity: \"info\"\n                })\n            }\n    }\n\n    function copyWalletID() {\n        if(account) {\n            navigator.clipboard.writeText(account)\n            setNotificationState({\n                message: \"The address ID was copied successfully\",\n                open: true,\n                severity: \"success\"\n            })\n        }\n        setOpen(false)\n        \n    }\n\n    async function rewardsAccrued() {\n        const deb0xViewsContract = await Deb0xViews(library, deb0xViewsAddress);\n        const unclaimedRewards = await deb0xViewsContract.getUnclaimedRewards(account);\n        setRewardsUnclaimed(floorPrecised(ethers.utils.formatEther(unclaimedRewards)))\n    }\n\n    async function setStakedAmount() {\n        const deb0xViewsContract = await Deb0xViews(library, deb0xViewsAddress)\n        const balance = await deb0xViewsContract.getAccWithdrawableStake(account)\n        setUserStakedAmount(floorPrecised(ethers.utils.formatEther(balance)))\n    }\n\n    useEffect(() => {\n        rewardsAccrued()\n    }, [rewardsUnclaimed]);\n\n    useEffect(() => {\n        setStakedAmount()\n    }, [userStakedAmount]);\n\n\n    const handleClick = (event: any) => {\n        const { currentTarget } = event;\n        setAnchorEl(currentTarget)\n        setOpen(!open)\n      };\n\n     const handleClickAway = () => {\n        setOpen(false)\n      };\n\n\n    function handleChange(text: any, index: any) {\n        // setSelectedIndex(index)\n        // props.onChange(text)\n        if(index !== 0)\n            localStorage.removeItem('input')\n    }\n    \n    return (\n        <ClickAwayListener onClickAway={handleClickAway}>\n            <div>\n                <div className=\"app-bar--top\">\n                    <Box className=\"main-menu--left\">\n                        <TotalStaked/>\n                    </Box>\n                    <Box className=\"main-menu--right\">\n                    \n                    { (() =>  {\n                        const currentConnector = connectorsByName[ConnectorNames.Injected]\n                        const activating = currentConnector === activatingConnector\n                        const connected = currentConnector === connector\n                        const disabled = !triedEager || !!activatingConnector || connected || !!error\n\n                        return (\n                                <Button variant=\"contained\"\n                                    key={ConnectorNames.Injected}\n                                    aria-describedby={id}\n                                    onClick={!connected ? \n                                        () => {\n                                            setActivatingConnector(currentConnector)\n                                            activate(currentConnector)\n                                        } : \n                                        handleClick\n                                    }>\n                                    \n                                    { activating ? \n                                        <Spinner color={'black'} /> :\n                                        !connected ? \n                                            \"Connect Wallet\" :\n                                            <span>\n                                                {account === undefined ? \n                                                    `Unsupported Network. Switch to ${networkName}` : \n                                                    account ? \n                                                        ensName === \"\" ? \n                                                            `${formatAccountName(account)}` :\n                                                            `${ensName.toLowerCase()} \n                                                            (${formatAccountName(account)})`\n                                                    : ''}\n                                            </span>\n                                    }\n                                </Button>\n                        )\n                    }) ()}\n                    </Box>\n                </div>\n                <Popper className={`popper ${theme === \"classic\" ? \"classic\" : \"dark\"}` } id={id} open={open} anchorEl={anchorEl}>\n                    <ul>\n                        <li>\n                            Unclaimed rewards: <br/> \n                            <b>{rewardsUnclaimed} <span>DXN</span></b>\n                        </li>\n                        <li>\n                            Active stake: <br/> \n                            <b>{userStakedAmount} <span>DXN</span></b>\n                        </li>\n                        <li>\n                            In wallet: <br/> \n                            <b>{userUnstakedAmount} <span>DXN</span></b>\n                        </li>\n                    </ul>\n                    <Button \n                        onClick={(event: any) => {\n                            copyWalletID()\n                        }}\n                        className=\"copy-wallet-btn\">\n                        <span><img src={copyIcon} /></span>Copy wallet ID\n                    </Button>\n                    <Button\n                        onClick={(event: any) => {\n                            addToken()\n                        }}\n                        className=\"add-token-btn\">\n                         <span><img src={walletIcon}/></span>Add token to wallet\n                    </Button>\n                    <Button \n                        onClick={(event: any) => {\n                            handleClick(event)\n                            deactivate()\n                        }}\n                            className=\"logout-btn\">\n                             <span><img src={disconnectIcon}/></span>Disconnect wallet\n                    </Button>  \n\n                </Popper>\n            </div>\n        </ClickAwayListener>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/copy-1.6be37e8f.svg\";","export default __webpack_public_path__ + \"static/media/wallet.0d69376a.svg\";","export default __webpack_public_path__ + \"static/media/diconnect.a287fc1c.svg\";","import { useState, useEffect } from 'react';\nimport './App.css';\nimport { \n    Web3ReactProvider,\n    useWeb3React,\n    UnsupportedChainIdError\n} from '@web3-react/core';\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected\n} from '@web3-react/injected-connector'\nimport { ethers } from \"ethers\";\nimport { useEagerConnect, useInactiveListener } from './hooks'\nimport { PermanentDrawer } from './components/App/PermanentDrawer'\nimport { Stake } from './components/App/Stake';\nimport { Box, Button } from '@mui/material';\nimport ThemeProvider from './components/Contexts/ThemeProvider';\nimport './index.scss';\nimport { injected, network } from './connectors';\nimport elephant from './photos/icons/elephant.svg';\nimport deb0xen from './photos/white_dbxen.svg';\nimport maintenanceImg from './photos/empty.png';\nimport { Spinner } from './components/App/Spinner';\nimport { AppBarComponent } from './components/App/AppBar';\n\nconst maintenance = process.env.REACT_APP_MAINTENANCE_MODE;\n\n\nenum ConnectorNames { Injected = 'Injected', Network = 'Network' };\n\nconst connectorsByName: { [connectorName in ConnectorNames]: any } = {\n  [ConnectorNames.Injected]: injected,\n  [ConnectorNames.Network]: network\n}\n\nfunction getErrorMessage(error: Error) {\n    let networkName;\n\n    injected.supportedChainIds?.forEach(chainId => networkName = (ethers.providers.getNetwork(chainId)).name)\n    if (error instanceof NoEthereumProviderError) {\n        return 'No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.'\n    } else if (error instanceof UnsupportedChainIdError) {\n        return `You're connected to an unsupported network. Switch to ${networkName}`\n    } else if (\n        error instanceof UserRejectedRequestErrorInjected\n    ) {\n        return 'Please authorize this website to access your Ethereum account.'\n    } else {\n        console.error(error)\n        return 'An unknown error occurred. Check the console for more details.'\n    }\n}\n\nfunction getLibrary(provider: any): ethers.providers.Web3Provider {\n  const library = new ethers.providers.Web3Provider(provider)\n\n  library.pollingInterval = 12000\n  return library\n}\n\nexport default function () {\n  return (\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <App />\n    </Web3ReactProvider>\n  )\n}\n\nfunction App() {\n    const context = useWeb3React<ethers.providers.Web3Provider>()\n    const { connector, library, chainId, account, active, error, activate } = context\n\n    // handle logic to recognize the connector currently being activated\n    const [activatingConnector, setActivatingConnector] = useState<any>()\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const [networkName, setNetworkName] = useState<any>();\n    let errorMsg;\n\n    useEffect(() => {\n        injected.supportedChainIds?.forEach(chainId => \n            setNetworkName((ethers.providers.getNetwork(chainId).name)));\n        if (activatingConnector && activatingConnector === connector) {\n            setActivatingConnector(undefined)\n        }\n    }, [activatingConnector, connector])\n\n    // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n    const triedEager = useEagerConnect()\n\n    // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n    useInactiveListener(!triedEager || !!activatingConnector)\n\n    function handleClick (event: React.MouseEvent<HTMLElement>) {\n        setAnchorEl(anchorEl ? null : event.currentTarget);\n    };\n\n    useEffect(() => {   \n        window.ethereum ?\n            window.ethereum.request({method: \"eth_requestAccounts\"}).then(() => {\n                switchNetwork();               \n            }).catch((err: any) => displayErrorMsg(err))\n            : displayErrorMsg(\"Please install MetaMask\")\n        }, [])\n\n    async function switchNetwork() {\n        try {\n            await window.ethereum.request({\n            method: 'wallet_switchEthereumChain',\n            params: [{ chainId: \"0x89\"}],\n            }).then(\n                displayErrorMsg(\"You have switched to the right network\")\n            );            \n        } catch (switchError) {\n            try {\n                await window.ethereum.request({\n                method: 'wallet_addEthereumChain',\n                params: [\n                    {\n                        chainId: '0x89', \n                        chainName:'Polygon Network',\n                        rpcUrls:['https://rpc-mainnet.maticvigil.com'],                   \n                        blockExplorerUrls:['https://polygonscan.com/'],  \n                        nativeCurrency: { \n                        symbol:'Matic',   \n                        decimals: 18\n                        }       \n                    }\n                    ]});\n            } catch (err) {\n                displayErrorMsg(\"Cannot switch to the network\");\n            }\n        }\n        \n    }\n\n    function displayErrorMsg(error: string) {\n        errorMsg = error;\n        return errorMsg;\n    }\n    \n    return (\n\n    <>\n    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        {!!errorMsg &&\n            <p className='alert alert-danger position-fixed' style={{ marginTop: '4rem', marginBottom: '0' }}>\n                {displayErrorMsg(errorMsg)}\n            </p>\n        }\n    </div>\n        <ThemeProvider>\n        { account ? \n            <div className=\"app-container container-fluid\">\n                { maintenance == \"true\" ?\n                    <div className=\"row main-row maintenance-mode\">\n                        <img className=\"maintenance-img\" src={maintenanceImg} />\n                        <h1>Maintenance Mode</h1>\n                        <h4>We're tightening some nuts and bolts round the back. We'll be back up and running soon.</h4>\n                    </div> :\n                    <div className=\"row main-row\">\n                        <div className=\"col col-md-3 col-sm-12 p-0 side-menu-container\">\n                            <PermanentDrawer />\n                        </div>\n                        <div className=\"col col-md-9 col-sm-12\">\n                            <AppBarComponent />\n                            <Box className=\"main-container\" sx={{marginTop: 12}}>\n                                <Stake />\n                            </Box>\n                        </div>\n                    </div>\n                }\n            </div> :\n            <div className=\"app-container p-0 \">\n                <div className=\"initial-page\">\n                    <div className=\"row\">\n                        <div className=\"col-md-7 img-container mr-4\">\n                            <img className=\"image--left\" src={elephant} />\n                            <div className=\"img-content\">\n                                <p>Connect your wallet</p>\n                                <p>Burn $XEN</p>\n                                <p>Earn crypto</p>\n                                  \n                                <div>\n                                    { (() =>  {\n                                        const currentConnector = connectorsByName[ConnectorNames.Injected]\n                                        const activating = currentConnector === activatingConnector\n                                        const connected = currentConnector === connector\n                                        const disabled = !triedEager || !!activatingConnector || connected || !!error\n\n                                        return (\n                                            <Button variant=\"contained\"\n                                                key={ConnectorNames.Injected}\n                                                // aria-describedby={id}\n                                                onClick={!connected ? \n                                                    () => {\n                                                        setActivatingConnector(currentConnector)\n                                                        activate(currentConnector)\n                                                    } : \n                                                    handleClick}\n                                                    className=\"connect-button\">\n                                                \n                                                { activating ? \n                                                    <Spinner color={'black'} /> :\n                                                    !connected ? \n                                                        \"Connect\" :\n                                                        <span>\n                                                            {typeof window.ethereum === 'undefined' ? \n                                                                `Check your prerequisites` : \n                                                                account === undefined ? `Unsupported Network. Switch to ${networkName}` : ''}\n                                                        </span>\n                                                }\n                                            </Button>\n                                        )\n                                    }) ()}\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"col-md-5 text-center\">\n                            <div className=\"text-container\">\n                                <img className=\"dark-logo\" src={deb0xen} />\n                                <p>\n                                    Community built crypto protocol <br/> contributing to XEN deflation\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"mobile-message\">\n                    <img className=\"dark-logo\" src={deb0xen} />\n                    <p>In order to use the app please log in from Desktop</p>\n                    <img className=\"elephant-img\" src={elephant} />\n                </div>\n            </div>\n        }\n        </ThemeProvider>\n    </>\n  )\n}\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}