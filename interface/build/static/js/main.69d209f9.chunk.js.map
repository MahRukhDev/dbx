{"version":3,"sources":["connectors.ts","components/Common/ScreenSize.tsx","components/App/Snackbar.tsx","photos/icons/file-icon.svg","ethereum/XENCrypto.js","ethereum/dbxen.js","components/App/Spinner.tsx","components/App/Burn.tsx","components/Common/AccountName.tsx","components/App/PermanentDrawer.tsx","ethereum/dbxenViews.js","ethereum/dbxenerc20.js","photos/icons/coin-bag-solid--light.svg","photos/icons/token.svg","photos/icons/coin-bag-solid--dark.svg","photos/icons/wallet--light.svg","photos/icons/wallet--dark.svg","photos/icons/fees.svg","photos/icons/finance.svg","ethereum/signer.js","ethereum/forwarder.js","components/App/Stake.tsx","components/Common/GaEventTracker.tsx","components/Contexts/ThemeContext.tsx","components/App/AppBar.tsx","components/Contexts/ThemeProvider.tsx","photos/icons/elephant.svg","photos/white_dbxen.svg","photos/icons/elephant.png","photos/empty.png","photos/icons/copy-1.svg","photos/icons/wallet.svg","photos/icons/diconnect.svg","App.tsx","hooks.ts","reportWebVitals.ts","index.tsx"],"names":["injected","InjectedConnector","supportedChainIds","network","NetworkConnector","urls","defaultChainId","useWindowSize","useState","width","height","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","Alert","forwardRef","props","ref","elevation","variant","SnackbarNotification","severity","state","open","message","setState","handleClose","event","reason","Snackbar","autoHideDuration","onClose","sx","abi","require","signerOrProvider","address","ethers","Contract","Spinner","color","rest","viewBox","xmlns","stroke","fill","fillRule","transform","strokeWidth","strokeOpacity","cx","cy","r","d","attributeName","type","from","to","dur","repeatCount","BigNumber","deb0xAddress","xenCryptoAddress","Burn","context","useWeb3React","library","account","notificationState","setNotificationState","value","setValue","approveBrun","setApproveBurn","balanceGratherThanZero","checkBalance","maticValue","setMaticValue","totalCost","setTotalCost","totalAmountOfXEN","setXENAmount","loading","setLoading","getSigner","signer","XENCrypto","xenContract","balanceOf","then","balance","number","utils","formatEther","toString","getCurrentPrice","options","method","url","port","headers","data","JSON","stringify","axios","request","requestValue","web3","fromWei","result","estimationValue","gasLimitIntervalValue","Number","price","totalValue","fee","obj","toFixed","total","getCurrentGasLimit","deb0xContract","DBXen","getCurrentCycle","currentCycle","batchBurned","cycleTotalBatchesBurned","numberBatchesBurnedInCurrentCycle","toNumber","totalAmountToBurn","approve","parseEther","wait","catch","error","currentValue","overrides","parseUnits","gasLimit","tx","console","log","resut","setBalance","setTimeout","className","max","onChange","e","target","onClick","toLocaleString","minimumFractionDigits","maximumFractionDigits","LoadingButton","loadingPosition","burnXEN","disabled","setApproval","formatAccountName","substring","length","PermanentDrawer","connector","activatingConnector","setActivatingConnector","dimensions","ScreenSize","setNetworkName","forEach","chainId","providers","getNetwork","name","undefined","Box","display","Drawer","anchor","href","icon","faTwitter","size","src","document","faGithub","faTelegram","ethSigUtil","ethereumJsUtil","typeName","typeHash","id","EIP712Domain","ForwardRequest","getMetaTxTypeData","verifyingContract","types","domain","version","primaryType","signTypedData","argData","send","buildRequest","forwarder","input","valueParam","getNonce","nonce","gas","validUntilTime","buildTypedData","provider","n","typeData","getDomainSeparator","bufferToHex","TypedDataUtils","hashStruct","signMetaTxRequest","toSign","signature","domainSeparator","createInstance","whitelist","dataFromWhitelist","deb0xViewsAddress","deb0xERC20Address","Stake","category","gaEventTracker","action","ReactGA","setPreviousCycleXENBurned","date","Date","UTC","now","endDate","getTime","renderer","hours","minutes","seconds","completed","zeroPad","FeesPanel","feesUnclaimed","setFeesUnclaimed","getTotalXenBurnedInPreviusCycle","DBXenViews","deb0xViewsContract","getUnclaimedFees","unclaimedRewards","fetchClaimFeesResult","fetch","body","response","json","parse","status","sendClaimFeesTx","claimFees","getAddress","includes","interface","encodeFunctionData","feesAccrued","totalXenBurnedPreviousCycle","Card","CardContent","Typography","component","fees","alt","CardActions","CyclePanel","currentReward","setCurrentReward","currentCycleReward","cycleReward","RewardsPanel","rewardsUnclaimed","setRewardsUnclaimed","feeSharePercentage","setFeeSharePercentage","getUnclaimedRewards","getAccWithdrawableStake","accWithdrawableStake","parseFloat","add","currentStartedCycle","summedCycleStakes","totalSupply","feeShare","Math","round","fetchClaimRewardsResult","sendClaimRewardsTx","claimRewards","rewardsAccrued","finance","StakeUnstake","alignment","setAlignment","userStakedAmount","setUserStakedAmount","userUnstakedAmount","setUserUnstakedAmount","tokensForUnstake","setTokenForUnstake","totalStaked","setTotalStaked","amountToUnstake","setAmountToUnstake","amountToStake","setAmountToStake","approved","setApproved","localStorage","getItem","theme","setTheme","accFirstStake","firstStakeCycle","accSecondStake","secondStakeCycle","accStakeCycle","firstStakeCycleAmount","secondStakeCycleAmount","withdawbleStake","totalStakedAmount","DBXenERC20","deb0xERC20Contract","slice","indexOf","allowance","fetchUnstakeResult","sendUnstakeTx","unstake","fetchStakeResult","sendStakeTx","stake","setStakedAmount","totalAmountStaked","setTokensForUntakedAmount","setUnstakedAmount","ToggleButtonGroup","exclusive","newAlignment","ToggleButton","coinBagDark","coinBagLight","walletDark","walletLight","Grid","container","item","OutlinedInput","placeholder","inputProps","min","Button","ConnectorNames","initialThemeState","_value","ThemeContext","createContext","ThemeProvider","children","savedThemeLocal","setItem","Provider","tokenSymbol","tokenDecimals","connectorsByName","Injected","AppBarComponent","activate","deactivate","networkName","ensName","setEnsName","anchorEl","setAnchorEl","setOpen","totalXENBurned","setTotalXENBurned","checkENS","xenBurned","getTotalXenBurned","totalNumberOfBatchesBurned","floorPrecised","lookupAddress","power","pow","floor","currentStake","pendingStakeWithdrawal","sub","ethereum","params","symbol","decimals","filterFrom","filters","Transfer","filterTo","on","removeAllListeners","handleClick","currentTarget","ClickAwayListener","onClickAway","logo","currentConnector","activating","connected","toLowerCase","Popper","navigator","clipboard","writeText","copyIcon","addToken","walletIcon","disconnectIcon","maintenance","process","REACT_APP_MAINTENANCE_MODE","Network","getLibrary","Web3Provider","pollingInterval","web3App","App","errorMsg","selectedIndex","setSelectedIndex","triedEager","active","tried","setTried","isAuthorized","useEagerConnect","displayErrorMsg","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","suppress","handleConnect","handleChainChanged","handleAccountsChanged","accounts","handleNetworkChanged","networkId","removeListener","useInactiveListener","switchNetwork","err","style","flexDirection","alignItems","marginTop","marginBottom","maintenanceImg","elephant","deb0xen","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.69d209f9.chunk.js","sourcesContent":["\nimport { InjectedConnector } from '@web3-react/injected-connector'\nimport { NetworkConnector } from '@web3-react/network-connector'\n\n// const POLLING_INTERVAL = 12000\nconst RPC_URLS: { [chainId: number]: string } = {\n    137: 'https://polygon-mainnet.g.alchemy.com/v2/qthz4_6kfuPquCG5N1A6v5Waz9YW0pNZ'\n}\n\nexport const injected = new InjectedConnector({ supportedChainIds: [137] })\n\nexport const network = new NetworkConnector({\n    urls: { 137: RPC_URLS[137] },\n    defaultChainId: 137\n  })","import React, { useState, useEffect } from 'react'\n\nexport default function useWindowSize() {\n    // Initialize state with undefined width/height so server and client renders match\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n    const [windowSize, setWindowSize] = useState({\n      width: 0,\n      height: 0,\n    });\n    useEffect(() => {\n      // Handler to call on window resize\n      function handleResize() {\n        // Set window width/height to state\n        setWindowSize({\n          width: window.innerWidth,\n          height: window.innerHeight,\n        });\n      }\n      // Add event listener\n      window.addEventListener(\"resize\", handleResize);\n      // Call handler right away so state gets updated with initial window size\n      handleResize();\n      // Remove event listener on cleanup\n      return () => window.removeEventListener(\"resize\", handleResize);\n    }, []); // Empty array ensures that effect is only run on mount\n    return windowSize;\n  }","import { useState, forwardRef, useEffect } from 'react'\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\nconst Alert = forwardRef<HTMLDivElement, AlertProps>(function Alert(\n  props,\n  ref,\n) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport default function SnackbarNotification(props: any) {\n\n  const [state, setState] = useState({ severity: props.state.severity, open: props.state.open, message: props.state.message })\n\n  useEffect(() => {\n    setState({severity: props.state.severity, open: props.state.open, message: props.state.message})\n  }, [props])\n\n  const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setState({\n      message: state.message, open: false,\n      severity: state.severity\n    })\n  };\n\n  return (\n    <Snackbar open={state.open} autoHideDuration={6000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity={state.severity} sx={{ width: '100%' }}>\n        {state.message}\n      </Alert>\n    </Snackbar>\n  )\n}","export default __webpack_public_path__ + \"static/media/file-icon.92106822.svg\";","import { ethers } from \"ethers\";\n\nconst { abi } = require(\"./XENCrypto.json\");\n\nexport default (signerOrProvider, address) => {\n    return new ethers.Contract(address, abi, signerOrProvider);\n}","import { ethers } from \"ethers\";\n\nconst { abi } = require(\"./DBXen.json\");\n\nexport default (signerOrProvider, address) => {\n  return new ethers.Contract(address, abi, signerOrProvider);\n}","// <!-- By Sam Herbert (@sherb), for everyone. More @ http://goo.gl/7AJzbL -->\nexport function Spinner({ color, ...rest }: any) {\n    return (\n        <svg width=\"38\" height=\"38\" viewBox=\"0 0 38 38\" \n            xmlns=\"http://www.w3.org/2000/svg\" stroke={color} {...rest}>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <g transform=\"translate(1 1)\" strokeWidth=\"2\">\n                    <circle strokeOpacity=\".5\" cx=\"18\" cy=\"18\" r=\"18\" />\n                    <path d=\"M36 18c0-9.94-8.06-18-18-18\">\n                    <animateTransform\n                        attributeName=\"transform\"\n                        type=\"rotate\"\n                        from=\"0 18 18\"\n                        to=\"360 18 18\"\n                        dur=\"1s\"\n                        repeatCount=\"indefinite\" />\n                    </path>\n                </g>\n            </g>\n        </svg>\n    )\n}","import { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport XENCrypto from '../../ethereum/XENCrypto';\nimport DBXen from \"../../ethereum/dbxen\"\nimport { ethers } from \"ethers\";\nimport \"../../componentsStyling/permanentDrawer.scss\";\nimport SnackbarNotification from './Snackbar';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport { Spinner } from './Spinner';\nimport axios, { Method } from 'axios';\nimport web3 from 'web3';\nconst { BigNumber } = require(\"ethers\");\n\nconst deb0xAddress = \"0x4F3ce26D9749C0f36012C9AbB41BF9938476c462\";\nconst xenCryptoAddress = \"0x2AB0e9e4eE70FFf1fB9D67031E44F6410170d00e\";\n\nexport function Burn(): any {\n    const context = useWeb3React()\n    const { library, account } = context\n    const [notificationState, setNotificationState] = useState({});\n    const [value, setValue] = useState(1);\n    const [approveBrun, setApproveBurn] = useState<boolean>(false);\n    const [balanceGratherThanZero, checkBalance] = useState(\"\");\n    const [maticValue, setMaticValue] = useState<any>();\n    const [totalCost, setTotalCost] = useState<any>();\n    const [totalAmountOfXEN, setXENAmount] = useState<any>();\n    const [loading, setLoading] = useState(false)\n\n    useEffect( () => {\n        setApproveBurn(false)\n    }, [account]);\n\n    useEffect( () => {\n        setApproveBurn(false);\n        getCurrentGasLimit().then(async (data) => {\n            estimationValue(data).then(async (resut) =>{\n            setMaticValue(resut.fee);\n            })\n        })\n    },[value]);\n\n    useEffect( () => {\n        setApproveBurn(false);\n        getCurrentGasLimit().then(async (data) => {\n            estimationValue(data).then(async (resut) =>{\n                setTotalCost(resut.total);\n            })\n        })\n    },[value]);\n\n    useEffect( () => {\n        setXENAmount(value*2500000);\n    },[value]);\n\n    useEffect(() => {\n        setBalance()\n    }, [account,balanceGratherThanZero]);\n\n    async function setBalance(){\n        setLoading(true);\n        const signer = await library.getSigner(0)\n        const xenContract = await XENCrypto(signer, xenCryptoAddress);\n        let number;\n\n        await xenContract.balanceOf(account).then((balance: any) => {\n            number = ethers.utils.formatEther(balance);\n            checkBalance(number.toString()) \n            setLoading(false);\n        })\n    }\n\n    async function getCurrentPrice(){\n        let method: Method = 'POST';\n        const options = {\n            method: method,\n            url: 'https://polygon-mainnet.infura.io/v3/6010818c577b4531b1886965421a91d3 ',\n            port: 443,\n            headers: {\n                'Content-Type': 'application/json'\n              },\n            data: JSON.stringify({\n                \"jsonrpc\":\"2.0\",\"method\":\"eth_gasPrice\",\"params\": [],\"id\":1\n              })\n        };\n\n        let requestValue = await axios.request(options)\n        return web3.utils.fromWei(requestValue.data.result.toString(), \"Gwei\")\n    }\n\n    async  function estimationValue(gasLimitIntervalValue: number){\n        let price = Number(await getCurrentPrice());\n        let protocol_fee = value *(1 - 0.00005*value) ;\n        let fee = gasLimitIntervalValue * price * protocol_fee / 1000000000;\n        let totalValue = fee +(fee /((1- 0.00005*value) * value));\n        let obj = {fee:fee.toFixed(4), total:totalValue.toFixed(4)}\n        return obj;\n    }\n    \n    async function getCurrentGasLimit(){\n        const signer = await library.getSigner(0)\n        const deb0xContract = DBXen(signer, deb0xAddress)\n        let currentCycle = await deb0xContract.getCurrentCycle();\n        let numberBatchesBurnedInCurrentCycle;\n        let batchBurned = 0;\n\n        numberBatchesBurnedInCurrentCycle = await deb0xContract.cycleTotalBatchesBurned(currentCycle);\n        batchBurned =numberBatchesBurnedInCurrentCycle.toNumber();\n        \n        let gasLimitIntervalValue;\n            if(batchBurned != 0)\n                gasLimitIntervalValue = BigNumber.from(\"250000\");\n                    else\n                gasLimitIntervalValue = BigNumber.from(\"400000\");\n        return gasLimitIntervalValue;\n    }\n\n    async function setApproval() {\n        setLoading(true);\n        const signer = await library.getSigner(0)\n        const xenContract = await XENCrypto(signer, xenCryptoAddress)\n        let totalAmountToBurn = value * 2500000;\n        try {\n            const tx = await xenContract.approve(deb0xAddress, ethers.utils.parseEther(totalAmountToBurn.toString()))\n            tx.wait()\n                .then((result: any) => {\n                    setApproveBurn(true);\n                    setNotificationState({\n                        message: \"Your succesfully approved contract for burn.\", open: true,\n                        severity: \"success\"\n                    })\n                    setLoading(false)\n                })\n                .catch((error: any) => {\n                    setNotificationState({\n                        message: \"Contract couldn't be approved for burn!\", open: true,\n                        severity: \"error\"\n                    })\n                    setLoading(false)\n                })\n        } catch (error) {\n            setNotificationState({\n                message: \"You rejected the transaction. Contract hasn't been approved for burn.\", open: true,\n                severity: \"info\"\n            })\n            setLoading(false)\n        }\n    }\n\n    async function burnXEN(){\n        setLoading(true)\n        const signer = await library.getSigner(0)\n        const deb0xContract = DBXen(signer, deb0xAddress)\n        let gasLimitIntervalValue = await getCurrentGasLimit();\n        let currentValue = (await estimationValue(gasLimitIntervalValue)).fee;\n        try {\n            const overrides = \n                { value: ethers.utils.parseUnits(currentValue.toString(), \"ether\"),\n                    gasLimit:gasLimitIntervalValue }\n            const tx = await deb0xContract[\"burnBatch(uint256)\"](value,overrides)\n\n            await tx.wait()\n                .then((result: any) => {\n                    setNotificationState({\n                        message: \"Burn completed\",\n                        open: true,\n                        severity: \"success\"\n                    })\n                    setLoading(false)\n                    setApproveBurn(false)\n                })\n                .catch((error: any) => {\n                    setNotificationState({\n                        message: \"Something went wrong!\",\n                        open: true,\n                        severity: \"error\"\n                    })\n                    setLoading(false)\n                })\n            } catch (error: any) {\n                console.log(error.message)\n                setNotificationState({\n                    message: \"You rejected the transaction.\",\n                    open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n    }\n\n    useEffect(() => {\n        setTimeout(() => {setNotificationState({})}, 2000)\n    }, [notificationState])\n\n    const handleInputChange = (e: any)=>{\n        if(value > 10000) {\n            setValue(10000)\n        } else {\n            setValue(e.target.value);\n        }\n    }\n\n    const incNum = () => {\n        if(value < 10000)\n            setValue(Number(value)+1);\n    };\n\n    const decNum = () => {\n        if(value > 1)\n            setValue(value - 1);\n    }\n\n    useEffect(() => {\n        if (value > 10000) {\n            setValue(10000)\n        }\n        if (value <= 0 ) {\n            setValue(1)\n        }\n    }, [value])\n    \n    return (\n        <>\n            <SnackbarNotification state={notificationState} \n                    setNotificationState={setNotificationState} />\n            <div className=\"side-menu--bottom burn-container\">\n                <div className=\"row\">\n                    <p className=\"text-center mb-0\">Choose the number of XEN batches you want to burn</p>\n                    <p className=\"text-center\">(1 batch = 2 500 000 XEN)</p>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col input-col\">\n                        <input type=\"number\" value={value} max=\"10000\" onChange={handleInputChange}/>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <button className=\"btn count-btn col\" type=\"button\" onClick={decNum}>-</button>\n                    <button className=\"btn count-btn col\" type=\"button\" onClick={incNum}>+</button>\n                </div>\n                <div className=\"row\">\n                    <button className=\"btn count-btn max-btn col\" type=\"button\" \n                        onClick={() => setValue(10000)}>MAX</button>\n                </div>\n                <div className=\"values-container\">\n                    <div className=\"value-content\">\n                        <p>Protocol Fee:</p>\n                        <p> ~{maticValue} MATIC</p>\n                    </div>\n                    <div className=\"value-content\">\n                        <p>Total transaction cost:</p>\n                        <p> ~{totalCost} MATIC</p>\n                    </div>\n                    <div className=\"value-content\">\n                        <p>Total XEN burned:</p>\n                        <p>\n                            {Number(totalAmountOfXEN).toLocaleString('en-US', {\n                                minimumFractionDigits: 2,\n                                maximumFractionDigits: 2\n                            })} XEN</p>\n                    </div>\n                </div>\n                {approveBrun ?\n                    <LoadingButton className=\"burn-btn\" \n                        loadingPosition=\"end\"\n                        onClick={() => burnXEN()} >\n                            {loading ? <Spinner color={'black'} /> : \"Burn XEN\" }\n                    </LoadingButton> :\n                    balanceGratherThanZero === '0.0' ||  balanceGratherThanZero === '0' ? \n                    <LoadingButton className=\"burn-btn\" \n                        loadingPosition=\"end\"\n                        disabled={ balanceGratherThanZero === '0.0' ||  balanceGratherThanZero === '0'}>\n                            {loading ? <Spinner color={'black'} /> : \"Your balance is 0!\" }\n                    </LoadingButton> :\n                    <LoadingButton className=\"burn-btn\" \n                        loadingPosition=\"end\"\n                        disabled={  balanceGratherThanZero === '0.0' ||  balanceGratherThanZero === '0'}\n                        onClick={() => setApproval()} >\n                            {loading ? <Spinner color={'black'} /> : \"Approve Burn XEN\" }\n                    </LoadingButton>\n                }\n            </div>\n        </>\n    )\n}\n","export default function formatAccountName(account: string)\n{   \n    return `${account.substring(0, 5)}...${account.substring(account.length - 4)}`\n}","import React, { useState, useEffect, useContext, useDebugValue } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport Box from '@mui/material/Box';\nimport Drawer from '@mui/material/Drawer';\nimport { injected } from '../../connectors';\nimport XENCrypto from '../../ethereum/XENCrypto';\nimport DBXen from \"../../ethereum/dbxen\"\nimport { ethers } from \"ethers\";\nimport \"../../componentsStyling/permanentDrawer.scss\";\nimport ScreenSize from '../Common/ScreenSize';\nimport SnackbarNotification from './Snackbar';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport { Spinner } from './Spinner';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter, faGithub, faTelegram } from \"@fortawesome/free-brands-svg-icons\";\nimport document from \"../../photos/icons/file-icon.svg\";\nimport axios, { Method } from 'axios';\nimport web3 from 'web3';\nimport { Burn } from './Burn';\nimport formatAccountName from '../Common/AccountName';\n\ndeclare global {\n    interface Window {\n        ethereum: any;\n    }\n}\n\nexport function PermanentDrawer(props: any): any {\n    const context = useWeb3React()\n    const { connector } = context\n    const [activatingConnector, setActivatingConnector] = useState<any>()\n    const dimensions = ScreenSize();\n    const [notificationState, setNotificationState] = useState({});\n    const [networkName, setNetworkName] = useState<any>();\n\n    useEffect(() => {\n        injected.supportedChainIds?.forEach(chainId => \n            setNetworkName((ethers.providers.getNetwork(chainId).name)));\n        if (activatingConnector && activatingConnector === connector) {\n            setActivatingConnector(undefined)\n        }\n    }, [activatingConnector, connector])\n\n    async function getCurrentPrice(){\n        let method: Method = 'POST';\n        const options = {\n            method: method,\n            url: 'https://polygon-mainnet.infura.io/v3/6010818c577b4531b1886965421a91d3 ',\n            port: 443,\n            headers: {\n                'Content-Type': 'application/json'\n              },\n            data: JSON.stringify({\n                \"jsonrpc\":\"2.0\",\"method\":\"eth_gasPrice\",\"params\": [],\"id\":1\n              })\n        };\n\n        let requestValue = await axios.request(options)\n        return web3.utils.fromWei(requestValue.data.result.toString(), \"Gwei\")\n    }\n\n    useEffect(() => {\n        setTimeout(() => {setNotificationState({})}, 2000)\n    }, [notificationState])\n    return (\n        <>\n            <SnackbarNotification state={notificationState} \n                setNotificationState={setNotificationState} />\n            {dimensions.width > 768 ?\n                <Box className=\"side-menu-box\" sx={{ display: 'flex' }}>\n                <Drawer variant=\"permanent\"\n                    anchor='left'\n                    className=\"side-menu\">\n                    <div className=\"image-container\">\n                        <div className=\"img\"></div>\n                    </div>\n                    <Burn />\n                    <div className=\"content\">\n                        <div className=\"social-media\">\n                            <a href=\"https://twitter.com/DBXen_crypto\" target=\"_blank\" className=\"logo-text-color\">\n                                <FontAwesomeIcon icon={faTwitter} size=\"xl\"/>\n                            </a>\n                            <a href=\"https://dbxen.gitbook.io/dbxen-litepaper/\" target=\"_blank\" className=\"logo-text-color\">\n                                <img src={document} />\n                            </a>\n                            <a href=\"https://github.com/deb0x/dbXenBurnerProject\" target=\"_blank\" className=\"logo-text-color\">\n                                <FontAwesomeIcon icon={faGithub} size=\"xl\"/>\n                            </a>\n                            <a href=\"https://t.me/+_Q3prZI35gJkZmI0\" target=\"_blank\" className=\"logo-text-color\">\n                                <FontAwesomeIcon icon={faTelegram} size=\"xl\"/>\n                            </a>\n                        </div>\n                        <div className=\"contracts\">\n                            <div className=\"row\">\n                                <span className=\"col-6\">DBXen: </span>\n                                <a className=\"col-6\" target=\"_blank\"\n                                    href=\"https://polygonscan.com/address/0x4F3ce26D9749C0f36012C9AbB41BF9938476c462\">\n                                    {formatAccountName(\"0x4F3ce26D9749C0f36012C9AbB41BF9938476c462\")}\n                                </a>\n                            </div>\n                            <div className=\"row\">\n                                <span className=\"col-6\">DBXenERC20: </span>\n                                <a className=\"col-6\" target=\"_blank\"\n                                    href=\"https://polygonscan.com/address/0x47DD60FA40A050c0677dE19921Eb4cc512947729\">\n                                    {formatAccountName(\"0x47DD60FA40A050c0677dE19921Eb4cc512947729\")}\n                                </a>\n                            </div>\n                            <div className=\"row\">\n                                <span className=\"col-6\">DBXenViews:</span>\n                                <a className=\"col-6\" target=\"_blank\"\n                                    href=\"https://polygonscan.com/address/0xcf7582e5fac8a6674ccd96ce71d807808ca8ba6e\">\n                                    {formatAccountName(\"0xcf7582e5fac8a6674ccd96ce71d807808ca8ba6e\")}\n                                </a>\n                            </div>\n                        </div>\n                    </div>\n                </Drawer>\n            </Box> : <></>\n            }\n            \n        </>\n    );\n}","import { ethers } from \"ethers\";\n\nconst { abi } = require(\"./DBXenViews.json\");\n\nexport default (signerOrProvider, address) => {\n    return new ethers.Contract(address, abi, signerOrProvider);\n}","import { ethers } from \"ethers\";\n\nconst { abi } = require(\"./DBXenERC20.json\");\n\nexport default (signerOrProvider, address) => {\n    return new ethers.Contract(address, abi, signerOrProvider);\n}\n","export default __webpack_public_path__ + \"static/media/coin-bag-solid--light.d9344235.svg\";","export default __webpack_public_path__ + \"static/media/token.0bd78e9a.svg\";","export default __webpack_public_path__ + \"static/media/coin-bag-solid--dark.b9b74873.svg\";","export default __webpack_public_path__ + \"static/media/wallet--light.60fbc32b.svg\";","export default __webpack_public_path__ + \"static/media/wallet--dark.307c5384.svg\";","export default __webpack_public_path__ + \"static/media/fees.50cb4df6.svg\";","export default __webpack_public_path__ + \"static/media/finance.d8ebf4c0.svg\";","const ethSigUtil = require('eth-sig-util');\n\nconst ethers = require('ethers')\n\nconst ethereumJsUtil = require('ethereumjs-util')\n\nconst GENERIC_PARAMS = 'address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data,uint256 validUntilTime'\nconst typeName = `ForwardRequest(${GENERIC_PARAMS})`\nconst typeHash = ethers.utils.id(typeName)\n\nconst EIP712Domain = [\n    { name: 'name', type: 'string' },\n    { name: 'version', type: 'string' },\n    { name: 'chainId', type: 'uint256' },\n    { name: 'verifyingContract', type: 'address' }\n];\n\nconst ForwardRequest = [\n    { name: 'from', type: 'address' },\n    { name: 'to', type: 'address' },\n    { name: 'value', type: 'uint256' },\n    { name: 'gas', type: 'uint256' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'data', type: 'bytes' },\n    { name: 'validUntilTime', type: 'uint256' }\n];\n\nfunction getMetaTxTypeData(chainId, verifyingContract) {\n    return {\n        types: {\n            EIP712Domain,\n            ForwardRequest,\n        },\n        domain: {\n            name: 'Forwarder',\n            version: '0.0.1',\n            chainId,\n            verifyingContract,\n        },\n        primaryType: 'ForwardRequest',\n    }\n};\n\nasync function signTypedData(signer, from, data) {\n    const [method, argData] = ['eth_signTypedData_v4', JSON.stringify(data)]\n    return await signer.send(method, [from, argData]);\n}\n\nasync function buildRequest(forwarder, input, valueParam) {\n    const value = valueParam ? valueParam : '0';\n    const nonce = await forwarder.getNonce(input.from).then(nonce => nonce.toString());\n    return { value, gas: '100000', nonce, validUntilTime: '0', ...input };\n}\n\nasync function buildTypedData(forwarder, request) {\n    const chainId = await forwarder.provider.getNetwork().then(n => n.chainId);\n    const typeData = getMetaTxTypeData(chainId, forwarder.address);\n    return {...typeData, message: request };\n}\n\nasync function getDomainSeparator(forwarder) {\n    const chainId = await forwarder.provider.getNetwork().then(n => n.chainId);\n    const typeData = getMetaTxTypeData(chainId, forwarder.address);\n    return ethereumJsUtil.bufferToHex(ethSigUtil.TypedDataUtils.hashStruct('EIP712Domain', typeData.domain, { EIP712Domain }, 'V4'))\n}\n\nexport async function signMetaTxRequest(signer, forwarder, input, value) {\n    const request = await buildRequest(forwarder, input, value);\n    const toSign = await buildTypedData(forwarder, request);\n    const signature = await signTypedData(signer, input.from, toSign);\n    const domainSeparator = await getDomainSeparator(forwarder)\n    return { typeHash, domainSeparator, signature, request };\n}","import { ethers } from 'ethers';\nimport { Forwarder as address } from '../deploy.json';\n\nconst { abi } = require(\"./Forwarder.json\");\n\nexport function createInstance(provider) {\n  return new ethers.Contract(address, abi, provider);\n}\n","import { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport {\n    Card, CardActions, CardContent, Button, Grid,\n    Typography, Box, OutlinedInput\n} from '@mui/material';\n\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport DBXen from \"../../ethereum/dbxen\"\nimport DBXenViews from \"../../ethereum/dbxenViews\";\nimport DBXenERC20 from \"../../ethereum/dbxenerc20\"\nimport SnackbarNotification from './Snackbar';\nimport { BigNumber, ethers } from \"ethers\";\nimport \"../../componentsStyling/stake.scss\";\nimport token from \"../../photos/icons/token.svg\"\nimport coinBagLight from \"../../photos/icons/coin-bag-solid--light.svg\";\nimport coinBagDark from \"../../photos/icons/coin-bag-solid--dark.svg\";\nimport walletLight from \"../../photos/icons/wallet--light.svg\";\nimport walletDark from \"../../photos/icons/wallet--dark.svg\";\nimport fees from \"../../photos/icons/fees.svg\";\nimport finance from \"../../photos/icons/finance.svg\";\nimport { signMetaTxRequest } from '../../ethereum/signer';\nimport { createInstance } from '../../ethereum/forwarder'\nimport dataFromWhitelist from '../../constants.json';\nimport useAnalyticsEventTracker from '../Common/GaEventTracker';\nimport Countdown, { zeroPad } from \"react-countdown\";\n\nconst { whitelist } = dataFromWhitelist;\nconst deb0xAddress = \"0x4F3ce26D9749C0f36012C9AbB41BF9938476c462\";\nconst deb0xViewsAddress = \"0xCF7582E5FaC8a6674CcD96ce71D807808Ca8ba6E\";\nconst deb0xERC20Address = \"0x47DD60FA40A050c0677dE19921Eb4cc512947729\";\n\nexport function Stake(props: any): any {\n\n    const { account, library } = useWeb3React()\n    const [notificationState, setNotificationState] = useState({})\n    const gaEventTracker = useAnalyticsEventTracker('Stake');\n    const [previousCycleXENBurned, setPreviousCycleXENBurned] = useState<any>();\n    const date:any = new Date(Date.UTC(2023, 2, 17, 14, 0, 0, 0));\n    const now: any = Date.now()\n    let endDate = date.getTime() - now;\n\n    const renderer = ({ hours, minutes, seconds, completed }: any) => {\n        if (completed) {\n          // Render a complete state\n          return ;\n        } else {\n          // Render a countdown\n          return (\n                <span>\n                    ~ {zeroPad(hours)}:{zeroPad(minutes)}:{zeroPad(seconds)}\n                </span>\n          );\n        }\n    };\n\n    function FeesPanel() {\n        const [feesUnclaimed, setFeesUnclaimed] = useState(\"\")\n        const [loading, setLoading] = useState(false)\n\n        useEffect(() => {\n            feesAccrued()\n        }, [feesUnclaimed]);\n\n\n        useEffect(() => {\n            const totalXenBurnedPreviousCycle = async () =>{\n                setPreviousCycleXENBurned(await getTotalXenBurnedInPreviusCycle())\n            }\n            totalXenBurnedPreviousCycle();\n        },[]);\n    \n        async function getTotalXenBurnedInPreviusCycle(){\n            const signer = await library.getSigner(0)\n            const deb0xContract = DBXen(signer, deb0xAddress)\n            let currentCycle = await deb0xContract.getCurrentCycle();\n            if(currentCycle != 0){\n                 let numberBatchesBurnedInCurrentCycle = await deb0xContract.cycleTotalBatchesBurned(currentCycle);\n                 let batchBurned = numberBatchesBurnedInCurrentCycle.toNumber();\n                 return batchBurned * 2500000;\n            }\n            return 0;\n        }\n\n\n        async function feesAccrued() {\n            const deb0xViewsContract = await DBXenViews(library, deb0xViewsAddress);\n            \n            const unclaimedRewards = await deb0xViewsContract.getUnclaimedFees(account);\n\n            setFeesUnclaimed(ethers.utils.formatEther(unclaimedRewards))\n        }\n\n        async function fetchClaimFeesResult(request: any, url: any) {\n            await fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(request),\n                headers: { 'Content-Type': 'application/json' },\n            })\n                .then((response) => response.json())\n                .then(async (data) => {\n                    try{\n                        const {tx: txReceipt} = JSON.parse(data.result)\n                        if(txReceipt.status == 1){\n                            setNotificationState({\n                                message: \"You succesfully claimed your fees.\", open: true,\n                                severity: \"success\"\n                            })\n                        } else {\n                            setNotificationState({\n                                message: \"Fees couldn't be claimed!\", open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    } catch(error) {\n                        if(data.status == \"pending\") {\n                            setNotificationState({\n                                message: \"Your transaction is pending. Your fees should arrive shortly\",\n                                open: true,\n                                severity: \"info\"\n                            })\n                        } else if(data.status == \"error\") {\n                            setNotificationState({\n                                message: \"Transaction relayer error. Please try again\",\n                                open: true,\n                                severity: \"error\"\n                            })\n                        }\n                    }\n                    \n                })\n        }\n\n        async function sendClaimFeesTx(deb0xContract: any) {\n            try {\n                const tx = await deb0xContract.claimFees()\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"You succesfully claimed your fees.\", open: true,\n                            severity: \"success\"\n                        })\n                        //setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: \"Fees couldn't be claimed!\", open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n            } catch (error: any) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Your fees haven't been claimed.\",\n                    open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function claimFees() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = DBXen(signer, deb0xAddress)\n\n            \n            const from = await signer.getAddress();\n            if(whitelist.includes(from)) {\n                const url = \"https://api.defender.openzeppelin.com/autotasks/b939da27-4a61-4464-8d7e-4b0c5dceb270/runs/webhook/f662ac31-8f56-4b4c-9526-35aea314af63/SPs6smVfv41kLtz4zivxr8\";\n                const forwarder = createInstance(library)\n                const data = deb0xContract.interface.encodeFunctionData(\"claimFees()\")\n                const to = deb0xContract.address\n\n                try {\n                    const request = await signMetaTxRequest(library, forwarder, { to, from, data });\n\n                    gaEventTracker(\"Success: Claim fees\");\n        \n                    await fetchClaimFeesResult(request, url)\n        \n                } catch (error: any) {\n                    setNotificationState({\n                        message: \"You rejected the transaction. Fees were not claimed.\",\n                        open: true,\n                        severity: \"info\"\n                    })\n\n                    gaEventTracker(\"Rejected: Claim fees\");\n                }\n            } else {\n                await sendClaimFeesTx(deb0xContract)\n            }\n        }\n\n        return (\n            <>\n            <Card variant=\"outlined\" className=\"card-container\">\n                <CardContent className=\"row\">\n                    <div className=\"col-12 col-md-8 mb-2\">\n                        <Typography variant=\"h4\" component=\"div\" className=\"rewards mb-3\">\n                            Your protocol fee share\n                        </Typography>\n                        <Typography >\n                            Your unclaimed MATIC fees:&nbsp;\n                                <strong>\n                                    {Number(feesUnclaimed).toLocaleString('en-US', {\n                                        minimumFractionDigits: 2,\n                                        maximumFractionDigits: 2\n                                    })}\n                                </strong>\n                        </Typography>\n                        <p className='my-2 counter'>\n                            Get next fees in <Countdown date={Date.now() + endDate} renderer={renderer} />\n                        </p>\n                    </div>\n                    <div className='col-12 col-md-4 d-flex justify-content-end align-items-start'>\n                        <img src={fees} alt=\"trophyRewards\" className=\"p-3 medium-img\"/>\n                    </div>\n                </CardContent>\n                <CardActions className='button-container px-3'>\n                    <LoadingButton \n                        className=\"collect-btn\"\n                        disabled={feesUnclaimed==\"0.0\"}\n                        loading={loading}\n                        variant=\"contained\"\n                        onClick={claimFees}>\n                            Collect\n                    </LoadingButton>\n                </CardActions>\n            </Card>\n            </>\n        )\n    }\n\n    function CyclePanel() {\n        const [currentReward, setCurrentReward] = useState(\"\")\n        useEffect(() => {\n            cycleReward()\n        }, [currentReward]);\n        async function cycleReward() {\n            const deb0xContract = await DBXen(library, deb0xAddress);\n            const currentReward = await deb0xContract.currentCycleReward();\n            setCurrentReward(ethers.utils.formatEther(currentReward))\n        }\n        return (\n            <>\n            <Card variant=\"outlined\" className=\"card-container\">\n                <CardContent className=\"row\">\n                    <div className=\"col-12 col-md-12 mb-2\">\n                        <Typography variant=\"h4\" component=\"div\" className=\"rewards mb-3\">\n                            Daily stats\n                        </Typography>\n                        <Typography className=\"data-height\">\n                            This cycle mints:&nbsp; \n                            <strong>\n                                {Number(currentReward).toLocaleString('en-US', {\n                                    minimumFractionDigits: 2,\n                                    maximumFractionDigits: 2\n                                })}\n                            </strong> DXN\n                        </Typography>\n                        {/* <Typography className=\"data-height\">\n                            Total XEN burned in previous cycle: <strong>{previousCycleXENBurned}</strong>\n                        </Typography> */}\n                    </div>\n                </CardContent>\n            </Card>\n            </>\n        )\n    }\n\n    function RewardsPanel() {\n        \n        const [rewardsUnclaimed, setRewardsUnclaimed] = useState(\"\")\n        const [feeSharePercentage, setFeeSharePercentage] = useState(\"\")\n        const [loading, setLoading] = useState(false)\n\n        useEffect(() => {\n            rewardsAccrued()\n        }, [rewardsUnclaimed]);\n\n        useEffect(() => {\n            feeShare()\n        }, [feeSharePercentage]);\n\n        async function rewardsAccrued() {\n            const deb0xViewsContract = await DBXenViews(library, deb0xViewsAddress);\n\n            const unclaimedRewards = await deb0xViewsContract.getUnclaimedRewards(account);\n         \n            setRewardsUnclaimed(ethers.utils.formatEther(unclaimedRewards))\n        }\n\n        async function feeShare() {\n            const deb0xViewsContract = await DBXenViews(library, deb0xViewsAddress);\n\n            const deb0xContract = await DBXen(library, deb0xAddress);\n\n            const unclaimedRewards = await deb0xViewsContract.getUnclaimedRewards(account);\n\n            const accWithdrawableStake = await deb0xViewsContract.getAccWithdrawableStake(account);\n            \n            let balance = parseFloat((ethers.utils.formatEther(unclaimedRewards.add(accWithdrawableStake))))\n            \n            const currentCycle = await deb0xContract.currentStartedCycle();\n\n            const totalSupply = await deb0xContract.summedCycleStakes(currentCycle);\n\n            const feeShare = balance * 100 / totalSupply\n            setFeeSharePercentage(((Math.round(feeShare * 100) / 100).toFixed(2)).toString() + \"%\")\n        }\n\n        async function fetchClaimRewardsResult(request: any, url: any) {\n            await fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(request),\n                headers: { 'Content-Type': 'application/json' },\n            })\n                .then((response) => response.json())\n                .then(async (data) => {\n                    try{\n                        const {tx: txReceipt} = JSON.parse(data.result)\n                        if(txReceipt.status == 1){\n                            setNotificationState({\n                                message: \"You succesfully claimed your rewards.\", open: true,\n                                severity: \"success\"\n                            })\n                        } else {\n                            setNotificationState({\n                                message: \"Rewards couldn't be claimed!\", open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    } catch(error) {\n                        if(data.status == \"pending\") {\n                            setNotificationState({\n                                message: \"Your transaction is pending. Your rewards should arrive shortly\",\n                                open: true,\n                                severity: \"info\"\n                            })\n                        } else if(data.status == \"error\") {\n                            setNotificationState({\n                                message: \"Transaction relayer error. Please try again\",\n                                open: true,\n                                severity: \"error\"\n                            })\n                        }\n                    }\n                    \n                })\n        }\n\n        async function sendClaimRewardsTx(deb0xContract: any) {\n            try {\n                const tx = await deb0xContract.claimRewards()\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"You succesfully claimed your rewards.\", open: true,\n                            severity: \"success\"\n                        })\n                        //setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: \"Rewards couldn't be claimed!\", open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n            } catch (error: any) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Your rewards haven't been claimed.\",\n                    open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function claimRewards() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = DBXen(signer, deb0xAddress)\n\n            \n            const from = await signer.getAddress();\n            if(whitelist.includes(from)) {\n                const url = \"https://api.defender.openzeppelin.com/autotasks/b939da27-4a61-4464-8d7e-4b0c5dceb270/runs/webhook/f662ac31-8f56-4b4c-9526-35aea314af63/SPs6smVfv41kLtz4zivxr8\";\n                const forwarder = createInstance(library)\n                const data = deb0xContract.interface.encodeFunctionData(\"claimRewards()\")\n                const to = deb0xContract.address\n\n                try {\n                    const request = await signMetaTxRequest(library, forwarder, { to, from, data });\n\n                    gaEventTracker(\"Success: Claim rewards\");\n        \n                    await fetchClaimRewardsResult(request, url)\n        \n                } catch (error: any) {\n                    setNotificationState({\n                        message: \"You rejected the transaction. Rewards were not claimed.\",\n                        open: true,\n                        severity: \"info\"\n                    })\n\n                    gaEventTracker(\"Rejected: Claim rewards\");\n                }\n            } else {\n                await sendClaimRewardsTx(deb0xContract)\n            }\n        }\n\n        return (\n            <>\n            <Card variant=\"outlined\" className=\"card-container\">\n                <CardContent className=\"row\">\n                    <div className=\"col-12 col-md-10 mb-2\">\n                        <Typography variant=\"h4\" component=\"div\" className=\"rewards mb-3\">\n                            Your rewards\n                        </Typography>\n                        <Typography >\n                            Your unclaimed DXN rewards:&nbsp;\n                                <strong>\n                                    {Number(rewardsUnclaimed).toLocaleString('en-US', {\n                                        minimumFractionDigits: 2,\n                                        maximumFractionDigits: 2\n                                    })}\n                                </strong>\n                        </Typography>\n                        <p className='my-2 counter'>\n                            Get next rewards in <Countdown date={Date.now() + endDate} renderer={renderer} />\n                        </p>\n                    </div>\n                    <div className='col-12 col-md-2 d-flex justify-content-end align-items-start'>\n                        <img src={finance} alt=\"trophyRewards\" className=\"p-3 medium-img\"/>\n                    </div>\n                </CardContent>\n                <CardActions className='button-container px-3'>\n                    <LoadingButton className=\"collect-btn\" loading={loading} variant=\"contained\" onClick={claimRewards}>Claim</LoadingButton>\n                    <span className=\"text\">Unclaimed DXN is considered automatically staked. Only claim when you want to trade.</span>\n                </CardActions>\n            </Card>\n            </>\n        )\n    }\n\n    function floorPrecised(number:any) {\n        var power = Math.pow(10, 2);\n        return (Math.floor(parseFloat(number) * power) / power).toString();\n    }\n\n    function StakeUnstake() {\n        const [alignment, setAlignment] = useState(\"stake\");\n\n        const [userStakedAmount, setUserStakedAmount] = useState(\"\")\n        const [userUnstakedAmount, setUserUnstakedAmount] = useState(\"\")\n        const [tokensForUnstake, setTokenForUnstake] = useState(\"\");\n        const [totalStaked, setTotalStaked] = useState(\"\")\n        const [amountToUnstake, setAmountToUnstake] = useState(\"\")\n        const [amountToStake, setAmountToStake] = useState(\"\")\n        const [loading, setLoading] = useState(false)\n        const [approved, setApproved] = useState<Boolean | null>(false)\n        \n        const handleChange = (\n            event: React.MouseEvent<HTMLElement>,\n            newAlignment: string,\n        ) => {\n            setAlignment(newAlignment);\n            gaEventTracker(newAlignment + \" tab\");\n        };\n        \n        const [theme, setTheme] = useState(localStorage.getItem('globalTheme'));\n        useEffect(() => {\n            setTheme(localStorage.getItem('globalTheme'));\n        });\n\n        useEffect(() => {\n            setStakedAmount()\n        }, [userStakedAmount]);\n\n        useEffect(() => {\n            totalAmountStaked()\n        }, [totalStaked]);\n\n\n        useEffect(() => {\n            setTokensForUntakedAmount()\n        },[]);\n\n        useEffect(() => {\n            setUnstakedAmount()\n        }, [userUnstakedAmount]);\n\n        useEffect(() => {\n            setApproval()\n        }, [approved]);\n\n        async function setStakedAmount() {\n            const deb0xContract = await DBXen(library, deb0xAddress)\n            const deb0xViewsContract = await DBXenViews(library, deb0xViewsAddress)\n            const balance = await deb0xViewsContract.getAccWithdrawableStake(account)\n            let firstStakeCycle = await deb0xContract.accFirstStake(account)\n            let secondStakeCycle =  await deb0xContract.accSecondStake(account)\n            let firstStakeCycleAmount = await deb0xContract.accStakeCycle(account,firstStakeCycle);\n            let secondStakeCycleAmount = await deb0xContract.accStakeCycle(account,secondStakeCycle);\n            let withdawbleStake = await deb0xContract.accWithdrawableStake(account);\n            let totalStakedAmount = BigNumber.from(firstStakeCycleAmount).add(BigNumber.from(secondStakeCycleAmount)).add(BigNumber.from(withdawbleStake))\n            setUserStakedAmount(ethers.utils.formatEther(totalStakedAmount))\n        }\n\n        async function setTokensForUntakedAmount() {\n            const deb0xViewsContract = await DBXenViews(library, deb0xViewsAddress)\n            const balance = await deb0xViewsContract.getAccWithdrawableStake(account)\n            setTokenForUnstake(ethers.utils.formatEther(balance.toString()));\n        }\n\n        async function setUnstakedAmount() {\n            const deb0xERC20Contract = await DBXenERC20(library, deb0xERC20Address)\n            const balance = await deb0xERC20Contract.balanceOf(account)\n            let number = ethers.utils.formatEther(balance);\n            setUserUnstakedAmount(parseFloat(number.slice(0, (number.indexOf(\".\")) +3)).toString()) \n        }\n\n        async function setApproval() {\n            const deb0xERC20Contract = await DBXenERC20(library, deb0xERC20Address)\n\n            const allowance = await deb0xERC20Contract.allowance(account, deb0xAddress)\n            allowance > 0 ? setApproved(true) : setApproved(false)\n        }\n\n        async function totalAmountStaked() {\n\n            const deb0xContract = await DBXen(library, deb0xAddress)\n\n            const currentCycle = await deb0xContract.currentStartedCycle()\n\n            const totalSupply = await deb0xContract.summedCycleStakes(currentCycle)\n\n            setTotalStaked(ethers.utils.formatEther(totalSupply))\n        }\n\n        async function approveStaking() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n            const deb0xERC20Contract = await DBXenERC20(signer, deb0xERC20Address)\n\n            try {\n                const tx = await deb0xERC20Contract.approve(deb0xAddress, ethers.utils.parseEther(\"5010000\"))\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"Your succesfully approved contract for staking.\", open: true,\n                            severity: \"success\"\n                        })\n                        setLoading(false)\n\n                        gaEventTracker(\"Success: Approve staking\");\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: \"Contract couldn't be approved for staking!\", open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                        gaEventTracker(\"Error: Approve staking\");\n                    })\n            } catch (error) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Contract hasn't been approved for staking.\", open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n                gaEventTracker(\"Rejected: Approve staking\");\n            }\n        }\n\n        async function fetchUnstakeResult(request: any, url: any) {\n            await fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(request),\n                headers: { 'Content-Type': 'application/json' },\n            })\n                .then((response) => response.json())\n                .then(async (data) => {\n                    try{\n                        const {tx: txReceipt} = JSON.parse(data.result)\n                        if(txReceipt.status == 1){\n                            setNotificationState({\n                                message: \"Your tokens were succesfully unstaked.\", open: true,\n                                severity: \"success\"\n                            })\n                            setLoading(false)\n                        } else {\n                            setNotificationState({\n                                message: \"Your tokens couldn't be unstaked!\", open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    } catch(error) {\n                        if(data.status == \"pending\") {\n                            setNotificationState({\n                                message: \"Your transaction is pending. Your DXN should be unstaked shortly\",\n                                open: true,\n                                severity: \"info\"\n                            })\n                        } else if(data.status == \"error\") {\n                            setNotificationState({\n                                message: \"Transaction relayer error. Please try again\",\n                                open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    }\n                    \n                })\n        }\n\n        async function sendUnstakeTx(deb0xContract: any) {\n            try {\n                const tx = await deb0xContract.unstake(ethers.utils.parseEther(amountToUnstake.toString()))\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"Your tokens were succesfully unstaked.\", open: true,\n                            severity: \"success\"\n                        })\n                        setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setLoading(false)\n                        setNotificationState({\n                            message: \"Your tokens couldn't be unstaked!\", open: true,\n                            severity: \"error\"\n                        })\n\n                    })\n            } catch(error) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Your tokens haven't been unstaked.\",\n                    open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function unstake() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = DBXen(signer, deb0xAddress)\n            \n            const from = await signer.getAddress();\n            if(whitelist.includes(from)) {\n                const url = \"https://api.defender.openzeppelin.com/autotasks/b939da27-4a61-4464-8d7e-4b0c5dceb270/runs/webhook/f662ac31-8f56-4b4c-9526-35aea314af63/SPs6smVfv41kLtz4zivxr8\";\n                const forwarder = createInstance(library)\n                const data = deb0xContract.interface.encodeFunctionData(\"unstake\",\n                    [ethers.utils.parseEther(amountToUnstake.toString())])\n                const to = deb0xContract.address\n                try {\n                    const request = await signMetaTxRequest(library, forwarder, { to, from, data });\n\n                    gaEventTracker(\"Success: Unstake\");\n        \n                    await fetchUnstakeResult(request, url)\n        \n                } catch (error: any) {\n                    setNotificationState({\n                        message: \"You rejected the transaction. DXN were not unstaked.\",\n                        open: true,\n                        severity: \"info\"\n                    })\n                    setLoading(false)\n\n                    gaEventTracker(\"Rejected: Unstake\");\n                }\n            } else { \n                await sendUnstakeTx(deb0xContract)\n            }\n        }\n\n        async function fetchStakeResult(request: any, url: any) {\n            await fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(request),\n                headers: { 'Content-Type': 'application/json' },\n            })\n                .then((response) => response.json())\n                .then(async (data) => {\n                    try{\n                        const {tx: txReceipt} = JSON.parse(data.result)\n                        if(txReceipt.status == 1){\n                            setNotificationState({\n                                message: \"You succesfully staked your DXN.\", open: true,\n                                severity: \"success\"\n                            })\n                        } else {\n                            setNotificationState({\n                                message: \"DXN couldn't be claimed!\", open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    } catch(error) {\n                        if(data.status == \"pending\") {\n                            setNotificationState({\n                                message: \"Your transaction is pending. Your DXN should be staked shortly\",\n                                open: true,\n                                severity: \"info\"\n                            })\n                        } else if(data.status == \"error\") {\n                            setNotificationState({\n                                message: \"Transaction relayer error. Please try again\",\n                                open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    }\n                    \n                })\n        }\n\n        async function sendStakeTx(deb0xContract: any) {\n            try {\n                const tx = await deb0xContract.stake(ethers.utils.parseEther(amountToStake.toString()))\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"Your tokens were succesfully staked.\", open: true,\n                            severity: \"success\"\n                        })\n                        //setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: \"Your tokens couldn't be staked!\", open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n            } catch(error) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Your tokens haven't been staked.\",\n                    open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function stake() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = DBXen(signer, deb0xAddress)\n            \n            const from = await signer.getAddress();\n            if(whitelist.includes(from)){\n                const url = \"https://api.defender.openzeppelin.com/autotasks/b939da27-4a61-4464-8d7e-4b0c5dceb270/runs/webhook/f662ac31-8f56-4b4c-9526-35aea314af63/SPs6smVfv41kLtz4zivxr8\";\n                const forwarder = createInstance(library)\n                const data = deb0xContract.interface.encodeFunctionData(\"stake\",\n                    [ethers.utils.parseEther(amountToStake.toString())])\n                const to = deb0xContract.address\n\n                try {\n                    const request = await signMetaTxRequest(library, forwarder, { to, from, data });\n\n                    gaEventTracker(\"Success: Stake\");\n        \n                    await fetchStakeResult(request, url)\n        \n                } catch (error: any) {\n                    setNotificationState({\n                        message: \"You rejected the transaction. DXN were not staked.\",\n                        open: true,\n                        severity: \"info\"\n                    })\n                    setLoading(false)\n                    gaEventTracker(\"Rejected: Stake\");\n                }\n            } else {\n                await sendStakeTx(deb0xContract)\n            }\n        }\n\n        return (\n            <Card variant = \"outlined\" className=\"card-container\">\n                <ToggleButtonGroup\n                    color=\"primary\"\n                    value={alignment}\n                    exclusive\n                    onChange={handleChange}\n                    className=\"tab-container\"\n                >\n                    <ToggleButton className=\"tab-btn\" value=\"stake\">Stake</ToggleButton>\n                    <ToggleButton className=\"tab-btn\" value=\"unstake\" >Unstake</ToggleButton>\n\n                </ToggleButtonGroup>\n              \n            {\n                alignment === \"stake\" ?\n                \n                <>\n                <CardContent className=\"row\">\n                    <div className=\"col-6 px-3\">\n                        <img className=\"display-element\" src={theme === \"classic\" ? coinBagDark : coinBagLight} alt=\"coinbag\" />\n                        <Typography className=\"p-0\">\n                            Your staked amount:\n                        </Typography>\n                        <Typography variant=\"h6\" className=\"p-0 data-height\">\n                            <strong>\n                                {Number(userStakedAmount).toLocaleString('en-US', {\n                                    minimumFractionDigits: 2,\n                                    maximumFractionDigits: 2\n                                })} DXN</strong>\n                        </Typography>\n                    </div>\n                    <div className=\"col-6 px-3\">\n                        <img className=\"display-element\" src={theme === \"classic\" ? walletDark : walletLight} alt=\"coinbag\" />\n                        <Typography className=\"p-0\">\n                            Available DXN in your wallet:\n                        </Typography>\n                        <Typography variant=\"h6\" className=\"p-0\" data-height>\n                            <strong>\n                                {Number(userUnstakedAmount).toLocaleString('en-US', {\n                                    minimumFractionDigits: 2,\n                                    maximumFractionDigits: 2\n                                })} DXN</strong>\n                        </Typography>\n                    </div>\n                    {approved && <Grid className=\"amount-row px-3\" container>\n                        <Grid item>\n                            <OutlinedInput id=\"outlined-basic\"\n                                placeholder=\"Amount to stake\"\n                                type=\"number\"\n                                value={amountToStake}\n                                inputProps={{ min: 0 }}\n                                onChange={e => setAmountToStake(e.target.value)} />\n                        </Grid>\n                        <Grid className=\"max-btn-container\" item>\n                            <Button className=\"max-btn\" \n                                size=\"small\" variant=\"contained\" color=\"error\" \n                               onClick = {()=>setAmountToStake(userUnstakedAmount)  }>\n                                max\n                            </Button>\n                        </Grid>\n                    </Grid>}\n                </CardContent>\n                <CardActions className='button-container px-3'>\n                    {approved && <LoadingButton disabled={!amountToStake} className=\"collect-btn\" loading={loading} variant=\"contained\" onClick={stake}>Stake</LoadingButton>}\n                    {!approved &&\n                        <>\n                            <LoadingButton \n                                className=\"collect-btn\" \n                                loading={loading}\n                                variant=\"contained\"\n                                disabled={ userUnstakedAmount === '0.00' ||  userUnstakedAmount === '0'}\n                                onClick={approveStaking}>\n                                    Initialize Staking\n                            </LoadingButton>\n                            <span className=\"text\">\n                                Make sure you have DXN tokens in your wallet before you can stake them.\n                            </span>\n                        </> \n                    }\n                </CardActions>\n                </>\n                : \n\n                <>\n                <CardContent className=\"row\">\n                    <div className=\"col-6 px-3\">\n                        <img className=\"display-element\" src={theme === \"classic\" ? coinBagDark : coinBagLight} alt=\"coinbag\" />\n                        <Typography className=\"p-0\">\n                            Available to unstake:\n                        </Typography>\n                        <Typography variant=\"h6\" className=\"p-0\">\n                            <strong>{Number(tokensForUnstake).toLocaleString('en-US', {\n                                    minimumFractionDigits: 2,\n                                    maximumFractionDigits: 2\n                                })} DXN</strong>\n                        </Typography>\n                    </div>\n                    {/* <div className=\"col-6 px-3\">\n                        <img className=\"display-element\" src={theme === \"classic\" ? walletDark : walletLight} alt=\"coinbag\" />\n                        <Typography className=\"p-0\">\n                            Your actual stake:\n                        </Typography>\n                        <Typography variant=\"h6\" className=\"p-0 data-height\">\n                            <strong>{userStakedAmount} DXN</strong>\n                        </Typography>\n                    </div> */}\n                  \n\n                    <Grid className=\"amount-row px-3\" container>\n                        <Grid item>\n                            <OutlinedInput value={amountToUnstake}\n                                id=\"outlined-basic\"\n                                className=\"max-field\"\n                                placeholder=\"Amount to unstake\"\n                                onChange={e => setAmountToUnstake(e.target.value)}\n                                inputProps={{ min: 0 }}\n                                type=\"number\" />\n                        </Grid>\n                        <Grid className=\"max-btn-container\" item>\n                            <Button className=\"max-btn\"\n                                size=\"small\" variant=\"contained\" color=\"error\" \n                                onClick = {()=>setAmountToUnstake(tokensForUnstake)  }>\n                                max\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </CardContent>\n                <CardActions className='button-container px-3'>\n                    <LoadingButton className=\"collect-btn\" disabled={!amountToUnstake} loading={loading} variant=\"contained\" onClick={unstake}>Unstake</LoadingButton>\n                </CardActions>\n                </>\n            }\n\n            </Card>\n\n        )\n    }\n\n    function TotalStaked() {\n        const [totalStaked, setTotalStaked] = useState(\"\")\n        useEffect(() => {\n            totalAmountStaked()\n        }, [totalStaked]);\n    \n        async function totalAmountStaked() {\n    \n            const deb0xContract = await DBXen(library, deb0xAddress)\n\n            const currentCycle= await deb0xContract.currentStartedCycle()\n\n            const currentStake = await deb0xContract.summedCycleStakes(currentCycle)\n\n            const pendingStakeWithdrawal = await deb0xContract.pendingStakeWithdrawal()\n    \n            // setTotalStaked(ethers.utils.formatEther(currentStake))\n\n            setTotalStaked(floorPrecised(ethers.utils.formatEther(currentStake.sub(pendingStakeWithdrawal))))\n\n        }\n\n        return (\n            <Card className=\"heading-card\">\n                <CardContent>\n                    <Typography variant=\"h5\">\n                        Total tokens staked:\n                    </Typography>\n                    <Typography variant=\"h4\">\n                        <img className=\"logo\" src={token} />\n                        {totalStaked} DXN\n                    </Typography>\n                </CardContent>\n            </Card>\n        )\n    }\n\n    return (\n        <>\n            <SnackbarNotification state={notificationState} setNotificationState={setNotificationState} />\n            <Box className=\"content-box stake-content\">\n                <div className=\"cards-grid\">\n                    <div className='row'>\n                        <Grid item className=\"col col-12 col-md-6 \">\n                            <FeesPanel />\n                        </Grid>\n                        <Grid item className=\"col col-12 col-md-6\">\n                            <CyclePanel />\n                        </Grid>\n                    </div>\n                    <div className='row'>\n                        <Grid item className=\"col col-12 col-md-6 \">\n                            <RewardsPanel />\n                        </Grid>\n                        <Grid item className=\"col col-12 col-md-6\">\n                            <StakeUnstake/>\n                        </Grid>\n                    </div>\n                </div>\n            </Box>\n        </>\n    )\n}","import ReactGA from \"react-ga\";\n\nexport default function useAnalyticsEventTracker(category: string) {\n    const eventTracker = (action: string) => {\n      ReactGA.event({category, action});\n    }\n    return eventTracker;\n}","import { createContext } from \"react\";\n\nexport const initialThemeState = {\n  theme: \"dark\",\n  setTheme: (_value: string) => {}\n};\n\nconst ThemeContext = createContext(initialThemeState);\nexport default ThemeContext;","import { useEffect, useState } from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport { injected } from '../../connectors';\nimport { useWeb3React } from '@web3-react/core';\nimport { Spinner } from './Spinner';\nimport { ethers } from 'ethers';\nimport formatAccountName from '../Common/AccountName';\nimport DBXen from \"../../ethereum/dbxen\"\nimport DBXenViews from \"../../ethereum/dbxenViews\";\nimport DBXenERC20 from \"../../ethereum/dbxenerc20\"\nimport Popper from '@mui/material/Popper';\nimport ClickAwayListener from '@mui/base/ClickAwayListener';\nimport '../../componentsStyling/appBar.scss';\nimport copyIcon from '../../photos/icons/copy-1.svg';\nimport walletIcon from '../../photos/icons/wallet.svg';\nimport disconnectIcon from '../../photos/icons/diconnect.svg';\nimport logo from \"../../photos/white_dbxen.svg\";\n\nconst deb0xAddress = \"0x4F3ce26D9749C0f36012C9AbB41BF9938476c462\";\nconst deb0xViewsAddress = \"0xCF7582E5FaC8a6674CcD96ce71D807808Ca8ba6E\";\nconst deb0xERC20Address = \"0x47DD60FA40A050c0677dE19921Eb4cc512947729\"\nconst tokenSymbol = 'DBXen';\n\nconst tokenDecimals = 18;\nenum ConnectorNames { Injected = 'Injected' };\n\nconst connectorsByName: { [connectorName in ConnectorNames]: any } = {\n    [ConnectorNames.Injected]: injected\n}\n\nexport function AppBarComponent(props: any): any {\n    const context = useWeb3React();\n    const { connector, library, chainId, account, activate, deactivate } = context\n    const [activatingConnector, setActivatingConnector] = useState<any>();\n    const [networkName, setNetworkName] = useState<any>();\n    const [userUnstakedAmount,setUserUnstakedAmount] = useState<any>(0);\n    const [ensName, setEnsName] = useState<any>(\"\");\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const [, setNotificationState] = useState({})\n    const [theme, setTheme] = useState(localStorage.getItem('globalTheme'));\n    const [userStakedAmount, setUserStakedAmount] = useState(\"\")\n    const [rewardsUnclaimed, setRewardsUnclaimed] = useState(\"\")\n    const [open, setOpen] = useState<any>();\n    const deb0xViewsContract = DBXenViews(library, deb0xViewsAddress)\n    const [totalStaked, setTotalStaked] = useState(\"\")\n    const [totalXENBurned, setTotalXENBurned] = useState<any>();\n\n    const id = open ? 'simple-popper' : undefined;\n\n    if(library){\n        checkENS();\n        setUnstakedAmount();\n    }\n\n    useEffect(() => {\n        totalAmountStaked()\n    }, [totalAmountStaked]);\n\n    useEffect(() => {\n        setTheme(localStorage.getItem('globalTheme'));\n    }, []);\n\n    useEffect(() => {\n        injected.supportedChainIds?.forEach(chainId => \n            setNetworkName((ethers.providers.getNetwork(chainId).name)));\n        if (activatingConnector && activatingConnector === connector) {\n            setActivatingConnector(undefined)\n        }\n    }, [activatingConnector, connector]);\n\n    useEffect(() => {\n        xenBurned();\n    },[]);\n\n    const xenBurned = async () => {\n        await getTotalXenBurned().then((result: any) => {\n            setTotalXENBurned(result.toLocaleString('en-US'));\n        })\n    }\n\n    async function getTotalXenBurned(){\n        const signer = await library.getSigner(0)\n        const deb0xContract = DBXen(signer, deb0xAddress)\n        let numberBatchesBurnedInCurrentCycle = await deb0xContract.totalNumberOfBatchesBurned();\n        let batchBurned =numberBatchesBurnedInCurrentCycle.toNumber();\n        return batchBurned * 2500000;\n    }\n\n    async function setUnstakedAmount() {\n        const deb0xERC20Contract = DBXenERC20(library, deb0xERC20Address)\n        if(account){\n            await deb0xERC20Contract.balanceOf(account).then((result: any) => \n                setUserUnstakedAmount(floorPrecised(ethers.utils.formatEther(result)))\n            )\n        }\n    }\n\n    useEffect(() => {\n        const deb0xERC20Contract = DBXenERC20(library, deb0xERC20Address)\n        const filterFrom = deb0xERC20Contract.filters.Transfer(account)\n        const filterTo =  deb0xERC20Contract.filters.Transfer(null, account)\n        deb0xERC20Contract.on(filterFrom, () => {\n            setUnstakedAmount()\n        })\n        deb0xERC20Contract.on(filterTo, () => {\n            setUnstakedAmount()\n        })\n\n        return () => {\n            deb0xERC20Contract.removeAllListeners()\n        }\n    },[])\n\n    async function checkENS(){\n        if(chainId !== 137){\n            var name = await library.lookupAddress(account);\n            if(name !== null)\n            {   \n                setEnsName(name);\n            }\n        }\n       \n    }\n\n    function floorPrecised(number:any) {\n        var power = Math.pow(10, 2);\n        return (Math.floor(parseFloat(number) * power) / power).toString();\n    }\n\n    async function totalAmountStaked() {\n        const deb0xContract = DBXen(library, deb0xAddress)\n        const currentCycle= await deb0xContract.currentStartedCycle()\n        const currentStake = await deb0xContract.summedCycleStakes(currentCycle)\n        const pendingStakeWithdrawal = await deb0xContract.pendingStakeWithdrawal()\n        setTotalStaked(floorPrecised(ethers.utils.formatEther(currentStake.sub(pendingStakeWithdrawal))))\n    }\n\n    async function addToken() {\n        try {\n            const wasAdded = await window.ethereum.request({\n              method: 'wallet_watchAsset',\n              params: {\n                type: 'ERC20',\n                options: {\n                  address: deb0xERC20Address,\n                  symbol: tokenSymbol,\n                  decimals: tokenDecimals,\n                //   image: tokenImage,\n                },\n              },\n            });\n\n            if (wasAdded) {\n                setNotificationState({\n                    message: \"The token was added in your wallet\",\n                    open: true,\n                    severity: \"success\"\n                })      \n                setOpen(false)      \n            }\n            } catch (error: any) {\n                setNotificationState({\n                    message: \"There was an error. Try again later\",\n                    open: true,\n                    severity: \"info\"\n                })\n            }\n    }\n\n    function copyWalletID() {\n        if(account) {\n            navigator.clipboard.writeText(account)\n            setNotificationState({\n                message: \"The address ID was copied successfully\",\n                open: true,\n                severity: \"success\"\n            })\n        }\n        setOpen(false)\n        \n    }\n\n    async function rewardsAccrued() {\n        await deb0xViewsContract.getUnclaimedRewards(account).then((result: any) => \n            setRewardsUnclaimed(floorPrecised(ethers.utils.formatEther(result)))\n        )\n    }\n\n    async function setStakedAmount() {\n        await deb0xViewsContract.getAccWithdrawableStake(account).then((result: any) => \n            setUserStakedAmount(floorPrecised(ethers.utils.formatEther(result)))\n        )\n    }\n\n    const handleClick = (event: any) => {\n        rewardsAccrued();\n        setStakedAmount();\n        setUnstakedAmount();\n        const { currentTarget } = event;\n        setAnchorEl(currentTarget)\n        setOpen(!open)\n      };\n\n    const handleClickAway = () => {\n        setOpen(false)\n    };\n    \n    return (\n        <ClickAwayListener onClickAway={handleClickAway}>\n            <div>\n                <div className=\"app-bar--top\">\n                    <img className=\"logo\" src={logo} alt=\"logo\" />\n                    <Box className=\"main-menu--left\">\n                        <p className=\"mb-0\">Total tokens staked:&nbsp; \n                            {Number(totalStaked).toLocaleString('en-US', {\n                                minimumFractionDigits: 2,\n                                maximumFractionDigits: 2\n                            })} DXN</p>\n                        <p className=\"mb-0\">\n                            Total XEN burned: {totalXENBurned}\n                        </p>\n                    </Box>\n                    <Box className=\"main-menu--right\">\n                    \n                    { (() =>  {\n                        const currentConnector = connectorsByName[ConnectorNames.Injected]\n                        const activating = currentConnector === activatingConnector\n                        const connected = currentConnector === connector\n\n                        return (\n                            <Button variant=\"contained\"\n                                key={ConnectorNames.Injected}\n                                aria-describedby={id}\n                                onClick={!connected ? \n                                    () => {\n                                        setActivatingConnector(currentConnector)\n                                        activate(currentConnector)\n                                    } : \n                                    handleClick\n                                }>\n                                \n                                { activating ? \n                                    <Spinner color={'black'} /> :\n                                    !connected ? \n                                        \"Connect Wallet\" :\n                                        <span>\n                                            {account === undefined ? \n                                                `Unsupported Network. Switch to ${networkName}` : \n                                                account ? \n                                                    ensName === \"\" ? \n                                                        `${formatAccountName(account)}` :\n                                                        `${ensName.toLowerCase()} \n                                                        (${formatAccountName(account)})`\n                                                : ''}\n                                        </span>\n                                }\n                            </Button>\n                        )\n                    }) ()}\n                    </Box>\n                </div>\n                <Popper className={`popper ${theme === \"classic\" ? \"classic\" : \"dark\"}` } id={id} open={open} anchorEl={anchorEl}>\n                    <ul>\n                        <li>\n                            Unclaimed rewards: <br/> \n                            {Number(rewardsUnclaimed).toLocaleString('en-US', {\n                                minimumFractionDigits: 2,\n                                maximumFractionDigits: 2\n                            })} \n                            <span>DXN</span>\n                        </li>\n                        <li>\n                            Active stake: <br/>\n                            {Number(userStakedAmount).toLocaleString('en-US', {\n                                minimumFractionDigits: 2,\n                                maximumFractionDigits: 2\n                            })} \n                            <span>DXN</span>\n                        </li>\n                        <li>\n                            In wallet: <br/> \n                            {Number(userUnstakedAmount).toLocaleString('en-US', {\n                                minimumFractionDigits: 2,\n                                maximumFractionDigits: 2\n                            })} \n                            <span>DXN</span>\n                        </li>\n                    </ul>\n                    <Button \n                        onClick={(event: any) => {\n                            copyWalletID()\n                        }}\n                        className=\"copy-wallet-btn\">\n                        <span><img src={copyIcon} alt=\"copy\" /></span>Copy wallet ID\n                    </Button>\n                    <Button\n                        onClick={(event: any) => {\n                            addToken()\n                        }}\n                        className=\"add-token-btn\">\n                         <span><img src={walletIcon} alt=\"wallet\"/></span>Add token to wallet\n                    </Button>\n                    <Button \n                        onClick={(event: any) => {\n                            handleClick(event)\n                            deactivate()\n                        }}\n                            className=\"logout-btn\">\n                             <span><img src={disconnectIcon} alt=\"disconnect\"/></span>Disconnect wallet\n                    </Button>  \n\n                </Popper>\n            </div>\n        </ClickAwayListener>\n    );\n}\n","import { useState, useEffect } from \"react\";\nimport ThemeContext, { initialThemeState } from \"./ThemeContext\";\n\ntype Props = {\n    children: JSX.Element|JSX.Element[],\n};\n\nconst ThemeProvider = ( { children }: Props ) => {\n  const [theme, setTheme] = useState<any>(initialThemeState.theme);\n\n  const localStorage = window.localStorage;\n\n  useEffect(() => {\n    const savedThemeLocal = localStorage.getItem(\"globalTheme\");\n\n    if (!!savedThemeLocal) {\n      setTheme(savedThemeLocal);\n    }\n  }, [localStorage]);\n\n  useEffect(() => {\n    localStorage.setItem(\"globalTheme\", theme);\n  }, [theme, localStorage]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      <div className={`theme theme--${theme}`}>{children}</div>\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider;\n","export default __webpack_public_path__ + \"static/media/elephant.605d60c2.svg\";","export default __webpack_public_path__ + \"static/media/white_dbxen.8b09777a.svg\";","export default __webpack_public_path__ + \"static/media/elephant.b785cc48.png\";","export default __webpack_public_path__ + \"static/media/empty.efc45323.png\";","export default __webpack_public_path__ + \"static/media/copy-1.6be37e8f.svg\";","export default __webpack_public_path__ + \"static/media/wallet.0d69376a.svg\";","export default __webpack_public_path__ + \"static/media/diconnect.a287fc1c.svg\";","import { useState, useEffect } from 'react';\nimport './App.css';\nimport { \n    Web3ReactProvider,\n    useWeb3React\n} from '@web3-react/core';\nimport { ethers } from \"ethers\";\nimport { useEagerConnect, useInactiveListener } from './hooks'\nimport { PermanentDrawer } from './components/App/PermanentDrawer'\nimport { Stake } from './components/App/Stake';\nimport { Box, Button } from '@mui/material';\nimport ThemeProvider from './components/Contexts/ThemeProvider';\nimport './index.scss';\nimport { injected, network } from './connectors';\nimport elephant from './photos/icons/elephant.svg';\nimport elephantWithText from './photos/icons/elephant.png';\nimport deb0xen from './photos/white_dbxen.svg';\nimport maintenanceImg from './photos/empty.png';\nimport { Spinner } from './components/App/Spinner';\nimport { AppBarComponent } from './components/App/AppBar';\nimport { Burn } from './components/App/Burn';\nimport ScreenSize from './components/Common/ScreenSize';\nimport Countdown, { zeroPad } from \"react-countdown\";\n\nconst maintenance = process.env.REACT_APP_MAINTENANCE_MODE;\n\n\nenum ConnectorNames { Injected = 'Injected', Network = 'Network' };\n\nconst connectorsByName: { [connectorName in ConnectorNames]: any } = {\n  [ConnectorNames.Injected]: injected,\n  [ConnectorNames.Network]: network\n}\n\nfunction getLibrary(provider: any): ethers.providers.Web3Provider {\n  const library = new ethers.providers.Web3Provider(provider)\n\n  library.pollingInterval = 12000\n  return library\n}\n\nexport default function web3App(): any {\n    const date:any = new Date(Date.UTC(2023, 2, 16, 13, 55, 0, 0));\n    const now: any = Date.now()\n    let endDate = date.getTime() - now\n\n  return (\n        <Web3ReactProvider getLibrary={getLibrary}>\n            {/* <Countdown date={Date.now() + endDate} renderer={renderer} /> */}\n            {/* <ContractsDeployed /> */}\n            <App />\n        </Web3ReactProvider>\n    )\n}\n\nconst renderer = ({ hours, minutes, seconds, completed }: any) => {\n    if (completed) {\n      // Render a complete state\n      return <ContractsDeployed />;\n    } else {\n      // Render a countdown\n      return (\n        <ThemeProvider>\n            <div className=\"app-container p-0 \">\n                <div className=\"initial-page contracts\">\n                    <div className=\"row\">\n                        <div className=\"col-12 img-container mr-4\">\n                            <p>DBXen time in:</p>\n                            <p>\n                                {zeroPad(hours)}:{zeroPad(minutes)}:{zeroPad(seconds)}\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ThemeProvider>\n      );\n    }\n};\n\nfunction ContractsDeployed() {\n    return (\n        <ThemeProvider>\n            <div className=\"app-container p-0 \">\n                <div className=\"initial-page contracts\">\n                    <div className=\"row\">\n                        <div className=\"col-12 img-container mr-4\">\n                            <img className=\"image--left\" src={elephantWithText} alt=\"elephant\" />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ThemeProvider>\n    )\n}\n\nfunction App() {\n    const context = useWeb3React<ethers.providers.Web3Provider>()\n    const { connector, account, activate } = context\n    const [selectedIndex, setSelectedIndex] = useState<any>(0);\n    // handle logic to recognize the connector currently being activated\n    const [activatingConnector, setActivatingConnector] = useState<any>()\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const [networkName, setNetworkName] = useState<any>();\n    let errorMsg;\n    const dimensions = ScreenSize();\n    \n    useEffect(() => {\n        injected.supportedChainIds?.forEach(chainId => \n            setNetworkName((ethers.providers.getNetwork(chainId).name)));\n        if (activatingConnector && activatingConnector === connector) {\n            setActivatingConnector(undefined)\n        }\n    }, [activatingConnector, connector])\n\n    // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n    const triedEager = useEagerConnect()\n\n    // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n    useInactiveListener(!triedEager || !!activatingConnector)\n\n    function handleClick (event: React.MouseEvent<HTMLElement>) {\n        setAnchorEl(anchorEl ? null : event.currentTarget);\n    };\n\n    useEffect(() => {   \n        window.ethereum ?\n            window.ethereum.request({method: \"eth_requestAccounts\"}).then(() => {\n                switchNetwork();               \n            }).catch((err: any) => displayErrorMsg(err))\n            : displayErrorMsg(\"Please install MetaMask\")\n        }, [])\n\n    async function switchNetwork() {\n        try {\n            await window.ethereum.request({\n            method: 'wallet_switchEthereumChain',\n            params: [{ chainId: \"0x89\"}],\n            }).then(\n                displayErrorMsg(\"You have switched to the right network\")\n            );            \n        } catch (switchError) {\n            try {\n                await window.ethereum.request({\n                method: 'wallet_addEthereumChain',\n                params: [\n                    {\n                        chainId: '0x89', \n                        chainName:'Polygon Network',\n                        rpcUrls:['https://rpc-mainnet.maticvigil.com'],                   \n                        blockExplorerUrls:['https://polygonscan.com/'],  \n                        nativeCurrency: { \n                        symbol:'Matic',   \n                        decimals: 18\n                        }       \n                    }\n                    ]});\n            } catch (err) {\n                displayErrorMsg(\"Cannot switch to the network\");\n            }\n        }\n        \n    }\n\n    function displayErrorMsg(error: string) {\n        errorMsg = error;\n        return errorMsg;\n    }\n    \n    return (\n\n    <>\n    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        {!!errorMsg &&\n            <p className='alert alert-danger position-fixed' style={{ marginTop: '4rem', marginBottom: '0' }}>\n                {displayErrorMsg(errorMsg)}\n            </p>\n        }\n    </div>\n        <ThemeProvider>\n        { account ? \n            <div className=\"app-container container-fluid\">\n                { maintenance === \"true\" ?\n                    <div className=\"row main-row maintenance-mode\">\n                        <img className=\"maintenance-img\" src={maintenanceImg} alt=\"maintenance\" />\n                        <h1>Maintenance Mode</h1>\n                        <h4>We're tightening some nuts and bolts round the back. We'll be back up and running soon.</h4>\n                    </div> :\n                    <div className=\"row main-row\">\n                        <div className=\"col col-lg-3 col-12 p-0 side-menu-container\">\n                            <PermanentDrawer />\n                        </div>\n                        <div className=\"col col-lg-9 col-12\">\n                            <AppBarComponent />\n                            \n                            <Box className=\"main-container\" sx={{marginTop: 12}}>\n                            {dimensions.width > 768 ? \n                                <Stake /> :\n                                <>\n                                    {selectedIndex === 0 && <Burn /> }\n                                    {selectedIndex === 1 && <Stake /> }\n                                </>\n                            }\n                            </Box>\n                        </div>\n                    </div>\n                }\n                <div className=\"navigation-mobile\">\n                    <div className={`navigation-item ${selectedIndex === 0 ? \"active\" : \"\"}`}\n                        onClick={() => setSelectedIndex(0)}>\n                            Mint\n                    </div>\n                    <div className={`navigation-item ${selectedIndex === 1 ? \"active\" : \"\"}`}\n                        onClick={() => setSelectedIndex(1)}>\n                            Fees\n                    </div>\n                </div>\n            </div> :\n            <div className=\"app-container p-0 \">\n                <div className=\"initial-page\">\n                    <div className=\"row\">\n                        <div className=\"col-lg-7 img-container mr-4\">\n                            <img className=\"image--left\" src={elephant} alt=\"elephant\" />\n                            <div className=\"img-content\">\n                                <p>Connect your wallet</p>\n                                <p>Burn $XEN</p>\n                                <p>Earn crypto</p>\n                                  \n                                <div>\n                                    { (() =>  {\n                                        const currentConnector = connectorsByName[ConnectorNames.Injected]\n                                        const activating = currentConnector === activatingConnector\n                                        const connected = currentConnector === connector\n\n                                        return (\n                                            <Button variant=\"contained\"\n                                                key={ConnectorNames.Injected}\n                                                // aria-describedby={id}\n                                                onClick={!connected ? \n                                                    () => {\n                                                        setActivatingConnector(currentConnector)\n                                                        activate(currentConnector)\n                                                    } : \n                                                    handleClick}\n                                                    className=\"connect-button\">\n                                                \n                                                { activating ? \n                                                    <Spinner color={'black'} /> :\n                                                    !connected ? \n                                                        \"Connect\" :\n                                                        <span>\n                                                            {typeof window.ethereum === 'undefined' ? \n                                                                `Check your prerequisites` : \n                                                                account === undefined ? `Unsupported Network. Switch to ${networkName}` : ''}\n                                                        </span>\n                                                }\n                                            </Button>\n                                        )\n                                    }) ()}\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"col-12 col-lg-5 text-center\">\n                            <div className=\"text-container\">\n                                <img className=\"dark-logo\" src={deb0xen} alt=\"logo\" />\n                                <p>\n                                    Community built crypto protocol <br/> contributing to XEN deflation\n                                </p>\n                                <div className=\"connect-mobile\">\n                                    { (() =>  {\n                                        const currentConnector = connectorsByName[ConnectorNames.Injected]\n                                        const activating = currentConnector === activatingConnector\n                                        const connected = currentConnector === connector\n\n                                        return (\n                                            <Button variant=\"contained\"\n                                                key={ConnectorNames.Injected}\n                                                // aria-describedby={id}\n                                                onClick={!connected ? \n                                                    () => {\n                                                        setActivatingConnector(currentConnector)\n                                                        activate(currentConnector)\n                                                    } : \n                                                    handleClick}\n                                                    className=\"connect-button\">\n                                                \n                                                { activating ? \n                                                    <Spinner color={'black'} /> :\n                                                    !connected ? \n                                                        \"Connect\" :\n                                                        <span>\n                                                            {typeof window.ethereum === 'undefined' ? \n                                                                `Check your prerequisites` : \n                                                                account === undefined ? `Unsupported Network. Switch to ${networkName}` : ''}\n                                                        </span>\n                                                }\n                                            </Button>\n                                        )\n                                    }) ()}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        }\n        </ThemeProvider>\n    </>\n  )\n}\n\n\n","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\n\nimport { injected } from './connectors'\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        setTried(true)\n      }\n    })\n  }, [activate]) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport function useInactiveListener(suppress: boolean = false) {\n  const { active, error, activate } = useWeb3React()\n\n  useEffect((): any => {\n    const { ethereum } = window as any\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        activate(injected)\n      }\n      const handleChainChanged = (chainId: string | number) => {\n        activate(injected)\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        if (accounts.length > 0) {\n          activate(injected)\n        }\n      }\n      const handleNetworkChanged = (networkId: string | number) => {\n        activate(injected)\n      }\n\n      ethereum.on('connect', handleConnect)\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n      ethereum.on('networkChanged', handleNetworkChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('connect', handleConnect)\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n          ethereum.removeListener('networkChanged', handleNetworkChanged)\n        }\n      }\n    }\n  }, [active, error, suppress, activate])\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}