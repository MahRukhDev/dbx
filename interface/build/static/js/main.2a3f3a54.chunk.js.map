{"version":3,"sources":["connectors.ts","components/Common/ScreenSize.tsx","components/App/Snackbar.tsx","photos/icons/file-icon.svg","ethereum/XENCrypto.js","ethereum/dbxen.js","components/App/Spinner.tsx","components/Contexts/ChainContext.tsx","components/App/Burn.tsx","components/Common/AccountName.tsx","components/App/PermanentDrawer.tsx","ethereum/dbxenViews.js","ethereum/dbxenerc20.js","photos/icons/coin-bag-solid--light.svg","photos/icons/token.svg","photos/icons/coin-bag-solid--dark.svg","photos/icons/wallet--light.svg","photos/icons/wallet--dark.svg","photos/icons/fees.svg","photos/icons/finance.svg","ethereum/signer.js","ethereum/forwarder.js","components/App/Stake.tsx","components/Common/GaEventTracker.tsx","components/Contexts/ThemeContext.tsx","components/Contexts/ThemeProvider.tsx","photos/icons/elephant.svg","photos/white_dbxen.svg","photos/icons/elephant.png","photos/empty.png","photos/icons/copy-1.svg","photos/icons/wallet.svg","photos/icons/diconnect.svg","components/DropdownLanguage.tsx","components/Contexts/ChainProvider.tsx","photos/icons/polygon.svg","photos/icons/avalanche.svg","components/Contexts/ChainSetter.tsx","components/App/AppBar.tsx","App.tsx","hooks.ts","reportWebVitals.ts","i18n.js","index.tsx"],"names":["RPC_URLS","injected","InjectedConnector","supportedChainIds","network","NetworkConnector","urls","defaultChainId","useWindowSize","useState","width","height","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","Alert","forwardRef","props","ref","elevation","variant","SnackbarNotification","severity","state","open","message","setState","handleClose","event","reason","Snackbar","autoHideDuration","onClose","sx","abi","require","signerOrProvider","address","ethers","Contract","Spinner","color","rest","viewBox","xmlns","stroke","fill","fillRule","transform","strokeWidth","strokeOpacity","cx","cy","r","d","attributeName","type","from","to","dur","repeatCount","initialChain","chain","deb0xAddress","deb0xViewsAddress","deb0xERC20Address","xenCryptoAddress","chainId","chainName","currency","setChain","_value","ChainContext","createContext","BigNumber","Burn","context","useWeb3React","library","account","notificationState","setNotificationState","value","setValue","approveBurn","setApproveBurn","balanceGratherThanZero","checkBalance","maticValue","setMaticValue","totalCost","setTotalCost","totalAmountOfXEN","setXENAmount","loading","setLoading","gasLimit","setCurrentGasLimit","valueAndFee","setValueAndFee","totalBatchApproved","setBatchApproved","maxAvailableBatch","setMaxBatch","useContext","t","useTranslation","getAllowanceForAccount","signer","getSigner","xenContract","XENCrypto","allowance","then","amount","batchApproved","Number","utils","formatEther","Math","trunc","setBalance","balanceOf","balance","number","toString","estimationValues","priceURL","options","method","url","port","headers","data","JSON","stringify","deb0xContract","DBXen","getCurrentCycle","currentCycle","cycleTotalBatchesBurned","numberBatchesBurnedInCurrentCycle","axios","request","result","price","web3","fromWei","protocol_fee","gasLimitVal","fee","totalValue","toFixed","total","amountToApprove","undefined","increaseAllowance","parseEther","wait","catch","error","gasLimitIntervalValue","currentValue","overrides","parseUnits","tx","console","log","setTimeout","className","max","onChange","e","target","onClick","toLocaleString","minimumFractionDigits","maximumFractionDigits","LoadingButton","loadingPosition","disabled","burnXEN","setApproval","formatAccountName","substring","length","PermanentDrawer","connector","activatingConnector","setActivatingConnector","dimensions","ScreenSize","setNetworkName","baseUrl","setBaseUrl","forEach","providers","getNetwork","name","Box","display","Drawer","anchor","href","icon","faTwitter","size","src","document","faGithub","faTelegram","ethSigUtil","ethereumJsUtil","typeName","typeHash","id","EIP712Domain","ForwardRequest","getMetaTxTypeData","verifyingContract","types","domain","version","primaryType","signTypedData","argData","send","buildRequest","forwarder","input","valueParam","getNonce","nonce","gas","validUntilTime","buildTypedData","provider","n","typeData","getDomainSeparator","bufferToHex","TypedDataUtils","hashStruct","signMetaTxRequest","toSign","signature","domainSeparator","createInstance","whitelist","dataFromWhitelist","Stake","category","activate","gaEventTracker","action","ReactGA","setPreviousCycleXENBurned","datePolygon","Date","UTC","dateAvalance","now","endDatePolygon","getTime","endDateAvalance","renderer","hours","minutes","seconds","completed","zeroPad","FeesPanel","feesUnclaimed","setFeesUnclaimed","getTotalXenBurnedInPreviusCycle","toNumber","deb0xViewsContract","DBXenViews","getUnclaimedFees","fetchClaimFeesResult","fetch","body","response","json","parse","status","sendClaimFeesTx","claimFees","getAddress","includes","interface","encodeFunctionData","feesAccrued","totalXenBurnedPreviousCycle","Card","CardContent","Typography","component","date","fees","alt","CardActions","CyclePanel","currentReward","setCurrentReward","ethereum","currentCycleReward","getChainId","cycleReward","RewardsPanel","rewardsUnclaimed","setRewardsUnclaimed","feeSharePercentage","setFeeSharePercentage","getUnclaimedRewards","unclaimedRewards","getAccWithdrawableStake","accWithdrawableStake","parseFloat","add","currentStartedCycle","summedCycleStakes","totalSupply","feeShare","round","fetchClaimRewardsResult","sendClaimRewardsTx","claimRewards","rewardsAccrued","finance","StakeUnstake","alignment","setAlignment","userStakedAmount","setUserStakedAmount","userUnstakedAmount","setUserUnstakedAmount","tokensForUnstake","setTokenForUnstake","totalStaked","setTotalStaked","amountToUnstake","setAmountToUnstake","amountToStake","setAmountToStake","approved","setApproved","localStorage","getItem","theme","setTheme","accFirstStake","firstStakeCycle","accSecondStake","secondStakeCycle","accStakeCycle","firstStakeCycleAmount","secondStakeCycleAmount","withdawbleStake","totalStakedAmount","setTokensForUntakedAmount","DBXenERC20","deb0xERC20Contract","slice","indexOf","approve","fetchUnstakeResult","sendUnstakeTx","unstake","fetchStakeResult","sendStakeTx","stake","tokensInWallet","setStakedAmount","totalAmountStaked","setUnstakedAmount","ToggleButtonGroup","exclusive","newAlignment","ToggleButton","coinBagDark","coinBagLight","walletDark","walletLight","Grid","container","item","OutlinedInput","placeholder","inputProps","min","Button","initialThemeState","ThemeContext","ThemeProvider","children","savedThemeLocal","setItem","Provider","DropdownLanguage","i18n","language","setLanguage","anchorEl","setAnchorEl","setOpen","handleLangChange","lang","changeLanguage","onClickAway","currentTarget","Popper","ChainProvider","parseInt","networks","polygon","nativeCurrency","symbol","decimals","rpcUrls","blockExplorerUrls","avalanche","ChainSetter","on","networkChanged","removeListener","changeNetwork","networkName","setError","Error","params","handleNetworkSwitch","location","reload","ClickAwayListener","charAt","toUpperCase","ConnectorNames","tokenSymbol","connectorsByName","Injected","AppBarComponent","deactivate","ensName","totalXENBurned","setTotalXENBurned","xenBurned","getTotalXenBurned","totalNumberOfBatchesBurned","batchBurned","floorPrecised","power","pow","floor","currentStake","pendingStakeWithdrawal","sub","filterFrom","filters","Transfer","filterTo","removeAllListeners","handleClick","logo","currentConnector","activating","connected","toLowerCase","navigator","clipboard","writeText","copyIcon","addToken","walletIcon","disconnectIcon","maintenance","process","REACT_APP_MAINTENANCE_MODE","Network","getLibrary","Web3Provider","pollingInterval","web3App","App","errorMsg","selectedIndex","setSelectedIndex","triedEager","active","tried","setTried","isAuthorized","useEagerConnect","displayErrorMsg","suppress","handleConnect","handleChainChanged","handleAccountsChanged","accounts","handleNetworkChanged","networkId","useInactiveListener","err","style","flexDirection","alignItems","marginTop","marginBottom","maintenanceImg","elephant","deb0xen","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","use","Backend","initReactI18next","init","lng","fallbackLng","interpolation","escapeValue","react","useSuspense","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2a3f3a54.chunk.js","sourcesContent":["\nimport { InjectedConnector } from '@web3-react/injected-connector'\nimport { NetworkConnector } from '@web3-react/network-connector'\n\n// const POLLING_INTERVAL = 12000\nconst RPC_URLS: { [chainId: number]: string } = {\n    137: 'https://polygon-mainnet.infura.io/v3/6010818c577b4531b1886965421a91d3',\n    43114: 'https://avalanche-mainnet.infura.io/v3/6010818c577b4531b1886965421a91d3'\n}\n\nexport const injected = new InjectedConnector({ supportedChainIds: [137, 43114 ] })\n\nexport const network = new NetworkConnector({\n    urls: { 137: RPC_URLS[137], 43114: RPC_URLS[43114] },\n    defaultChainId: 137\n})","import React, { useState, useEffect } from 'react'\n\nexport default function useWindowSize() {\n    // Initialize state with undefined width/height so server and client renders match\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n    const [windowSize, setWindowSize] = useState({\n      width: 0,\n      height: 0,\n    });\n    useEffect(() => {\n      // Handler to call on window resize\n      function handleResize() {\n        // Set window width/height to state\n        setWindowSize({\n          width: window.innerWidth,\n          height: window.innerHeight,\n        });\n      }\n      // Add event listener\n      window.addEventListener(\"resize\", handleResize);\n      // Call handler right away so state gets updated with initial window size\n      handleResize();\n      // Remove event listener on cleanup\n      return () => window.removeEventListener(\"resize\", handleResize);\n    }, []); // Empty array ensures that effect is only run on mount\n    return windowSize;\n  }","import { useState, forwardRef, useEffect } from 'react'\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\nconst Alert = forwardRef<HTMLDivElement, AlertProps>(function Alert(\n  props,\n  ref,\n) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport default function SnackbarNotification(props: any) {\n\n  const [state, setState] = useState({ severity: props.state.severity, open: props.state.open, message: props.state.message })\n\n  useEffect(() => {\n    setState({severity: props.state.severity, open: props.state.open, message: props.state.message})\n  }, [props])\n\n  const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setState({\n      message: state.message, open: false,\n      severity: state.severity\n    })\n  };\n\n  return (\n    <Snackbar open={state.open} autoHideDuration={6000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity={state.severity} sx={{ width: '100%' }}>\n        {state.message}\n      </Alert>\n    </Snackbar>\n  )\n}","export default __webpack_public_path__ + \"static/media/file-icon.92106822.svg\";","import { ethers } from \"ethers\";\n\nconst { abi } = require(\"./XENCrypto.json\");\n\nexport default (signerOrProvider, address) => {\n    return new ethers.Contract(address, abi, signerOrProvider);\n}","import { ethers } from \"ethers\";\n\nconst { abi } = require(\"./DBXen.json\");\n\nexport default (signerOrProvider, address) => {\n  return new ethers.Contract(address, abi, signerOrProvider);\n}","// <!-- By Sam Herbert (@sherb), for everyone. More @ http://goo.gl/7AJzbL -->\nexport function Spinner({ color, ...rest }: any) {\n    return (\n        <svg width=\"38\" height=\"38\" viewBox=\"0 0 38 38\" \n            xmlns=\"http://www.w3.org/2000/svg\" stroke={color} {...rest}>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <g transform=\"translate(1 1)\" strokeWidth=\"2\">\n                    <circle strokeOpacity=\".5\" cx=\"18\" cy=\"18\" r=\"18\" />\n                    <path d=\"M36 18c0-9.94-8.06-18-18-18\">\n                    <animateTransform\n                        attributeName=\"transform\"\n                        type=\"rotate\"\n                        from=\"0 18 18\"\n                        to=\"360 18 18\"\n                        dur=\"1s\"\n                        repeatCount=\"indefinite\" />\n                    </path>\n                </g>\n            </g>\n        </svg>\n    )\n}","import { createContext } from \"react\";\n\nexport const initialChain = {\n    chain: {\n        deb0xAddress: \"0x4F3ce26D9749C0f36012C9AbB41BF9938476c462\",\n        deb0xViewsAddress: \"0xE8696A871C5eaB13bA566A4C15b8144AFeEAFfbA\",\n        deb0xERC20Address: \"0x47DD60FA40A050c0677dE19921Eb4cc512947729\",\n        xenCryptoAddress: \"0x2AB0e9e4eE70FFf1fB9D67031E44F6410170d00e\",\n        chainId: \"137\",\n        chainName: \"polygon\",\n        currency: \"MATIC\"\n    },\n    setChain: (_value: any) => {}\n}\n\nconst ChainContext = createContext(initialChain);\nexport default ChainContext;","import { useState, useEffect, useContext } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport XENCrypto from '../../ethereum/XENCrypto';\nimport DBXen from \"../../ethereum/dbxen\"\nimport { ethers } from \"ethers\";\nimport \"../../componentsStyling/permanentDrawer.scss\";\nimport SnackbarNotification from './Snackbar';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport { Spinner } from './Spinner';\nimport axios, { Method } from 'axios';\nimport web3 from 'web3';\nimport ChainContext from '../Contexts/ChainContext';\nimport { useTranslation } from \"react-i18next\";\nconst { BigNumber } = require(\"ethers\");\n\nexport function Burn(): any {\n    const context = useWeb3React()\n    const { library, account } = context\n    const [notificationState, setNotificationState] = useState({});\n    const [value, setValue] = useState(1);\n    const [approveBurn, setApproveBurn] = useState<boolean>(false);\n    const [balanceGratherThanZero, checkBalance] = useState(\"\");\n    const [maticValue, setMaticValue] = useState<any>();\n    const [totalCost, setTotalCost] = useState<any>();\n    const [totalAmountOfXEN, setXENAmount] = useState<any>();\n    const [loading, setLoading] = useState(false)\n    const [gasLimit, setCurrentGasLimit] = useState<number>();\n    const [valueAndFee, setValueAndFee] = useState<any>();\n    const [totalBatchApproved, setBatchApproved] = useState<number>();\n    const [maxAvailableBatch, setMaxBatch] = useState<number>(0);\n    const { chain }  = useContext(ChainContext)\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        getAllowanceForAccount();\n        estimationValues();\n    }, [account]);\n\n    useEffect(() => {\n    }, [chain.deb0xAddress]);\n\n    useEffect(() => {\n        getAllowanceForAccount();\n        setXENAmount(value * 2500000);\n        estimationValues();\n        setBalance();\n    }, [value]);\n\n    useEffect(() => {\n        setBalance()\n    }, [account, balanceGratherThanZero]);\n\n    async function getAllowanceForAccount() {\n        const signer = library.getSigner(0)\n        const xenContract = XENCrypto(signer, chain.xenCryptoAddress);\n        await xenContract.allowance(account, chain.deb0xAddress).then((amount: any) =>{\n            let batchApproved = Number(ethers.utils.formatEther(amount)) / 2500000;\n            setBatchApproved(Math.trunc(batchApproved));\n            Number(ethers.utils.formatEther(amount)) < value * 2500000 ?\n                setApproveBurn(false) :\n                setApproveBurn(true)\n                setBalance();\n            })\n   \n    }\n\n    async function setBalance() {\n        setLoading(true);\n        const signer = library.getSigner(0)\n        const xenContract = XENCrypto(signer, chain.xenCryptoAddress);\n        let number;\n\n        await xenContract.balanceOf(account).then((balance: any) => {\n            number = ethers.utils.formatEther(balance);\n            setMaxBatch(Math.trunc(Number(number)/2500000))\n            checkBalance(number.toString())\n            setLoading(false);\n        })\n    }\n\n    async function estimationValues() {\n        let priceURL = \"\";\n        (Number(chain.chainId)) === 137 ?\n            priceURL = \"https://polygon-mainnet.infura.io/v3/6010818c577b4531b1886965421a91d3\" :\n            priceURL = \"https://avalanche-mainnet.infura.io/v3/6010818c577b4531b1886965421a91d3\"\n\n        let method: Method = 'POST';\n        const options = {\n            method: method,\n            url: priceURL,\n            port: 443,\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            data: JSON.stringify({\n                \"jsonrpc\": \"2.0\", \"method\": \"eth_gasPrice\", \"params\": [], \"id\": 1\n            })\n        };\n\n        const signer = library.getSigner(0)\n        const deb0xContract = DBXen(signer, chain.deb0xAddress)\n        await deb0xContract.getCurrentCycle().then(async (currentCycle: any) => {\n            await deb0xContract.cycleTotalBatchesBurned(currentCycle).then(\n                async (numberBatchesBurnedInCurrentCycle: any) => {\n                    await axios.request(options).then((result) => {\n                        let price = Number(web3.utils.fromWei(result.data.result.toString(), \"Gwei\"));\n                        let protocol_fee = value * (1 - 0.00005 * value);\n                        let gasLimitVal = 0;\n                        (Number(chain.chainId)) === 137 ?\n                        numberBatchesBurnedInCurrentCycle != 0 ?\n                            gasLimitVal = (BigNumber.from(\"350000\")) :\n                            gasLimitVal = (BigNumber.from(\"500000\"))\n                        :\n                        numberBatchesBurnedInCurrentCycle != 0 ?\n                        gasLimitVal = (BigNumber.from(\"500000\")) :\n                        gasLimitVal = (BigNumber.from(\"700000\"))\n                        setCurrentGasLimit(gasLimitVal);\n                        let fee = gasLimitVal * price * protocol_fee / 1000000000;\n                        let totalValue = fee + (fee / ((1 - 0.00005 * value) * value));\n\n                        setValueAndFee({ fee: fee.toFixed(4), total: totalValue.toFixed(4) })\n                        setMaticValue(fee.toFixed(4));\n                        setTotalCost(totalValue.toFixed(4));\n                    })\n                }\n            )\n        })\n    }\n\n    async function setApproval() {\n        setLoading(true);\n        const signer = library.getSigner(0)\n        const xenContract = XENCrypto(signer, chain.xenCryptoAddress)\n        let amountToApprove = 0;\n            if(totalBatchApproved != undefined){\n                if(value > totalBatchApproved){\n                    amountToApprove = value - totalBatchApproved;\n                }\n            }\n        try {\n            const tx = await xenContract.increaseAllowance(chain.deb0xAddress, ethers.utils.parseEther(Number(amountToApprove*2500000).toString()))\n            tx.wait()\n                .then((result: any) => {\n                    getAllowanceForAccount();\n                    setNotificationState({\n                        message: \"Your succesfully approved contract for burn.\", open: true,\n                        severity: \"success\"\n                    })\n                    setLoading(false)\n                })\n                .catch((error: any) => {\n                    setNotificationState({\n                        message: \"Contract couldn't be approved for burn!\", open: true,\n                        severity: \"error\"\n                    })\n                    setLoading(false)\n                })\n        } catch (error) {\n            setNotificationState({\n                message: \"You rejected the transaction. Contract hasn't been approved for burn.\", open: true,\n                severity: \"info\"\n            })\n            setLoading(false)\n        }\n    }\n\n    async function burnXEN() {\n        setLoading(true)\n        const signer = await library.getSigner(0)\n        const deb0xContract = DBXen(signer, chain.deb0xAddress)\n        let gasLimitIntervalValue = gasLimit\n        let currentValue = valueAndFee.fee;\n  \n        try {\n            const overrides =\n            {\n                value: ethers.utils.parseUnits(currentValue.toString(), \"ether\"),\n                gasLimit: gasLimitIntervalValue\n            }\n            const tx = await deb0xContract[\"burnBatch(uint256)\"](value, overrides)\n\n            await tx.wait()\n                .then((result: any) => {\n                    setNotificationState({\n                        message: \"Burn completed\",\n                        open: true,\n                        severity: \"success\"\n                    })\n                    getAllowanceForAccount();\n                    setLoading(false)\n                })\n                .catch((error: any) => {\n                    setNotificationState({\n                        message: \"Something went wrong!\",\n                        open: true,\n                        severity: \"error\"\n                    })\n                    setLoading(false)\n                })\n        } catch (error: any) {\n            console.log(error.message)\n            setNotificationState({\n                message: \"You rejected the transaction.\",\n                open: true,\n                severity: \"info\"\n            })\n            setLoading(false)\n        }\n    }\n\n    useEffect(() => {\n        setTimeout(() => { setNotificationState({}) }, 2000)\n    }, [notificationState])\n\n    const handleInputChange = (e: any) => {\n        if (value > 10000) {\n            setValue(10000)\n        } else {\n            setValue(e.target.value);\n        }\n    }\n\n    const incNum = () => {\n        if (value < 10000)\n            setValue(Number(value) + 1);\n    };\n\n    const decNum = () => {\n        if (value > 1)\n            setValue(value - 1);\n    }\n\n    useEffect(() => {\n        if (value > 10000) {\n            setValue(10000)\n        }\n        if (value <= 0) {\n            setValue(1)\n        }\n    }, [value])\n\n    return (\n        <>\n            <SnackbarNotification state={notificationState}\n                setNotificationState={setNotificationState} />\n            <div className=\"side-menu--bottom burn-container\">\n                <div className=\"row\">\n                    <p className=\"text-center mb-0\">{t(\"burn.label\")}</p>\n                    <p className=\"text-center\">(1 batch = 2,500,000 XEN)</p>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col input-col\">\n                        <input type=\"number\" value={value} max=\"10000\" onChange={handleInputChange} />\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <button className=\"btn count-btn col\" type=\"button\" onClick={decNum}>-</button>\n                    <button className=\"btn count-btn col\" type=\"button\" onClick={incNum}>+</button>\n                </div>\n                <div className=\"row\">\n                    <button className=\"btn count-btn max-btn col\" type=\"button\"\n                        onClick={() => setValue(10000)}>{t(\"burn.max\")}</button>\n                </div>\n                <div className=\"values-container\">\n                    <div className=\"value-content\">\n                        <p>{t(\"burn.protocol_fee\")}:</p>\n                        <p> ~{maticValue} {chain.currency}</p>\n                    </div>\n                    <div className=\"value-content\">\n                        <p>{t(\"burn.transaction_cost\")}:</p>\n                        <p> ~{totalCost} {chain.currency}</p>\n                    </div>\n                    <div className=\"value-content\">\n                        <p>{t(\"burn.xen_burned\")}:</p>\n                        <p>\n                            {Number(totalAmountOfXEN).toLocaleString('en-US', {\n                                minimumFractionDigits: 2,\n                                maximumFractionDigits: 2\n                            })} XEN</p>\n                    </div>\n                </div>\n                {approveBurn ?\n                maxAvailableBatch < value ?\n                    <LoadingButton className=\"burn-btn\"\n                    loadingPosition=\"end\"\n                    disabled={true}>\n                    {loading ? <Spinner color={'black'} /> : \"Insufficient XEN balance\"}\n                </LoadingButton> :\n                    <LoadingButton className=\"burn-btn\"\n                        loadingPosition=\"end\"\n                        onClick={() => burnXEN()} >\n                        {loading ? <Spinner color={'black'} /> : t(\"burn.burn_button\")}\n                    </LoadingButton> :\n                    balanceGratherThanZero === '0.0' || balanceGratherThanZero === '0' ?\n                        <LoadingButton className=\"burn-btn\"\n                            loadingPosition=\"end\"\n                            disabled={balanceGratherThanZero === '0.0' || balanceGratherThanZero === '0'}>\n                            {loading ? <Spinner color={'black'} /> : t(\"burn.balance\")}\n                        </LoadingButton> :\n                        <LoadingButton className=\"burn-btn\"\n                            loadingPosition=\"end\"\n                            disabled={balanceGratherThanZero === '0.0' || balanceGratherThanZero === '0'}\n                            onClick={() => setApproval()} >\n                            {loading ? <Spinner color={'black'} /> : t(\"burn.approve_button\")}\n                        </LoadingButton>\n                }\n            </div>\n        </>\n    )\n}\n","export default function formatAccountName(account: string)\n{   \n    return `${account.substring(0, 5)}...${account.substring(account.length - 4)}`\n}","import React, { useState, useEffect, useContext, useDebugValue } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport Box from '@mui/material/Box';\nimport Drawer from '@mui/material/Drawer';\nimport { injected } from '../../connectors';\nimport XENCrypto from '../../ethereum/XENCrypto';\nimport DBXen from \"../../ethereum/dbxen\"\nimport { ethers } from \"ethers\";\nimport \"../../componentsStyling/permanentDrawer.scss\";\nimport ScreenSize from '../Common/ScreenSize';\nimport SnackbarNotification from './Snackbar';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport { Spinner } from './Spinner';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter, faGithub, faTelegram } from \"@fortawesome/free-brands-svg-icons\";\nimport document from \"../../photos/icons/file-icon.svg\";\nimport axios, { Method } from 'axios';\nimport web3 from 'web3';\nimport { Burn } from './Burn';\nimport formatAccountName from '../Common/AccountName';\nimport ChainContext from '../Contexts/ChainContext';\nimport ChainSetter from '../Contexts/ChainSetter';\n\ndeclare global {\n    interface Window {\n        ethereum: any;\n    }\n}\n\nexport function PermanentDrawer(props: any): any {\n    const context = useWeb3React()\n    const { connector } = context\n    const [activatingConnector, setActivatingConnector] = useState<any>()\n    const dimensions = ScreenSize();\n    const [notificationState, setNotificationState] = useState({});\n    const [networkName, setNetworkName] = useState<any>();\n    const { chain } = useContext(ChainContext);\n    const [baseUrl, setBaseUrl] = useState(\"\");\n\n    useEffect(() => {\n        injected.supportedChainIds?.forEach(chainId =>\n            setNetworkName((ethers.providers.getNetwork(chainId).name)));\n        if (activatingConnector && activatingConnector === connector) {\n            setActivatingConnector(undefined)\n        }\n    }, [activatingConnector, connector])\n\n    useEffect(() => {\n        Number(chain.chainId) === 137 ?\n            setBaseUrl(\"https://polygonscan.com/address/\") :\n            setBaseUrl(\"https://snowtrace.io/address/\")\n    }, [])\n\n    useEffect(() => {\n        setTimeout(() => { setNotificationState({}) }, 2000)\n    }, [notificationState])\n    return (\n        <>\n            <SnackbarNotification state={notificationState}\n                setNotificationState={setNotificationState} />\n            {dimensions.width > 768 ?\n                <Box className=\"side-menu-box\" sx={{ display: 'flex' }}>\n                    <Drawer variant=\"permanent\"\n                        anchor='left'\n                        className=\"side-menu\">\n                        <div className=\"image-container\">\n                            <div className=\"img\"></div>\n                        </div>\n                        <Burn />\n                        <div className=\"content\">\n                            <div className=\"social-media\">\n                                <a href=\"https://twitter.com/DBXen_crypto\" target=\"_blank\" className=\"logo-text-color\">\n                                    <FontAwesomeIcon icon={faTwitter} size=\"xl\" />\n                                </a>\n                                <a href=\"https://dbxen.gitbook.io/dbxen-litepaper/\" target=\"_blank\" className=\"logo-text-color\">\n                                    <img src={document} />\n                                </a>\n                                <a href=\"https://github.com/deb0x/dbXenBurnerProject\" target=\"_blank\" className=\"logo-text-color\">\n                                    <FontAwesomeIcon icon={faGithub} size=\"xl\" />\n                                </a>\n                                <a href=\"https://t.me/+_Q3prZI35gJkZmI0\" target=\"_blank\" className=\"logo-text-color\">\n                                    <FontAwesomeIcon icon={faTelegram} size=\"xl\" />\n                                </a>\n                            </div>\n                            <div className=\"contracts\">\n                                <div className=\"row\">\n                                    <span className=\"col-6\">DBXen: </span>\n                                    <a className=\"col-6\" target=\"_blank\"\n                                        href={baseUrl+chain.deb0xAddress}>\n                                        {formatAccountName(chain.deb0xAddress)}\n                                    </a>\n                                </div>\n                                <div className=\"row\">\n                                    <span className=\"col-6\">DBXenERC20: </span>\n                                    <a className=\"col-6\" target=\"_blank\"\n                                        href={baseUrl+chain.deb0xERC20Address}>\n                                        {formatAccountName(chain.deb0xERC20Address)}\n                                    </a>\n                                </div>\n                                <div className=\"row\">\n                                    <span className=\"col-6\">DBXenViews:</span>\n                                    <a className=\"col-6\" target=\"_blank\"\n                                        href={baseUrl+chain.deb0xViewsAddress}>\n                                        {formatAccountName(chain.deb0xViewsAddress)}\n                                    </a>\n                                </div>\n                            </div>\n                        </div>\n                    </Drawer>\n                </Box> : <></>\n            }\n\n        </>\n    );\n}","import { ethers } from \"ethers\";\n\nconst { abi } = require(\"./DBXenViews.json\");\n\nexport default (signerOrProvider, address) => {\n    return new ethers.Contract(address, abi, signerOrProvider);\n}","import { ethers } from \"ethers\";\n\nconst { abi } = require(\"./DBXenERC20.json\");\n\nexport default (signerOrProvider, address) => {\n    return new ethers.Contract(address, abi, signerOrProvider);\n}\n","export default __webpack_public_path__ + \"static/media/coin-bag-solid--light.d9344235.svg\";","export default __webpack_public_path__ + \"static/media/token.0bd78e9a.svg\";","export default __webpack_public_path__ + \"static/media/coin-bag-solid--dark.b9b74873.svg\";","export default __webpack_public_path__ + \"static/media/wallet--light.60fbc32b.svg\";","export default __webpack_public_path__ + \"static/media/wallet--dark.307c5384.svg\";","export default __webpack_public_path__ + \"static/media/fees.50cb4df6.svg\";","export default __webpack_public_path__ + \"static/media/finance.d8ebf4c0.svg\";","const ethSigUtil = require('eth-sig-util');\n\nconst ethers = require('ethers')\n\nconst ethereumJsUtil = require('ethereumjs-util')\n\nconst GENERIC_PARAMS = 'address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data,uint256 validUntilTime'\nconst typeName = `ForwardRequest(${GENERIC_PARAMS})`\nconst typeHash = ethers.utils.id(typeName)\n\nconst EIP712Domain = [\n    { name: 'name', type: 'string' },\n    { name: 'version', type: 'string' },\n    { name: 'chainId', type: 'uint256' },\n    { name: 'verifyingContract', type: 'address' }\n];\n\nconst ForwardRequest = [\n    { name: 'from', type: 'address' },\n    { name: 'to', type: 'address' },\n    { name: 'value', type: 'uint256' },\n    { name: 'gas', type: 'uint256' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'data', type: 'bytes' },\n    { name: 'validUntilTime', type: 'uint256' }\n];\n\nfunction getMetaTxTypeData(chainId, verifyingContract) {\n    return {\n        types: {\n            EIP712Domain,\n            ForwardRequest,\n        },\n        domain: {\n            name: 'Forwarder',\n            version: '0.0.1',\n            chainId,\n            verifyingContract,\n        },\n        primaryType: 'ForwardRequest',\n    }\n};\n\nasync function signTypedData(signer, from, data) {\n    const [method, argData] = ['eth_signTypedData_v4', JSON.stringify(data)]\n    return await signer.send(method, [from, argData]);\n}\n\nasync function buildRequest(forwarder, input, valueParam) {\n    const value = valueParam ? valueParam : '0';\n    const nonce = await forwarder.getNonce(input.from).then(nonce => nonce.toString());\n    return { value, gas: '100000', nonce, validUntilTime: '0', ...input };\n}\n\nasync function buildTypedData(forwarder, request) {\n    const chainId = await forwarder.provider.getNetwork().then(n => n.chainId);\n    const typeData = getMetaTxTypeData(chainId, forwarder.address);\n    return {...typeData, message: request };\n}\n\nasync function getDomainSeparator(forwarder) {\n    const chainId = await forwarder.provider.getNetwork().then(n => n.chainId);\n    const typeData = getMetaTxTypeData(chainId, forwarder.address);\n    return ethereumJsUtil.bufferToHex(ethSigUtil.TypedDataUtils.hashStruct('EIP712Domain', typeData.domain, { EIP712Domain }, 'V4'))\n}\n\nexport async function signMetaTxRequest(signer, forwarder, input, value) {\n    const request = await buildRequest(forwarder, input, value);\n    const toSign = await buildTypedData(forwarder, request);\n    const signature = await signTypedData(signer, input.from, toSign);\n    const domainSeparator = await getDomainSeparator(forwarder)\n    return { typeHash, domainSeparator, signature, request };\n}","import { ethers } from 'ethers';\nimport { Forwarder as address } from '../deploy.json';\n\nconst { abi } = require(\"./Forwarder.json\");\n\nexport function createInstance(provider) {\n  return new ethers.Contract(address, abi, provider);\n}\n","import { useState, useEffect, useContext } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport {\n    Card, CardActions, CardContent, Button, Grid,\n    Typography, Box, OutlinedInput\n} from '@mui/material';\n\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport DBXen from \"../../ethereum/dbxen\"\nimport DBXenViews from \"../../ethereum/dbxenViews\";\nimport DBXenERC20 from \"../../ethereum/dbxenerc20\"\nimport SnackbarNotification from './Snackbar';\nimport { BigNumber, ethers } from \"ethers\";\nimport \"../../componentsStyling/stake.scss\";\nimport token from \"../../photos/icons/token.svg\"\nimport coinBagLight from \"../../photos/icons/coin-bag-solid--light.svg\";\nimport coinBagDark from \"../../photos/icons/coin-bag-solid--dark.svg\";\nimport walletLight from \"../../photos/icons/wallet--light.svg\";\nimport walletDark from \"../../photos/icons/wallet--dark.svg\";\nimport fees from \"../../photos/icons/fees.svg\";\nimport finance from \"../../photos/icons/finance.svg\";\nimport { signMetaTxRequest } from '../../ethereum/signer';\nimport { createInstance } from '../../ethereum/forwarder'\nimport dataFromWhitelist from '../../constants.json';\nimport useAnalyticsEventTracker from '../Common/GaEventTracker';\nimport Countdown, { zeroPad } from \"react-countdown\";\nimport { useTranslation } from 'react-i18next';\nimport ChainContext from '../Contexts/ChainContext';\n\nconst { whitelist } = dataFromWhitelist;\n\nexport function Stake(props: any): any {\n\n    const { account, library, activate } = useWeb3React()\n    const { chain }  = useContext(ChainContext)\n    const [notificationState, setNotificationState] = useState({})\n    const gaEventTracker = useAnalyticsEventTracker('Stake');\n    const [previousCycleXENBurned, setPreviousCycleXENBurned] = useState<any>();\n    const datePolygon: any = new Date(Date.UTC(2023, 2, 17, 14, 3, 19, 0));\n    const dateAvalance: any = new Date(Date.UTC(2023, 2, 17, 14, 7, 20, 0));\n    const now: any = Date.now()\n    let endDatePolygon = datePolygon.getTime() - now;\n    let endDateAvalance = dateAvalance.getTime() - now;\n    const { t } = useTranslation();\n\n    const renderer = ({ hours, minutes, seconds, completed }: any) => {\n        if (completed) {\n            // Render a complete state\n            return;\n        } else {\n            // Render a countdown\n            return (\n                <span>\n                    ~ {zeroPad(hours)}:{zeroPad(minutes)}:{zeroPad(seconds)}\n                </span>\n            );\n        }\n    };\n\n    function FeesPanel() {\n        const [feesUnclaimed, setFeesUnclaimed] = useState(\"\")\n        const [loading, setLoading] = useState(false)\n\n        useEffect(() => {\n            feesAccrued()\n        }, [feesUnclaimed]);\n\n\n        useEffect(() => {\n            totalXenBurnedPreviousCycle();\n        }, []);\n\n        async function totalXenBurnedPreviousCycle() {\n            await getTotalXenBurnedInPreviusCycle().then((result: any) => {\n                setPreviousCycleXENBurned(result);\n            })\n        }\n\n        async function getTotalXenBurnedInPreviusCycle() {\n            const signer = await library.getSigner(0)\n            const deb0xContract = DBXen(signer, chain.deb0xAddress)\n\n            await deb0xContract.getCurrentCycle().then(async (currentCycle: any) => {\n                if (currentCycle != 0) {\n                    await deb0xContract.cycleTotalBatchesBurned(currentCycle)\n                        .then((numberBatchesBurnedInCurrentCycle: any) => {\n                            return numberBatchesBurnedInCurrentCycle.toNumber() * 2500000;\n                        })\n                }\n            })\n            return 0;\n        }\n\n        async function feesAccrued() {\n            const deb0xViewsContract = DBXenViews(library, chain.deb0xViewsAddress);\n            await deb0xViewsContract.getUnclaimedFees(account).then((result: any) => {\n                setFeesUnclaimed(ethers.utils.formatEther(result))\n            });\n        }\n\n        async function fetchClaimFeesResult(request: any, url: any) {\n            await fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(request),\n                headers: { 'Content-Type': 'application/json' },\n            })\n                .then((response) => response.json())\n                .then(async (data) => {\n                    try {\n                        const { tx: txReceipt } = JSON.parse(data.result)\n                        if (txReceipt.status == 1) {\n                            setNotificationState({\n                                message: t(\"fees.toastify.success\"), open: true,\n                                severity: \"success\"\n                            })\n                        } else {\n                            setNotificationState({\n                                message: t(\"fees.toastify.error\"), open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    } catch (error) {\n                        if (data.status == \"pending\") {\n                            setNotificationState({\n                                message: t(\"fees.toastify.info\"),\n                                open: true,\n                                severity: \"info\"\n                            })\n                        } else if (data.status == \"error\") {\n                            setNotificationState({\n                                message: t(\"fees.toastify.transaction_error\"),\n                                open: true,\n                                severity: \"error\"\n                            })\n                        }\n                    }\n\n                })\n        }\n\n        async function sendClaimFeesTx(deb0xContract: any) {\n            try {\n                const tx = await deb0xContract.claimFees()\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: t(\"fees.toastify.success\"), open: true,\n                            severity: \"success\"\n                        })\n                        //setLoading(false)\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: t(\"fees.toastify.error\"), open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n            } catch (error: any) {\n                setNotificationState({\n                    message: t(\"fees.toastify.rejected\"),\n                    open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function claimFees() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = DBXen(signer, chain.deb0xAddress)\n\n            const from = signer.getAddress();\n            if (whitelist.includes(from)) {\n                const url = \"https://api.defender.openzeppelin.com/autotasks/b939da27-4a61-4464-8d7e-4b0c5dceb270/runs/webhook/f662ac31-8f56-4b4c-9526-35aea314af63/SPs6smVfv41kLtz4zivxr8\";\n                const forwarder = createInstance(library)\n                const data = deb0xContract.interface.encodeFunctionData(\"claimFees()\")\n                const to = deb0xContract.address\n\n                try {\n                    const request = await signMetaTxRequest(library, forwarder, { to, from, data });\n\n                    gaEventTracker(\"Success: Claim fees\");\n\n                    await fetchClaimFeesResult(request, url)\n\n                } catch (error: any) {\n                    setNotificationState({\n                        message: t(\"fees.toastify.rejected\"),\n                        open: true,\n                        severity: \"info\"\n                    })\n\n                    gaEventTracker(\"Rejected: Claim fees\");\n                }\n            } else {\n                await sendClaimFeesTx(deb0xContract)\n            }\n        }\n\n        return (\n            <>\n            <Card variant=\"outlined\" className=\"card-container\">\n                <CardContent className=\"row\">\n                    <div className=\"col-12 col-md-8 mb-2\">\n                        <Typography variant=\"h4\" component=\"div\" className=\"rewards mb-3\">\n                            {t(\"fees.title\")}\n                        </Typography>\n                        <Typography >\n                            {t(\"fees.unclaimed_fees\")}:&nbsp;\n                                <strong>\n                                    {Number(feesUnclaimed).toLocaleString('en-US', {\n                                        minimumFractionDigits: 2,\n                                        maximumFractionDigits: 2\n                                    })}\n                                </strong>\n                            </Typography>\n                            <p className='my-2 counter'>\n                                {t(\"fees.counter\")} \n                                {chain.chainName === \"polygon\" ?\n                                    <Countdown date={Date.now() + endDatePolygon} renderer={renderer} /> :\n                                    <Countdown date={Date.now() + endDateAvalance} renderer={renderer} />\n                                }\n                            </p>\n                        </div>\n                        <div className='col-12 col-md-4 d-flex justify-content-end align-items-start'>\n                            <img src={fees} alt=\"trophyRewards\" className=\"p-3 medium-img\" />\n                        </div>\n                    </CardContent>\n                    <CardActions className='button-container px-3'>\n                        <LoadingButton\n                            className=\"collect-btn\"\n                            disabled={feesUnclaimed == \"0.0\"}\n                            loading={loading}\n                            variant=\"contained\"\n                            onClick={claimFees}>\n                            {t(\"fees.collect\")}\n                        </LoadingButton>\n                    </CardActions>\n                </Card>\n            </>\n        )\n    }\n\n    function CyclePanel() {\n        const [currentReward, setCurrentReward] = useState(\"\")\n\n    \n        async function getChainId() {\n            const currentChainId = await window.ethereum.request({\n                method: 'eth_chainId',\n            }).then((result:any) =>{\n                \n            })\n        }\n\n        useEffect(() => {\n            getChainId();\n        }, [])\n\n        useEffect(() => {\n            cycleReward()\n        }, [currentReward]);\n\n        async function cycleReward() {\n            const deb0xContract = DBXen(library, chain.deb0xAddress);\n            await deb0xContract.currentCycleReward().then((result: any) => {\n                setCurrentReward(ethers.utils.formatEther(result))\n            })\n        }\n        return (\n            <>\n            <Card variant=\"outlined\" className=\"card-container\">\n                <CardContent className=\"row\">\n                    <div className=\"col-12 col-md-12 mb-2\">\n                        <Typography variant=\"h4\" component=\"div\" className=\"rewards mb-3\">\n                            {t(\"daily_stats.title\")}\n                        </Typography>\n                        <Typography className=\"data-height\">\n                            {t(\"daily_stats.this_cycle\")}:&nbsp; \n                            <strong>\n                                {Number(currentReward).toLocaleString('en-US', {\n                                    minimumFractionDigits: 2,\n                                    maximumFractionDigits: 2\n                                })}\n                            </strong> DXN\n                        </Typography>\n                        {/* <Typography className=\"data-height\">\n                            Total XEN burned in previous cycle: <strong>{previousCycleXENBurned}</strong>\n                        </Typography> */}\n                        </div>\n                    </CardContent>\n                </Card>\n            </>\n        )\n    }\n\n    function RewardsPanel() {\n\n        const [rewardsUnclaimed, setRewardsUnclaimed] = useState(\"\")\n        const [feeSharePercentage, setFeeSharePercentage] = useState(\"\")\n        const [loading, setLoading] = useState(false)\n\n    \n        async function getChainId() {\n            const currentChainId = await window.ethereum.request({\n                method: 'eth_chainId',\n            }).then((result:any) =>{\n                \n            })\n        }\n\n        useEffect(() => {\n            getChainId();\n        }, [])\n\n        useEffect(() => {\n            rewardsAccrued()\n        }, [rewardsUnclaimed]);\n\n        useEffect(() => {\n            feeShare()\n        }, [feeSharePercentage]);\n\n        async function rewardsAccrued() {\n            const deb0xViewsContract = DBXenViews(library, chain.deb0xViewsAddress);\n\n            await deb0xViewsContract.getUnclaimedRewards(account).then((result: any) => {\n                setRewardsUnclaimed(ethers.utils.formatEther(result))\n            })\n        }\n\n        async function feeShare() {\n            const deb0xViewsContract = DBXenViews(library, chain.deb0xViewsAddress);\n\n            const deb0xContract = DBXen(library, chain.deb0xAddress);\n\n            const unclaimedRewards = await deb0xViewsContract.getUnclaimedRewards(account);\n\n            const accWithdrawableStake = await deb0xViewsContract.getAccWithdrawableStake(account);\n\n            let balance = parseFloat((ethers.utils.formatEther(unclaimedRewards.add(accWithdrawableStake))))\n\n            const currentCycle = await deb0xContract.currentStartedCycle();\n\n            const totalSupply = await deb0xContract.summedCycleStakes(currentCycle);\n\n            const feeShare = balance * 100 / totalSupply\n            setFeeSharePercentage(((Math.round(feeShare * 100) / 100).toFixed(2)).toString() + \"%\")\n        }\n\n        async function fetchClaimRewardsResult(request: any, url: any) {\n            await fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(request),\n                headers: { 'Content-Type': 'application/json' },\n            })\n                .then((response) => response.json())\n                .then(async (data) => {\n                    try {\n                        const { tx: txReceipt } = JSON.parse(data.result)\n                        if (txReceipt.status == 1) {\n                            setNotificationState({\n                                message: t(\"rewards.toastify.success\"), open: true,\n                                severity: \"success\"\n                            })\n                        } else {\n                            setNotificationState({\n                                message: t(\"rewards.toastify.error\"), open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    } catch (error) {\n                        if (data.status == \"pending\") {\n                            setNotificationState({\n                                message: t(\"rewards.toastify.info\"),\n                                open: true,\n                                severity: \"info\"\n                            })\n                        } else if (data.status == \"error\") {\n                            setNotificationState({\n                                message: t(\"rewards.toastify.transaction_error\"),\n                                open: true,\n                                severity: \"error\"\n                            })\n                        }\n                    }\n\n                })\n        }\n\n        async function sendClaimRewardsTx(deb0xContract: any) {\n            try {\n                const tx = await deb0xContract.claimRewards()\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: t(\"rewards.toastify.success\"), open: true,\n                            severity: \"success\"\n                        })\n                        //setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: t(\"rewards.toastify.error\"), open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n            } catch (error: any) {\n                setNotificationState({\n                    message: t(\"rewards.toastify.rejected\"),\n                    open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function claimRewards() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = DBXen(signer, chain.deb0xAddress)\n\n\n            const from = await signer.getAddress();\n            if (whitelist.includes(from)) {\n                const url = \"https://api.defender.openzeppelin.com/autotasks/b939da27-4a61-4464-8d7e-4b0c5dceb270/runs/webhook/f662ac31-8f56-4b4c-9526-35aea314af63/SPs6smVfv41kLtz4zivxr8\";\n                const forwarder = createInstance(library)\n                const data = deb0xContract.interface.encodeFunctionData(\"claimRewards()\")\n                const to = deb0xContract.address\n\n                try {\n                    const request = await signMetaTxRequest(library, forwarder, { to, from, data });\n\n                    gaEventTracker(\"Success: Claim rewards\");\n\n                    await fetchClaimRewardsResult(request, url)\n\n                } catch (error: any) {\n                    setNotificationState({\n                        message: t(\"rewards.toastify.rejected\"),\n                        open: true,\n                        severity: \"info\"\n                    })\n\n                    gaEventTracker(\"Rejected: Claim rewards\");\n                }\n            } else {\n                await sendClaimRewardsTx(deb0xContract)\n            }\n        }\n\n        return (\n            <>\n            <Card variant=\"outlined\" className=\"card-container\">\n                <CardContent className=\"row\">\n                    <div className=\"col-12 col-md-10 mb-2\">\n                        <Typography variant=\"h4\" component=\"div\" className=\"rewards mb-3\">\n                            {t(\"rewards.title\")}\n                        </Typography>\n                        <Typography >\n                            {t(\"rewards.unclaimed_rewards\")}:&nbsp;\n                                <strong>\n                                    {Number(rewardsUnclaimed).toLocaleString('en-US', {\n                                        minimumFractionDigits: 2,\n                                        maximumFractionDigits: 2\n                                    })}\n                                </strong>\n                            </Typography>\n                            <p className='my-2 counter'>\n                                {t(\"rewards.counter\")} \n                                {chain.chainName === \"polygon\" ?\n                                    <Countdown date={Date.now() + endDatePolygon} renderer={renderer} /> :\n                                    <Countdown date={Date.now() + endDateAvalance} renderer={renderer} />\n                                }\n                            </p>\n                        </div>\n                        <div className='col-12 col-md-2 d-flex justify-content-end align-items-start'>\n                            <img src={finance} alt=\"trophyRewards\" className=\"p-3 medium-img\" />\n                        </div>\n                    </CardContent>\n                    <CardActions className='button-container px-3'>\n                        <LoadingButton className=\"collect-btn\" loading={loading} variant=\"contained\" onClick={claimRewards}>\n                        {t(\"rewards.claim\")}\n                    </LoadingButton>\n                        <span className=\"text\">{t(\"rewards.claim_description\")}</span>\n                    </CardActions>\n                </Card>\n            </>\n        )\n    }\n\n    function floorPrecised(number: any) {\n        var power = Math.pow(10, 2);\n        return (Math.floor(parseFloat(number) * power) / power).toString();\n    }\n\n    function StakeUnstake() {\n        const [alignment, setAlignment] = useState(\"stake\");\n\n        const [userStakedAmount, setUserStakedAmount] = useState(\"\")\n        const [userUnstakedAmount, setUserUnstakedAmount] = useState(\"\")\n        const [tokensForUnstake, setTokenForUnstake] = useState(\"\");\n        const [totalStaked, setTotalStaked] = useState(\"\")\n        const [amountToUnstake, setAmountToUnstake] = useState(\"\")\n        const [amountToStake, setAmountToStake] = useState(\"\")\n        const [loading, setLoading] = useState(false)\n        const [approved, setApproved] = useState<Boolean | null>(false)\n\n    \n        async function getChainId() {\n            const currentChainId = await window.ethereum.request({\n                method: 'eth_chainId',\n            }).then((result:any) =>{\n                \n            })\n        }\n\n        useEffect(() => {\n            getChainId();\n        }, [])\n\n        const handleChange = (\n            event: React.MouseEvent<HTMLElement>,\n            newAlignment: string,\n        ) => {\n            setAlignment(newAlignment);\n            gaEventTracker(newAlignment + \" tab\");\n        };\n\n        const [theme, setTheme] = useState(localStorage.getItem('globalTheme'));\n        useEffect(() => {\n            setTheme(localStorage.getItem('globalTheme'));\n        });\n\n        useEffect(() => {\n            setStakedAmount()\n        }, [userStakedAmount]);\n\n        useEffect(() => {\n            totalAmountStaked()\n        }, [totalStaked]);\n\n\n        useEffect(() => {\n            setTokensForUntakedAmount()\n        }, []);\n\n        useEffect(() => {\n            setUnstakedAmount()\n        }, [userUnstakedAmount]);\n\n        useEffect(() => {\n            setApproval()\n        }, [approved]);\n\n        async function setStakedAmount() {\n            const deb0xContract = await DBXen(library, chain.deb0xAddress)\n            const deb0xViewsContract = await DBXenViews(library, chain.deb0xViewsAddress)\n            const balance = await deb0xViewsContract.getAccWithdrawableStake(account)\n            let firstStakeCycle = await deb0xContract.accFirstStake(account)\n            let secondStakeCycle = await deb0xContract.accSecondStake(account)\n            let firstStakeCycleAmount = await deb0xContract.accStakeCycle(account, firstStakeCycle);\n            let secondStakeCycleAmount = await deb0xContract.accStakeCycle(account, secondStakeCycle);\n            let withdawbleStake = await deb0xContract.accWithdrawableStake(account);\n            let totalStakedAmount = BigNumber.from(firstStakeCycleAmount).add(BigNumber.from(secondStakeCycleAmount)).add(BigNumber.from(withdawbleStake))\n            setUserStakedAmount(ethers.utils.formatEther(totalStakedAmount))\n        }\n\n        async function setTokensForUntakedAmount() {\n            const deb0xViewsContract =  DBXenViews(library, chain.deb0xViewsAddress)\n            const balance = await deb0xViewsContract.getAccWithdrawableStake(account).then((balance:any) =>{\n                setTokenForUnstake(ethers.utils.formatEther(balance.toString()));\n            })\n        }\n\n        async function setUnstakedAmount() {\n            const deb0xERC20Contract = await DBXenERC20(library, chain.deb0xERC20Address)\n            const balance = await deb0xERC20Contract.balanceOf(account).then((balance:any) =>{\n                let number = ethers.utils.formatEther(balance);\n                setUserUnstakedAmount(parseFloat(number.slice(0, (number.indexOf(\".\")) + 3)).toString())\n            })\n        }\n\n        async function setApproval() {\n            const deb0xERC20Contract = DBXenERC20(library, chain.deb0xERC20Address)\n\n            await deb0xERC20Contract.allowance(account, chain.deb0xAddress).then((allowance:any) =>\n                 allowance > 0 ? setApproved(true) : setApproved(false)\n            )\n        }\n\n        async function totalAmountStaked() {\n\n            const deb0xContract = DBXen(library, chain.deb0xAddress)\n\n           await deb0xContract.currentStartedCycle().then(async (currentCycle:any) =>{\n                await deb0xContract.summedCycleStakes(currentCycle).then((totalSupply:any) => {\n                    setTotalStaked(ethers.utils.formatEther(totalSupply))\n                })\n            })\n\n        }\n\n        async function approveStaking() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n            const deb0xERC20Contract = DBXenERC20(signer, chain.deb0xERC20Address)\n\n            try {\n                const tx = await deb0xERC20Contract.approve(chain.deb0xAddress, ethers.utils.parseEther(\"5010000\"))\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: t(\"rewards.toastify.success\"), open: true,\n                            severity: \"success\"\n                        })\n                        setLoading(false)\n\n                        gaEventTracker(\"Success: Approve staking\");\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: t(\"stake.toastify.error\"), open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                        gaEventTracker(\"Error: Approve staking\");\n                    })\n            } catch (error) {\n                setNotificationState({\n                    message: t(\"stake.toastify.info\"), open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n                gaEventTracker(\"Rejected: Approve staking\");\n            }\n        }\n\n        async function fetchUnstakeResult(request: any, url: any) {\n            await fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(request),\n                headers: { 'Content-Type': 'application/json' },\n            })\n                .then((response) => response.json())\n                .then(async (data) => {\n                    try {\n                        const { tx: txReceipt } = JSON.parse(data.result)\n                        if (txReceipt.status == 1) {\n                            setNotificationState({\n                                message: t(\"unstake.toastify.success\"), open: true,\n                                severity: \"success\"\n                            })\n                            setLoading(false)\n                        } else {\n                            setNotificationState({\n                                message: t(\"unstake.toastify.error\"), open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    } catch (error) {\n                        if (data.status == \"pending\") {\n                            setNotificationState({\n                                message: t(\"unstake.toastify.info\"),\n                                open: true,\n                                severity: \"info\"\n                            })\n                        } else if (data.status == \"error\") {\n                            setNotificationState({\n                                message: t(\"unstake.toastify.transaction_error\"),\n                                open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    }\n\n                })\n        }\n\n        async function sendUnstakeTx(deb0xContract: any) {\n            try {\n                const tx = await deb0xContract.unstake(ethers.utils.parseEther(amountToUnstake.toString()))\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: t(\"unstake.toastify.success\"), open: true,\n                            severity: \"success\"\n                        })\n                        setTokensForUntakedAmount();\n                        setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setLoading(false)\n                        setNotificationState({\n                            message: t(\"unstake.toastify.error\"), open: true,\n                            severity: \"error\"\n                        })\n\n                    })\n            } catch (error) {\n                setNotificationState({\n                    message: t(\"unstake.toastify.rejected\"),\n                    open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function unstake() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = DBXen(signer, chain.deb0xAddress)\n\n            const from = await signer.getAddress();\n            if (whitelist.includes(from)) {\n                const url = \"https://api.defender.openzeppelin.com/autotasks/b939da27-4a61-4464-8d7e-4b0c5dceb270/runs/webhook/f662ac31-8f56-4b4c-9526-35aea314af63/SPs6smVfv41kLtz4zivxr8\";\n                const forwarder = createInstance(library)\n                const data = deb0xContract.interface.encodeFunctionData(\"unstake\",\n                    [ethers.utils.parseEther(amountToUnstake.toString())])\n                const to = deb0xContract.address\n                try {\n                    const request = await signMetaTxRequest(library, forwarder, { to, from, data });\n\n                    gaEventTracker(\"Success: Unstake\");\n\n                    await fetchUnstakeResult(request, url)\n\n                } catch (error: any) {\n                    setNotificationState({\n                        message: t(\"unstake.toastify.rejected\"),\n                        open: true,\n                        severity: \"info\"\n                    })\n                    setLoading(false)\n\n                    gaEventTracker(\"Rejected: Unstake\");\n                }\n            } else {\n                await sendUnstakeTx(deb0xContract)\n            }\n        }\n\n        async function fetchStakeResult(request: any, url: any) {\n            await fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(request),\n                headers: { 'Content-Type': 'application/json' },\n            })\n                .then((response) => response.json())\n                .then(async (data) => {\n                    try {\n                        const { tx: txReceipt } = JSON.parse(data.result)\n                        if (txReceipt.status == 1) {\n                            setNotificationState({\n                                message: t(\"stake.toastify.staked\"), open: true,\n                                severity: \"success\"\n                            })\n                        } else {\n                            setNotificationState({\n                                message: t(\"stake.toastify.claim_error\"), open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    } catch (error) {\n                        if (data.status == \"pending\") {\n                            setNotificationState({\n                                message: t(\"stake.toastify.stake_info\"),\n                                open: true,\n                                severity: \"info\"\n                            })\n                        } else if (data.status == \"error\") {\n                            setNotificationState({\n                                message: t(\"stake.toastify.stake_transaction_error\"),\n                                open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    }\n\n                })\n        }\n\n        async function sendStakeTx(deb0xContract: any) {\n            try {\n                const tx = await deb0xContract.stake(ethers.utils.parseEther(amountToStake.toString()))\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: t(\"stake.toastify.staked\"), open: true,\n                            severity: \"success\"\n                        })\n                        //\n                        let tokensInWallet = Number(userUnstakedAmount) - Number(amountToStake);\n                        setUserUnstakedAmount(tokensInWallet.toString())\n                        //setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: t(\"stake.toastify.stake_error\"), open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n            } catch (error) {\n                setNotificationState({\n                    message: t(\"stake.toastify.rejected\"),\n                    open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function stake() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = DBXen(signer, chain.deb0xAddress)\n\n            const from = await signer.getAddress();\n            if (whitelist.includes(from)) {\n                const url = \"https://api.defender.openzeppelin.com/autotasks/b939da27-4a61-4464-8d7e-4b0c5dceb270/runs/webhook/f662ac31-8f56-4b4c-9526-35aea314af63/SPs6smVfv41kLtz4zivxr8\";\n                const forwarder = createInstance(library)\n                const data = deb0xContract.interface.encodeFunctionData(\"stake\",\n                    [ethers.utils.parseEther(amountToStake.toString())])\n                const to = deb0xContract.address\n\n                try {\n                    const request = await signMetaTxRequest(library, forwarder, { to, from, data });\n\n                    gaEventTracker(\"Success: Stake\");\n\n                    await fetchStakeResult(request, url)\n\n                } catch (error: any) {\n                    setNotificationState({\n                        message: t(\"stake.toastify.rejected\"),\n                        open: true,\n                        severity: \"info\"\n                    })\n                    setLoading(false)\n                    gaEventTracker(\"Rejected: Stake\");\n                }\n            } else {\n                await sendStakeTx(deb0xContract)\n            }\n        }\n\n        return (\n            <Card variant=\"outlined\" className=\"card-container\">\n                <ToggleButtonGroup\n                    color=\"primary\"\n                    value={alignment}\n                    exclusive\n                    onChange={handleChange}\n                    className=\"tab-container\"\n                >\n                    <ToggleButton className=\"tab-btn\" value=\"stake\">{t(\"stake.stake\")}</ToggleButton>\n                    <ToggleButton className=\"tab-btn\" value=\"unstake\" >{t(\"unstake.unstake\")}</ToggleButton>\n\n                </ToggleButtonGroup>\n              \n            {\n                alignment === \"stake\" ?\n                \n                <>\n                <CardContent className=\"row\">\n                    <div className=\"col-6 px-3\">\n                        <img className=\"display-element\" src={theme === \"classic\" ? coinBagDark : coinBagLight} alt=\"coinbag\" />\n                        <Typography className=\"p-0\">\n                            {t(\"stake.staked_amount\")}:\n                        </Typography>\n                        <Typography variant=\"h6\" className=\"p-0 data-height\">\n                            <strong>\n                                {Number(userStakedAmount).toLocaleString('en-US', {\n                                    minimumFractionDigits: 2,\n                                    maximumFractionDigits: 2\n                                })} DXN</strong>\n                        </Typography>\n                    </div>\n                    <div className=\"col-6 px-3\">\n                        <img className=\"display-element\" src={theme === \"classic\" ? walletDark : walletLight} alt=\"coinbag\" />\n                        <Typography className=\"p-0\">\n                            {t(\"stake.wallet\")}:\n                        </Typography>\n                        <Typography variant=\"h6\" className=\"p-0\" data-height>\n                            <strong>\n                                {Number(userUnstakedAmount).toLocaleString('en-US', {\n                                    minimumFractionDigits: 2,\n                                    maximumFractionDigits: 2\n                                })} DXN</strong>\n                        </Typography>\n                    </div>\n                    {approved && <Grid className=\"amount-row px-3\" container>\n                        <Grid item>\n                            <OutlinedInput id=\"outlined-basic\"\n                                placeholder={t(\"stake.amount_to_stake\")}\n                                type=\"number\"\n                                value={amountToStake}\n                                inputProps={{ min: 0 }}\n                                onChange={e => setAmountToStake(e.target.value)} />\n                        </Grid>\n                        <Grid className=\"max-btn-container\" item>\n                            <Button className=\"max-btn\" \n                                size=\"small\" variant=\"contained\" color=\"error\" \n                                onClick = {()=>setAmountToStake(userUnstakedAmount)  }>\n                                    {t(\"stake.max\")}\n                            </Button>\n                        </Grid>\n                    </Grid>}\n                </CardContent>\n                <CardActions className='button-container px-3'>\n                    {approved && \n                        <LoadingButton disabled={!amountToStake} className=\"collect-btn\" loading={loading} variant=\"contained\" onClick={stake}>\n                            {t(\"stake.stake\")}\n                        </LoadingButton>}\n                    {!approved &&\n                        <>\n                            <LoadingButton \n                                className=\"collect-btn\" \n                                loading={loading}\n                                variant=\"contained\"\n                                disabled={ userUnstakedAmount === '0.00' ||  userUnstakedAmount === '0'}\n                                onClick={approveStaking}>\n                                    {t(\"stake.init_button\")}\n                            </LoadingButton>\n                            <span className=\"text\">\n                                {t(\"stake.init_text\")}\n                            </span>\n                        </> \n                    }\n                </CardActions>\n                </>\n                : \n\n                <>\n                <CardContent className=\"row\">\n                    <div className=\"col-6 px-3\">\n                        <img className=\"display-element\" src={theme === \"classic\" ? coinBagDark : coinBagLight} alt=\"coinbag\" />\n                        <Typography className=\"p-0\">\n                            {t(\"unstake.available\")}:\n                        </Typography>\n                        <Typography variant=\"h6\" className=\"p-0\">\n                            <strong>{Number(tokensForUnstake).toLocaleString('en-US', {\n                                    minimumFractionDigits: 2,\n                                    maximumFractionDigits: 2\n                                })} DXN</strong>\n                        </Typography>\n                    </div>\n                    {/* <div className=\"col-6 px-3\">\n                        <img className=\"display-element\" src={theme === \"classic\" ? walletDark : walletLight} alt=\"coinbag\" />\n                        <Typography className=\"p-0\">\n                            Your actual stake:\n                        </Typography>\n                        <Typography variant=\"h6\" className=\"p-0 data-height\">\n                            <strong>{userStakedAmount} DXN</strong>\n                        </Typography>\n                    </div> */}\n\n\n                    <Grid className=\"amount-row px-3\" container>\n                        <Grid item>\n                            <OutlinedInput value={amountToUnstake}\n                                id=\"outlined-basic\"\n                                className=\"max-field\"\n                                placeholder={t(\"unstake.amount_to_unstake\")}\n                                onChange={e => setAmountToUnstake(e.target.value)}\n                                inputProps={{ min: 0 }}\n                                type=\"number\" />\n                        </Grid>\n                        <Grid className=\"max-btn-container\" item>\n                            <Button className=\"max-btn\"\n                                size=\"small\" variant=\"contained\" color=\"error\" \n                                onClick = {()=>setAmountToUnstake(tokensForUnstake)  }>\n                                {t(\"unstake.max\")}\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </CardContent>\n                <CardActions className='button-container px-3'>\n                    <LoadingButton className=\"collect-btn\" disabled={!amountToUnstake} loading={loading} variant=\"contained\" onClick={unstake}>\n                        {t(\"unstake.unstake\")}\n                    </LoadingButton>\n                </CardActions>\n                </>\n            }\n\n            </Card>\n\n        )\n    }\n\n    function TotalStaked() {\n        const [totalStaked, setTotalStaked] = useState(\"\")\n        useEffect(() => {\n            totalAmountStaked()\n        }, [totalStaked]);\n\n        async function totalAmountStaked() {\n\n            const deb0xContract = DBXen(library, chain.deb0xAddress)\n\n            const currentCycle = await deb0xContract.currentStartedCycle()\n\n            const currentStake = await deb0xContract.summedCycleStakes(currentCycle)\n\n            const pendingStakeWithdrawal = await deb0xContract.pendingStakeWithdrawal()\n            \n            // setTotalStaked(ethers.utils.formatEther(currentStake))\n\n            setTotalStaked(floorPrecised(ethers.utils.formatEther(currentStake.sub(pendingStakeWithdrawal))))\n\n        }\n\n        return (\n            <Card className=\"heading-card\">\n                <CardContent>\n                    <Typography variant=\"h5\">\n                        Total tokens staked:\n                    </Typography>\n                    <Typography variant=\"h4\">\n                        <img className=\"logo\" src={token} />\n                        {totalStaked} DXN\n                    </Typography>\n                </CardContent>\n            </Card>\n        )\n    }\n\n    return (\n        <>\n            <SnackbarNotification state={notificationState} setNotificationState={setNotificationState} />\n            <Box className=\"content-box stake-content\">\n                <div className=\"cards-grid\">\n                    <div className='row'>\n                        <Grid item className=\"col col-12 col-md-6 \">\n                            <FeesPanel />\n                        </Grid>\n                        <Grid item className=\"col col-12 col-md-6\">\n                            <CyclePanel />\n                        </Grid>\n                    </div>\n                    <div className='row'>\n                        <Grid item className=\"col col-12 col-md-6 \">\n                            <RewardsPanel />\n                        </Grid>\n                        <Grid item className=\"col col-12 col-md-6\">\n                            <StakeUnstake />\n                        </Grid>\n                    </div>\n                </div>\n            </Box>\n        </>\n    )\n}","import ReactGA from \"react-ga\";\n\nexport default function useAnalyticsEventTracker(category: string) {\n    const eventTracker = (action: string) => {\n      ReactGA.event({category, action});\n    }\n    return eventTracker;\n}","import { createContext } from \"react\";\n\nexport const initialThemeState = {\n  theme: \"dark\",\n  setTheme: (_value: string) => {}\n};\n\nconst ThemeContext = createContext(initialThemeState);\nexport default ThemeContext;","import { useState, useEffect } from \"react\";\nimport ThemeContext, { initialThemeState } from \"./ThemeContext\";\n\ntype Props = {\n    children: JSX.Element|JSX.Element[],\n};\n\nconst ThemeProvider = ( { children }: Props ) => {\n  const [theme, setTheme] = useState<any>(initialThemeState.theme);\n\n  const localStorage = window.localStorage;\n\n  useEffect(() => {\n    const savedThemeLocal = localStorage.getItem(\"globalTheme\");\n\n    if (!!savedThemeLocal) {\n      setTheme(savedThemeLocal);\n    }\n  }, [localStorage]);\n\n  useEffect(() => {\n    localStorage.setItem(\"globalTheme\", theme);\n  }, [theme, localStorage]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      <div className={`theme theme--${theme}`}>{children}</div>\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider;\n","export default __webpack_public_path__ + \"static/media/elephant.605d60c2.svg\";","export default __webpack_public_path__ + \"static/media/white_dbxen.8b09777a.svg\";","export default __webpack_public_path__ + \"static/media/elephant.b785cc48.png\";","export default __webpack_public_path__ + \"static/media/empty.efc45323.png\";","export default __webpack_public_path__ + \"static/media/copy-1.6be37e8f.svg\";","export default __webpack_public_path__ + \"static/media/wallet.0d69376a.svg\";","export default __webpack_public_path__ + \"static/media/diconnect.a287fc1c.svg\";","import { Popper } from \"@mui/material\";\nimport ClickAwayListener from \"@mui/material/ClickAwayListener\";\nimport { useState, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nconst DropdownLanguage = () => {\n    const { i18n, t } = useTranslation();\n    const [language, setLanguage] = useState(JSON.parse(localStorage.getItem('language') || \"null\" ));\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const [open, setOpen] = useState<any>(false);\n    const id = open ? 'simple-popper' : \"\";\n\n    useEffect(() => {\n        localStorage.setItem('language', JSON.stringify(language));\n    }, [language]);\n\n    const handleLangChange = (lang: any) => {\n        setLanguage(lang);\n        i18n.changeLanguage(lang);\n        setOpen(false);\n    };\n\n    const handleClick = (event: any) => {\n        const { currentTarget } = event;\n        setAnchorEl(currentTarget)\n        setOpen(!open)\n    };\n\n    const handleClickAway = () => {\n        setOpen(false)\n    };\n\n    return (\n        <ClickAwayListener onClickAway={handleClickAway}>\n            <div>\n                <button onClick={handleClick} className=\"language-switcher\">\n                    {t(\"app_bar.language.\"+language)}\n                </button>\n                <Popper id={id} open={open} anchorEl={anchorEl} className=\"language-popper\">\n                    <button\n                        onClick={() => handleLangChange(\"en\")}\n                        className=\"btn\"\n                    >\n                        {t(\"app_bar.language.en\")}\n                    </button>\n                    <button\n                        onClick={() => handleLangChange(\"zh\")}\n                        className=\"btn\"\n                    >\n                        {t(\"app_bar.language.zh\")}\n                    </button>       \n                </Popper>\n            </div>\n        </ClickAwayListener>\n    );\n};\n\nexport default DropdownLanguage;\n","import { useState, useEffect } from \"react\";\nimport ChainContext, { initialChain } from './ChainContext';\n\ntype Props = {\n    children: JSX.Element|JSX.Element[],\n};\n\nconst ChainProvider = ( { children }: Props ) => {\n    const [chain, setChain] = useState<any>(initialChain.chain);\n\n    useEffect(\n        () => {\n            window.ethereum.request({\n                method: 'eth_chainId',\n            }).then((result: any) => {\n                if(parseInt(result, 16) === 137) {\n                    setChain({\n                        deb0xAddress: \"0x4F3ce26D9749C0f36012C9AbB41BF9938476c462\",\n                        deb0xViewsAddress: \"0xE8696A871C5eaB13bA566A4C15b8144AFeEAFfbA\",\n                        deb0xERC20Address: \"0x47DD60FA40A050c0677dE19921Eb4cc512947729\",\n                        xenCryptoAddress: \"0x2AB0e9e4eE70FFf1fB9D67031E44F6410170d00e\",\n                        chainId: parseInt(result, 16),\n                        chainName: \"polygon\",\n                        currency: \"MATIC\"\n                    })\n                } else {\n                    setChain({\n                        deb0xAddress: \"0xF5c80c305803280B587F8cabBcCdC4d9BF522AbD\",\n                        deb0xViewsAddress: \"0x67873aDDc934C6A1C4b2Bd6d2e08D4431d1181fD\",\n                        deb0xERC20Address: \"0x80f0C1c49891dcFDD40b6e0F960F84E6042bcB6F\",\n                        xenCryptoAddress: \"0xC0C5AA69Dbe4d6DDdfBc89c0957686ec60F24389\",\n                        chainId: parseInt(result, 16),\n                        chainName: \"avalanche\",\n                        currency: \"AVAX\"\n                    })\n                }\n            });\n        },\n        []\n    );\n    \n    return (\n      <ChainContext.Provider value={{chain, setChain}}>\n        <>{children}</>\n      </ChainContext.Provider>\n    );\n  };\n  \n  export default ChainProvider;","export default __webpack_public_path__ + \"static/media/polygon.c13e4066.svg\";","export default __webpack_public_path__ + \"static/media/avalanche.234db155.svg\";","import Popper from '@mui/material/Popper';\nimport { useContext, useEffect, useState } from \"react\";\nimport ChainContext from \"./ChainContext\";\nimport polygon from \"../../photos/icons/polygon.svg\";\nimport avalanche from \"../../photos/icons/avalanche.svg\";\nimport ClickAwayListener from '@mui/base/ClickAwayListener';\n\nconst networks: any = {\n    polygon: {\n      chainId: `0x${Number(137).toString(16)}`,\n      chainName: \"Polygon Mainnet\",\n      nativeCurrency: {\n        name: \"MATIC\",\n        symbol: \"MATIC\",\n        decimals: 18\n      },\n      rpcUrls: [\"https://rpc-mainnet.maticvigil.com\"],\n      blockExplorerUrls: [\"https://polygonscan.com/\"]\n    },\n    avalanche: {\n        chainId: `0x${Number(43114).toString(16)}`,\n        chainName: \"Avalanche Mainnet C-Chain\",\n        nativeCurrency: {\n          name: \"Avalanche\",\n          symbol: \"AVAX\",\n          decimals: 18,\n        },\n        rpcUrls: [\"https://api.avax.network/ext/bc/C/rpc\"],\n        blockExplorerUrls: [\"https://snowtrace.io/\"],\n    }\n};\n\nexport default function ChainSetter(props: any) {\n    const { chain, setChain } = useContext(ChainContext);\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const [open, setOpen] = useState<any>(false);\n    const id = open ? 'simple-popper' : \"\";\n\n    useEffect(() => {\n        window.ethereum.on(\"chainChanged\", networkChanged);\n\n        return () => {\n            window.ethereum.removeListener(\"chainChanged\", networkChanged);\n            };\n    }, [])\n\n    const changeNetwork = async ({ networkName, setError }: any) => {\n        try {\n            if (!window.ethereum) throw new Error(\"No crypto wallet found\");\n            await window.ethereum.request({\n                method: \"wallet_addEthereumChain\",\n                params: [\n                    {\n                        ...networks[networkName]\n                    }\n                ]\n            }).then((result: any) => {\n                if(parseInt(result, 16) === 137) {\n                    setChain({\n                        deb0xAddress: \"0x4F3ce26D9749C0f36012C9AbB41BF9938476c462\",\n                        deb0xViewsAddress: \"0xE8696A871C5eaB13bA566A4C15b8144AFeEAFfbA\",\n                        deb0xERC20Address: \"0x47DD60FA40A050c0677dE19921Eb4cc512947729\",\n                        xenCryptoAddress: \"0x2AB0e9e4eE70FFf1fB9D67031E44F6410170d00e\",\n                        chainId: parseInt(result, 16),\n                        chainName: \"polygon\",\n                        currency: \"MATIC\"\n                    })\n                } else {\n                    setChain({\n                        deb0xAddress: \"0xF5c80c305803280B587F8cabBcCdC4d9BF522AbD\",\n                        deb0xViewsAddress: \"0x67873aDDc934C6A1C4b2Bd6d2e08D4431d1181fD\",\n                        deb0xERC20Address: \"0x80f0C1c49891dcFDD40b6e0F960F84E6042bcB6F\",\n                        xenCryptoAddress: \"0xC0C5AA69Dbe4d6DDdfBc89c0957686ec60F24389\",\n                        chainId: parseInt(result, 16),\n                        chainName: \"avalanche\",\n                        currency: \"AVAX\"\n                    })\n                }\n            });\n        } catch (err: any) {\n            setError(err.message);\n        }\n    };\n    \n    const [error, setError] = useState<any>();\n\n    const handleNetworkSwitch = async (networkName: any) => {\n        setError(\"\");\n        await changeNetwork({ networkName, setError }).then(() => {\n            window.location.reload();\n        });\n    };\n\n    const networkChanged = (chainId: any) => {\n       window.location.reload()\n    };\n\n    const handleClick = (event: any) => {\n        const { currentTarget } = event;\n        setAnchorEl(currentTarget)\n        setOpen(!open)\n    };\n\n    const handleClickAway = () => {\n        setOpen(false)\n    };\n\n\n    return (\n        <ClickAwayListener onClickAway={handleClickAway}>\n            <div>\n                <button onClick={handleClick} className=\"chain-switcher\">\n                    {chain.chainName.charAt(0).toUpperCase() + chain.chainName.slice(1)}\n                </button>\n                <Popper id={id} open={open} anchorEl={anchorEl} className=\"chain-popper\">\n                    <button\n                        onClick={() => handleNetworkSwitch(\"polygon\")}\n                        className=\"btn\"\n                    >\n                        <img alt=\"polygon\" src={polygon} className=\"polygon\"/>\n                        Switch to Polygon\n                    </button>\n                    <button\n                        onClick={() => handleNetworkSwitch(\"avalanche\")}\n                        className=\"btn\"\n                    >\n                        <img alt=\"avalanche\" src={avalanche} className=\"avalanche\"/>\n                        Switch to Avalanche\n                    </button>       \n                </Popper>\n            </div>\n        </ClickAwayListener>\n    )\n}","import { useContext, useEffect, useState } from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport { injected } from '../../connectors';\nimport { useWeb3React } from '@web3-react/core';\nimport { Spinner } from './Spinner';\nimport { ethers } from 'ethers';\nimport formatAccountName from '../Common/AccountName';\nimport DBXen from \"../../ethereum/dbxen\"\nimport DBXenViews from \"../../ethereum/dbxenViews\";\nimport DBXenERC20 from \"../../ethereum/dbxenerc20\"\nimport Popper from '@mui/material/Popper';\nimport ClickAwayListener from '@mui/base/ClickAwayListener';\nimport '../../componentsStyling/appBar.scss';\nimport copyIcon from '../../photos/icons/copy-1.svg';\nimport walletIcon from '../../photos/icons/wallet.svg';\nimport disconnectIcon from '../../photos/icons/diconnect.svg';\nimport logo from \"../../photos/white_dbxen.svg\";\nimport \"i18next\";\nimport { useTranslation } from 'react-i18next';\nimport DropdownLanguage from '../DropdownLanguage';\nimport ChainProvider from '../Contexts/ChainProvider';\nimport ChainSetter from '../Contexts/ChainSetter';\nimport ChainContext from '../Contexts/ChainContext';\nconst tokenSymbol = 'DBXen';\n\n\nconst tokenDecimals = 18;\nenum ConnectorNames { Injected = 'Injected' };\n\nconst connectorsByName: { [connectorName in ConnectorNames]: any } = {\n    [ConnectorNames.Injected]: injected\n}\n\nexport function AppBarComponent(props: any): any {\n    const context = useWeb3React();\n    const { connector, library, chainId, account, activate, deactivate } = context\n    const { chain }  = useContext(ChainContext)\n    const [activatingConnector, setActivatingConnector] = useState<any>();\n    const [networkName, setNetworkName] = useState<any>();\n    const [userUnstakedAmount,setUserUnstakedAmount] = useState<any>(0);\n    const [ensName, setEnsName] = useState<any>(\"\");\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const [, setNotificationState] = useState({})\n    const [theme, setTheme] = useState(localStorage.getItem('globalTheme'));\n    const [userStakedAmount, setUserStakedAmount] = useState(\"\")\n    const [rewardsUnclaimed, setRewardsUnclaimed] = useState(\"\")\n    const [open, setOpen] = useState<any>(false);\n    const deb0xViewsContract = DBXenViews(library, chain.deb0xViewsAddress)\n    const [totalStaked, setTotalStaked] = useState(\"\")\n    const [totalXENBurned, setTotalXENBurned] = useState<any>();\n    const { t } = useTranslation();\n\n    const id = open ? 'simple-popper' : \"\";\n\n    if(library){\n        // checkENS();\n        setUnstakedAmount();\n    }\n\n    useEffect(() => {\n        totalAmountStaked()\n    }, [totalAmountStaked]);\n\n    useEffect(() => {\n        setTheme(localStorage.getItem('globalTheme'));\n    }, []);\n\n    useEffect(() => {\n        injected.supportedChainIds?.forEach(chainId => \n            setNetworkName((ethers.providers.getNetwork(chainId).name)));\n        if (activatingConnector && activatingConnector === connector) {\n            setActivatingConnector(undefined)\n        }\n    }, [activatingConnector, connector]);\n\n    useEffect(() => {\n        xenBurned();\n    },[]);\n\n    const xenBurned = async () => {\n        await getTotalXenBurned().then((result: any) => {\n            setTotalXENBurned(result.toLocaleString('en-US'));\n        })\n    }\n\n    async function getTotalXenBurned(){\n        const signer = await library.getSigner(0)\n        const deb0xContract = DBXen(signer, chain.deb0xAddress)\n        let numberBatchesBurnedInCurrentCycle = await deb0xContract.totalNumberOfBatchesBurned();\n        let batchBurned =numberBatchesBurnedInCurrentCycle.toNumber();\n        return batchBurned * 2500000;\n    }\n\n    async function setUnstakedAmount() {\n        const deb0xERC20Contract = DBXenERC20(library, chain.deb0xERC20Address)\n        if(account){\n            await deb0xERC20Contract.balanceOf(account).then((result: any) => \n                setUserUnstakedAmount(floorPrecised(ethers.utils.formatEther(result)))\n            )\n        }\n    }\n\n    useEffect(() => {\n        const deb0xERC20Contract = DBXenERC20(library, chain.deb0xERC20Address)\n        const filterFrom = deb0xERC20Contract.filters.Transfer(account)\n        const filterTo =  deb0xERC20Contract.filters.Transfer(null, account)\n        deb0xERC20Contract.on(filterFrom, () => {\n            setUnstakedAmount()\n        })\n        deb0xERC20Contract.on(filterTo, () => {\n            setUnstakedAmount()\n        })\n\n        return () => {\n            deb0xERC20Contract.removeAllListeners()\n        }\n    },[])\n\n    async function checkENS(){\n        if(Number(chain.chainId) !== 137){\n            var name = await library.lookupAddress(account);\n            if(name !== null)\n            {   \n                setEnsName(name);\n            }\n        }\n       \n    }\n\n    function floorPrecised(number:any) {\n        var power = Math.pow(10, 2);\n        return (Math.floor(parseFloat(number) * power) / power).toString();\n    }\n\n    async function totalAmountStaked() {\n        const deb0xContract = DBXen(library, chain.deb0xAddress)\n        const currentCycle= await deb0xContract.currentStartedCycle()\n        const currentStake = await deb0xContract.summedCycleStakes(currentCycle)\n        const pendingStakeWithdrawal = await deb0xContract.pendingStakeWithdrawal()\n        setTotalStaked(floorPrecised(ethers.utils.formatEther(currentStake.sub(pendingStakeWithdrawal))))\n    }\n\n    async function addToken() {\n        try {\n            const wasAdded = await window.ethereum.request({\n              method: 'wallet_watchAsset',\n              params: {\n                type: 'ERC20',\n                options: {\n                  address: chain.deb0xERC20Address,\n                  symbol: tokenSymbol,\n                  decimals: tokenDecimals,\n                //   image: tokenImage,\n                },\n              },\n            });\n\n            if (wasAdded) {\n                setNotificationState({\n                    message: t(\"app_bar.toastify.token_added\"),\n                    open: true,\n                    severity: \"success\"\n                })      \n                setOpen(false)      \n            }\n            } catch (error: any) {\n                setNotificationState({\n                    message: t(\"app_bar.toastify.error\"),\n                    open: true,\n                    severity: \"info\"\n                })\n            }\n    }\n\n    function copyWalletID() {\n        if(account) {\n            navigator.clipboard.writeText(account)\n            setNotificationState({\n                message: t(\"app_bar.toastify.address_copied\"),\n                open: true,\n                severity: \"success\"\n            })\n        }\n        setOpen(false)\n        \n    }\n\n    async function rewardsAccrued() {\n        await deb0xViewsContract.getUnclaimedRewards(account).then((result: any) => \n            setRewardsUnclaimed(floorPrecised(ethers.utils.formatEther(result)))\n        )\n    }\n\n    async function setStakedAmount() {\n        await deb0xViewsContract.getAccWithdrawableStake(account).then((result: any) => \n            setUserStakedAmount(floorPrecised(ethers.utils.formatEther(result)))\n        )\n    }\n\n    const handleClick = (event: any) => {\n        rewardsAccrued();\n        setStakedAmount();\n        setUnstakedAmount();\n        const { currentTarget } = event;\n        setAnchorEl(currentTarget)\n        setOpen(!open)\n    };\n\n    const handleClickAway = () => {\n        setOpen(false)\n    };\n\n    return (\n        <ChainProvider>\n            <div>\n                <div className=\"app-bar--top\">\n                    <img className=\"logo\" src={logo} alt=\"logo\" />\n                    <Box className=\"main-menu--left\">\n                        <p className=\"mb-0\">{t(\"app_bar.tokens_staked\")}:&nbsp; \n                            {Number(totalStaked).toLocaleString('en-US', {\n                                minimumFractionDigits: 2,\n                                maximumFractionDigits: 2\n                            })} DXN</p>\n                        <p className=\"mb-0\">\n                            {t(\"app_bar.xen_burned\")}: {totalXENBurned}\n                        </p>\n                    </Box>\n                    <Box className=\"main-menu--right d-flex\">\n                        <DropdownLanguage />\n                        <ChainSetter />\n                        <ClickAwayListener onClickAway={handleClickAway}>\n                            <div>\n                                { (() =>  {\n                                    const currentConnector = connectorsByName[ConnectorNames.Injected]\n                                    const activating = currentConnector === activatingConnector\n                                    const connected = currentConnector === connector\n\n                                    return (\n                                        <Button variant=\"contained\"\n                                            key={ConnectorNames.Injected}\n                                            aria-describedby={id}\n                                            onClick={!connected ? \n                                                () => {\n                                                    setActivatingConnector(currentConnector)\n                                                    activate(currentConnector)\n                                                } : \n                                                handleClick\n                                            }>\n                                            \n                                            { activating ? \n                                                <Spinner color={'black'} /> :\n                                                !connected ? \n                                                    t(\"home.connect_text\") :\n                                                    <span>\n                                                        {account === undefined ? \n                                                            t(\"home.unsupported_network\") + ` ${networkName}` : \n                                                            account ? \n                                                                ensName === \"\" ? \n                                                                    `${formatAccountName(account)}` :\n                                                                    `${ensName.toLowerCase()} \n                                                                    (${formatAccountName(account)})`\n                                                            : ''}\n                                                    </span>\n                                            }\n                                        </Button>\n                                    )\n                                }) ()}\n                                <Popper className={`popper ${theme === \"classic\" ? \"classic\" : \"dark\"}` } id={id} open={open} anchorEl={anchorEl}>\n                                    <ul>\n                                        <li>\n                                            {t(\"app_bar.rewards\")}: <br/> \n                                            {Number(rewardsUnclaimed).toLocaleString('en-US', {\n                                                minimumFractionDigits: 2,\n                                                maximumFractionDigits: 2\n                                            })} \n                                            <span>DXN</span>\n                                        </li>\n                                        <li>\n                                            {t(\"app_bar.stake\")}: <br/>\n                                            {Number(userStakedAmount).toLocaleString('en-US', {\n                                                minimumFractionDigits: 2,\n                                                maximumFractionDigits: 2\n                                            })} \n                                            <span>DXN</span>\n                                        </li>\n                                        <li>\n                                            {t(\"app_bar.wallet\")}: <br/> \n                                            {Number(userUnstakedAmount).toLocaleString('en-US', {\n                                                minimumFractionDigits: 2,\n                                                maximumFractionDigits: 2\n                                            })} \n                                            <span>DXN</span>\n                                        </li>\n                                    </ul>\n                                    <Button \n                                        onClick={(event: any) => {\n                                            copyWalletID()\n                                        }}\n                                        className=\"copy-wallet-btn\">\n                                        <span><img src={copyIcon} alt=\"copy\" /></span>{t(\"app_bar.wallet_id\")}\n                                    </Button>\n                                    <Button\n                                        onClick={(event: any) => {\n                                            addToken()\n                                        }}\n                                        className=\"add-token-btn\">\n                                        <span><img src={walletIcon} alt=\"wallet\"/></span>{t(\"app_bar.add_token\")}\n                                    </Button>\n                                    <Button \n                                        onClick={(event: any) => {\n                                            handleClick(event)\n                                            deactivate()\n                                        }}\n                                            className=\"logout-btn\">\n                                            <span><img src={disconnectIcon} alt=\"disconnect\"/></span>{t(\"app_bar.disconnect\")}\n                                    </Button>  \n                                </Popper>\n                            </div>\n                        </ClickAwayListener>\n                    </Box>\n                </div>\n            </div>\n        </ChainProvider>\n    );\n}\n","import { useState, useEffect, useContext } from 'react';\nimport './App.css';\nimport { \n    Web3ReactProvider,\n    useWeb3React\n} from '@web3-react/core';\nimport { ethers } from \"ethers\";\nimport { useEagerConnect, useInactiveListener } from './hooks'\nimport { PermanentDrawer } from './components/App/PermanentDrawer'\nimport { Stake } from './components/App/Stake';\nimport { Box, Button } from '@mui/material';\nimport ThemeProvider from './components/Contexts/ThemeProvider';\nimport './index.scss';\nimport { injected, network } from './connectors';\nimport elephant from './photos/icons/elephant.svg';\nimport elephantWithText from './photos/icons/elephant.png';\nimport deb0xen from './photos/white_dbxen.svg';\nimport maintenanceImg from './photos/empty.png';\nimport { Spinner } from './components/App/Spinner';\nimport { AppBarComponent } from './components/App/AppBar';\nimport { Burn } from './components/App/Burn';\nimport ScreenSize from './components/Common/ScreenSize';\nimport Countdown, { zeroPad } from \"react-countdown\";\nimport { useTranslation } from 'react-i18next';\nimport DropdownLanguage from './components/DropdownLanguage';\nimport ChainContext from './components/Contexts/ChainContext';\nimport ChainProvider from './components/Contexts/ChainProvider';\n\nconst maintenance = process.env.REACT_APP_MAINTENANCE_MODE;\n\n\nenum ConnectorNames { Injected = 'Injected', Network = 'Network' };\n\nconst connectorsByName: { [connectorName in ConnectorNames]: any } = {\n  [ConnectorNames.Injected]: injected,\n  [ConnectorNames.Network]: network\n}\n\nfunction getLibrary(provider: any): ethers.providers.Web3Provider {\n  const library = new ethers.providers.Web3Provider(provider)\n\n  library.pollingInterval = 12000\n  return library\n}\n\nexport default function web3App(): any {\n    const date:any = new Date(Date.UTC(2023, 2, 16, 13, 55, 0, 0));\n    const now: any = Date.now()\n    let endDate = date.getTime() - now\n\n  return (\n        <Web3ReactProvider getLibrary={getLibrary}>\n            {/* <Countdown date={Date.now() + endDate} renderer={renderer} /> */}\n            {/* <ContractsDeployed /> */}\n            <App />\n        </Web3ReactProvider>\n    )\n}\n\nconst renderer = ({ hours, minutes, seconds, completed }: any) => {\n    if (completed) {\n      // Render a complete state\n      return <ContractsDeployed />;\n    } else {\n      // Render a countdown\n      return (\n        <ThemeProvider>\n            <div className=\"app-container p-0 \">\n                <div className=\"initial-page contracts\">\n                    <div className=\"row\">\n                        <div className=\"col-12 img-container mr-4\">\n                            <p>DBXen time in:</p>\n                            <p>\n                                {zeroPad(hours)}:{zeroPad(minutes)}:{zeroPad(seconds)}\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ThemeProvider>\n      );\n    }\n};\n\nfunction ContractsDeployed() {\n    return (\n        <ThemeProvider>\n            <div className=\"app-container p-0 \">\n                <div className=\"initial-page contracts\">\n                    <div className=\"row\">\n                        <div className=\"col-12 img-container mr-4\">\n                            <img className=\"image--left\" src={elephantWithText} alt=\"elephant\" />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ThemeProvider>\n    )\n}\n\nfunction App() {\n    const context = useWeb3React<ethers.providers.Web3Provider>()\n    const { connector, account, activate } = context\n    const [selectedIndex, setSelectedIndex] = useState<any>(0);\n    // handle logic to recognize the connector currently being activated\n    const [activatingConnector, setActivatingConnector] = useState<any>()\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const [networkName, setNetworkName] = useState<any>();\n    let errorMsg;\n    const dimensions = ScreenSize();\n    const { t } = useTranslation();\n    const { chain, setChain }  = useContext(ChainContext)\n    \n    useEffect(() => {\n        injected.supportedChainIds?.forEach(chainId => \n            setNetworkName((ethers.providers.getNetwork(chainId).name)));\n        if (activatingConnector && activatingConnector === connector) {\n            setActivatingConnector(undefined)\n        }\n    }, [activatingConnector, connector])\n\n    // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n    const triedEager = useEagerConnect()\n\n    // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n    useInactiveListener(!triedEager || !!activatingConnector)\n\n    function handleClick (event: React.MouseEvent<HTMLElement>) {\n        setAnchorEl(anchorEl ? null : event.currentTarget);\n    };\n\n    useEffect(() => {   \n        window.ethereum ?\n            window.ethereum.request({method: \"eth_requestAccounts\"}).then(() => {\n                 window.ethereum.request({\n                    method: 'eth_chainId',\n                  }).then((chainId:any) => {\n                 //   switchNetwork(chainId); \n                  })\n            }).catch((err: any) => displayErrorMsg(err))\n            : displayErrorMsg(\"Please install MetaMask\");\n    }, [])\n\n    async function switchNetwork(chainId:any) {\n        if((parseInt(chainId.toString(), 16) !== 137) && (parseInt(chainId.toString(), 16) !== 43114)){\n        try {\n            await window.ethereum.request({\n            method: 'wallet_switchEthereumChain',\n            params: [{ chainId: \"0x89\"}],\n            }).then(\n                displayErrorMsg(\"You have switched to the right network\")\n            );            \n        } catch (switchError) {\n            try {\n                await window.ethereum.request({\n                method: 'wallet_addEthereumChain',\n                params: [\n                    {\n                        chainId: '0x89', \n                        chainName:'Polygon Network',\n                        rpcUrls:['https://polygon.llamarpc.com'],                   \n                        blockExplorerUrls:['https://polygonscan.com/'],  \n                        nativeCurrency: { \n                        symbol:'Matic',   \n                        decimals: 18\n                        }       \n                    }\n                    ]});\n            } catch (err) {\n                displayErrorMsg(\"Cannot switch to the network\");\n            }\n        }\n    }\n    }\n\n    function displayErrorMsg(error: string) {\n        errorMsg = error;\n        return errorMsg;\n    }\n    \n    return (\n\n    <ChainProvider>\n        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n            {!!errorMsg &&\n                <p className='alert alert-danger position-fixed' style={{ marginTop: '4rem', marginBottom: '0' }}>\n                    {displayErrorMsg(errorMsg)}\n                </p>\n            }\n        </div>\n            <ThemeProvider>\n            { account ? \n                <div className=\"app-container container-fluid\">\n                    { maintenance === \"true\" ?\n                        <div className=\"row main-row maintenance-mode\">\n                            <img className=\"maintenance-img\" src={maintenanceImg} alt=\"maintenance\" />\n                            <h1>Maintenance Mode</h1>\n                            <h4>We're tightening some nuts and bolts round the back. We'll be back up and running soon.</h4>\n                        </div> :\n                        <div className=\"row main-row\">\n                            <div className=\"col col-lg-3 col-12 p-0 side-menu-container\">\n                                <PermanentDrawer />\n                            </div>\n                            <div className=\"col col-lg-9 col-12\">\n                                <AppBarComponent />\n                                \n                                <Box className=\"main-container\" sx={{marginTop: 12}}>\n                                {dimensions.width > 768 ? \n                                    <Stake />\n                                    :\n                                    <>\n                                        {selectedIndex === 0 && <Burn /> }\n                                        {selectedIndex === 1 && <Stake /> }\n                                    </>\n                                }\n                                </Box>\n                            </div>\n                        </div>\n                    }\n                    <div className=\"navigation-mobile\">\n                        <div className={`navigation-item ${selectedIndex === 0 ? \"active\" : \"\"}`}\n                            onClick={() => setSelectedIndex(0)}>\n                                {t(\"mobile.mint\")}\n                        </div>\n                        <div className={`navigation-item ${selectedIndex === 1 ? \"active\" : \"\"}`}\n                            onClick={() => setSelectedIndex(1)}>\n                                {t(\"mobile.fees\")}\n                        </div>\n                    </div>\n                </div> :\n                <div className=\"app-container p-0 \">\n                    <div className=\"initial-page\">\n                    <DropdownLanguage />\n                        <div className=\"row\">\n                            <div className=\"col-lg-7 img-container mr-4\">\n                                <img className=\"image--left\" src={elephant} alt=\"elephant\" />\n                                <div className=\"img-content\">\n                                    <p>{t(\"home.connect_text\")}</p>\n                                    <p>{t(\"home.burn_text\")}</p>\n                                    <p>{t(\"home.earn_text\")}</p>\n                                    \n                                    <div>\n                                        { (() =>  {\n                                            const currentConnector = connectorsByName[ConnectorNames.Injected]\n                                            const activating = currentConnector === activatingConnector\n                                            const connected = currentConnector === connector\n\n                                            return (\n                                                <Button variant=\"contained\"\n                                                    key={ConnectorNames.Injected}\n                                                    // aria-describedby={id}\n                                                    onClick={!connected ? \n                                                        () => {\n                                                            setActivatingConnector(currentConnector)\n                                                            activate(currentConnector)\n                                                        } : \n                                                        handleClick}\n                                                        className=\"connect-button\">\n                                                    \n                                                    { activating ? \n                                                        <Spinner color={'black'} /> :\n                                                        !connected ? \n                                                            \"Connect\" :\n                                                            <span  className=\"unsupported\">\n                                                                {typeof window.ethereum === 'undefined' ? \n                                                                    `Check your prerequisites` : \n                                                                    account === undefined ? `Switch to POLYGON/AVALANCHE` : ''}\n                                                            </span>\n                                                    }\n                                                </Button>\n                                            )\n                                        }) ()}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"col-12 col-lg-5 text-center\">\n                                <div className=\"text-container\">\n                                    <img className=\"dark-logo\" src={deb0xen} alt=\"logo\" />\n                                    <p>\n                                        Community built crypto protocol <br/> contributing to XEN deflation\n                                    </p>\n                                    <div className=\"connect-mobile\">\n                                        { (() =>  {\n                                            const currentConnector = connectorsByName[ConnectorNames.Injected]\n                                            const activating = currentConnector === activatingConnector\n                                            const connected = currentConnector === connector\n\n                                        return (\n                                            <Button variant=\"contained\"\n                                                key={ConnectorNames.Injected}\n                                                // aria-describedby={id}\n                                                onClick={!connected ? \n                                                    () => {\n                                                        setActivatingConnector(currentConnector)\n                                                        activate(currentConnector)\n                                                    } : \n                                                    handleClick}\n                                                    className=\"connect-button\">\n                                                \n                                                { activating ? \n                                                    <Spinner color={'black'} /> :\n                                                    !connected ? \n                                                        t(\"home.connect\") :\n                                                        <span>\n                                                            {typeof window.ethereum === 'undefined' ? \n                                                                t(\"home.prerequisites\") : \n                                                                account === undefined ? t(\"home.unsupported_network\") + ` ${networkName}` : ''}\n                                                        </span>\n                                                }\n                                            </Button>\n                                        )\n                                    }) ()}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        }\n        </ThemeProvider>\n    </ChainProvider>\n  )\n}\n\n\n","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\n\nimport { injected } from './connectors'\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        setTried(true)\n      }\n    })\n  }, [activate]) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport function useInactiveListener(suppress: boolean = false) {\n  const { active, error, activate } = useWeb3React()\n\n  useEffect((): any => {\n    const { ethereum } = window as any\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        activate(injected)\n      }\n      const handleChainChanged = (chainId: string | number) => {\n        activate(injected)\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        if (accounts.length > 0) {\n          activate(injected)\n        }\n      }\n      const handleNetworkChanged = (networkId: string | number) => {\n        activate(injected)\n      }\n\n      ethereum.on('connect', handleConnect)\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n      ethereum.on('networkChanged', handleNetworkChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('connect', handleConnect)\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n          ethereum.removeListener('networkChanged', handleNetworkChanged)\n        }\n      }\n    }\n  }, [active, error, suppress, activate])\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport Backend from \"i18next-http-backend\";\n\ni18n\n    .use(Backend)\n    .use(initReactI18next)\n    .init({\n        lng: JSON.parse(localStorage.getItem('language')),\n        fallbackLng: \"en\",\n        interpolation: {\n            escapeValue: false\n        },\n        react: { \n            useSuspense: false\n        }\n    });\n\nexport default i18n;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './i18n';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}