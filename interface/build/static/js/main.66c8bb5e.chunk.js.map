{"version":3,"sources":["connectors.ts","components/Common/ScreenSize.tsx","components/App/Snackbar.tsx","photos/icons/file-icon.svg","ethereum/XENCrypto.js","ethereum/dbxen.js","components/App/Spinner.tsx","components/Contexts/ChainContext.tsx","components/App/Burn.tsx","components/Common/AccountName.tsx","components/App/PermanentDrawer.tsx","ethereum/dbxenViews.js","ethereum/dbxenerc20.js","photos/icons/coin-bag-solid--light.svg","photos/icons/token.svg","photos/icons/coin-bag-solid--dark.svg","photos/icons/wallet--light.svg","photos/icons/wallet--dark.svg","photos/icons/fees.svg","photos/icons/finance.svg","ethereum/signer.js","ethereum/forwarder.js","components/App/Stake.tsx","components/Common/GaEventTracker.tsx","components/Contexts/ThemeContext.tsx","components/Contexts/ThemeProvider.tsx","photos/icons/elephant.svg","photos/white_dbxen.svg","photos/icons/elephant.png","photos/empty.png","photos/icons/copy-1.svg","photos/icons/wallet.svg","photos/icons/diconnect.svg","components/Contexts/ChainProvider.tsx","photos/icons/polygon.svg","photos/icons/avalanche.svg","components/Contexts/ChainSetter.tsx","components/App/AppBar.tsx","App.tsx","hooks.ts","reportWebVitals.ts","index.tsx"],"names":["RPC_URLS","injected","InjectedConnector","supportedChainIds","network","NetworkConnector","urls","defaultChainId","useWindowSize","useState","width","height","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","Alert","forwardRef","props","ref","elevation","variant","SnackbarNotification","severity","state","open","message","setState","handleClose","event","reason","Snackbar","autoHideDuration","onClose","sx","abi","require","signerOrProvider","address","ethers","Contract","Spinner","color","rest","viewBox","xmlns","stroke","fill","fillRule","transform","strokeWidth","strokeOpacity","cx","cy","r","d","attributeName","type","from","to","dur","repeatCount","initialChain","chain","deb0xAddress","deb0xViewsAddress","deb0xERC20Address","xenCryptoAddress","chainId","chainName","currency","setChain","_value","ChainContext","createContext","BigNumber","Burn","context","useWeb3React","library","account","notificationState","setNotificationState","value","setValue","approveBurn","setApproveBurn","balanceGratherThanZero","checkBalance","maticValue","setMaticValue","totalCost","setTotalCost","totalAmountOfXEN","setXENAmount","loading","setLoading","gasLimit","setCurrentGasLimit","valueAndFee","setValueAndFee","totalBatchApproved","setBatchApproved","maxAvailableBatch","setMaxBatch","useContext","getAllowanceForAccount","signer","getSigner","xenContract","XENCrypto","allowance","then","amount","batchApproved","Number","utils","formatEther","Math","trunc","setBalance","balanceOf","balance","number","toString","estimationValues","priceURL","options","method","url","port","headers","data","JSON","stringify","deb0xContract","DBXen","getCurrentCycle","currentCycle","cycleTotalBatchesBurned","numberBatchesBurnedInCurrentCycle","axios","request","result","price","web3","fromWei","protocol_fee","gasLimitVal","fee","totalValue","toFixed","total","amountToApprove","undefined","increaseAllowance","parseEther","wait","catch","error","gasLimitIntervalValue","currentValue","overrides","parseUnits","tx","console","log","setTimeout","className","max","onChange","e","target","onClick","toLocaleString","minimumFractionDigits","maximumFractionDigits","LoadingButton","loadingPosition","disabled","burnXEN","setApproval","formatAccountName","substring","length","PermanentDrawer","connector","activatingConnector","setActivatingConnector","dimensions","ScreenSize","setNetworkName","baseUrl","setBaseUrl","forEach","providers","getNetwork","name","Box","display","Drawer","anchor","href","icon","faTwitter","size","src","document","faGithub","faTelegram","ethSigUtil","ethereumJsUtil","typeName","typeHash","id","EIP712Domain","ForwardRequest","getMetaTxTypeData","verifyingContract","types","domain","version","primaryType","signTypedData","argData","send","buildRequest","forwarder","input","valueParam","getNonce","nonce","gas","validUntilTime","buildTypedData","provider","n","typeData","getDomainSeparator","bufferToHex","TypedDataUtils","hashStruct","signMetaTxRequest","toSign","signature","domainSeparator","createInstance","whitelist","dataFromWhitelist","Stake","category","activate","gaEventTracker","action","ReactGA","setPreviousCycleXENBurned","datePolygon","Date","UTC","dateAvalance","now","endDatePolygon","getTime","endDateAvalance","renderer","hours","minutes","seconds","completed","zeroPad","FeesPanel","feesUnclaimed","setFeesUnclaimed","getTotalXenBurnedInPreviusCycle","toNumber","deb0xViewsContract","DBXenViews","getUnclaimedFees","fetchClaimFeesResult","fetch","body","response","json","parse","status","sendClaimFeesTx","claimFees","getAddress","includes","interface","encodeFunctionData","feesAccrued","totalXenBurnedPreviousCycle","Card","CardContent","Typography","component","date","fees","alt","CardActions","CyclePanel","currentReward","setCurrentReward","ethereum","currentCycleReward","getChainId","cycleReward","RewardsPanel","rewardsUnclaimed","setRewardsUnclaimed","feeSharePercentage","setFeeSharePercentage","getUnclaimedRewards","unclaimedRewards","getAccWithdrawableStake","accWithdrawableStake","parseFloat","add","currentStartedCycle","summedCycleStakes","totalSupply","feeShare","round","fetchClaimRewardsResult","sendClaimRewardsTx","claimRewards","rewardsAccrued","finance","StakeUnstake","alignment","setAlignment","userStakedAmount","setUserStakedAmount","userUnstakedAmount","setUserUnstakedAmount","tokensForUnstake","setTokenForUnstake","totalStaked","setTotalStaked","amountToUnstake","setAmountToUnstake","amountToStake","setAmountToStake","approved","setApproved","localStorage","getItem","theme","setTheme","accFirstStake","firstStakeCycle","accSecondStake","secondStakeCycle","accStakeCycle","firstStakeCycleAmount","secondStakeCycleAmount","withdawbleStake","totalStakedAmount","setTokensForUntakedAmount","DBXenERC20","deb0xERC20Contract","slice","indexOf","approve","fetchUnstakeResult","sendUnstakeTx","unstake","fetchStakeResult","sendStakeTx","stake","tokensInWallet","setStakedAmount","totalAmountStaked","setUnstakedAmount","ToggleButtonGroup","exclusive","newAlignment","ToggleButton","coinBagDark","coinBagLight","walletDark","walletLight","Grid","container","item","OutlinedInput","placeholder","inputProps","min","Button","initialThemeState","ThemeContext","ThemeProvider","children","savedThemeLocal","setItem","Provider","ChainProvider","parseInt","networks","polygon","nativeCurrency","symbol","decimals","rpcUrls","blockExplorerUrls","avalanche","ChainSetter","anchorEl","setAnchorEl","setOpen","on","networkChanged","removeListener","changeNetwork","networkName","setError","Error","params","handleNetworkSwitch","location","reload","ClickAwayListener","onClickAway","currentTarget","charAt","toUpperCase","Popper","ConnectorNames","tokenSymbol","connectorsByName","Injected","AppBarComponent","deactivate","ensName","totalXENBurned","setTotalXENBurned","xenBurned","getTotalXenBurned","totalNumberOfBatchesBurned","batchBurned","floorPrecised","power","pow","floor","currentStake","pendingStakeWithdrawal","sub","filterFrom","filters","Transfer","filterTo","removeAllListeners","handleClick","logo","currentConnector","activating","connected","toLowerCase","navigator","clipboard","writeText","copyIcon","addToken","walletIcon","disconnectIcon","maintenance","process","REACT_APP_MAINTENANCE_MODE","Network","getLibrary","Web3Provider","pollingInterval","web3App","App","errorMsg","selectedIndex","setSelectedIndex","triedEager","active","tried","setTried","isAuthorized","useEagerConnect","displayErrorMsg","suppress","handleConnect","handleChainChanged","handleAccountsChanged","accounts","handleNetworkChanged","networkId","useInactiveListener","err","style","flexDirection","alignItems","marginTop","marginBottom","maintenanceImg","elephant","deb0xen","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.66c8bb5e.chunk.js","sourcesContent":["\nimport { InjectedConnector } from '@web3-react/injected-connector'\nimport { NetworkConnector } from '@web3-react/network-connector'\n\n// const POLLING_INTERVAL = 12000\nconst RPC_URLS: { [chainId: number]: string } = {\n    137: 'https://polygon-mainnet.infura.io/v3/6010818c577b4531b1886965421a91d3',\n    43114: 'https://avalanche-mainnet.infura.io/v3/6010818c577b4531b1886965421a91d3'\n}\n\nexport const injected = new InjectedConnector({ supportedChainIds: [137, 43114 ] })\n\nexport const network = new NetworkConnector({\n    urls: { 137: RPC_URLS[137], 43114: RPC_URLS[43114] },\n    defaultChainId: 137\n})","import React, { useState, useEffect } from 'react'\n\nexport default function useWindowSize() {\n    // Initialize state with undefined width/height so server and client renders match\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n    const [windowSize, setWindowSize] = useState({\n      width: 0,\n      height: 0,\n    });\n    useEffect(() => {\n      // Handler to call on window resize\n      function handleResize() {\n        // Set window width/height to state\n        setWindowSize({\n          width: window.innerWidth,\n          height: window.innerHeight,\n        });\n      }\n      // Add event listener\n      window.addEventListener(\"resize\", handleResize);\n      // Call handler right away so state gets updated with initial window size\n      handleResize();\n      // Remove event listener on cleanup\n      return () => window.removeEventListener(\"resize\", handleResize);\n    }, []); // Empty array ensures that effect is only run on mount\n    return windowSize;\n  }","import { useState, forwardRef, useEffect } from 'react'\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\nconst Alert = forwardRef<HTMLDivElement, AlertProps>(function Alert(\n  props,\n  ref,\n) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport default function SnackbarNotification(props: any) {\n\n  const [state, setState] = useState({ severity: props.state.severity, open: props.state.open, message: props.state.message })\n\n  useEffect(() => {\n    setState({severity: props.state.severity, open: props.state.open, message: props.state.message})\n  }, [props])\n\n  const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setState({\n      message: state.message, open: false,\n      severity: state.severity\n    })\n  };\n\n  return (\n    <Snackbar open={state.open} autoHideDuration={6000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity={state.severity} sx={{ width: '100%' }}>\n        {state.message}\n      </Alert>\n    </Snackbar>\n  )\n}","export default __webpack_public_path__ + \"static/media/file-icon.92106822.svg\";","import { ethers } from \"ethers\";\n\nconst { abi } = require(\"./XENCrypto.json\");\n\nexport default (signerOrProvider, address) => {\n    return new ethers.Contract(address, abi, signerOrProvider);\n}","import { ethers } from \"ethers\";\n\nconst { abi } = require(\"./DBXen.json\");\n\nexport default (signerOrProvider, address) => {\n  return new ethers.Contract(address, abi, signerOrProvider);\n}","// <!-- By Sam Herbert (@sherb), for everyone. More @ http://goo.gl/7AJzbL -->\nexport function Spinner({ color, ...rest }: any) {\n    return (\n        <svg width=\"38\" height=\"38\" viewBox=\"0 0 38 38\" \n            xmlns=\"http://www.w3.org/2000/svg\" stroke={color} {...rest}>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <g transform=\"translate(1 1)\" strokeWidth=\"2\">\n                    <circle strokeOpacity=\".5\" cx=\"18\" cy=\"18\" r=\"18\" />\n                    <path d=\"M36 18c0-9.94-8.06-18-18-18\">\n                    <animateTransform\n                        attributeName=\"transform\"\n                        type=\"rotate\"\n                        from=\"0 18 18\"\n                        to=\"360 18 18\"\n                        dur=\"1s\"\n                        repeatCount=\"indefinite\" />\n                    </path>\n                </g>\n            </g>\n        </svg>\n    )\n}","import { createContext } from \"react\";\n\nexport const initialChain = {\n    chain: {\n        deb0xAddress: \"0x4F3ce26D9749C0f36012C9AbB41BF9938476c462\",\n        deb0xViewsAddress: \"0xCF7582E5FaC8a6674CcD96ce71D807808Ca8ba6E\",\n        deb0xERC20Address: \"0x47DD60FA40A050c0677dE19921Eb4cc512947729\",\n        xenCryptoAddress: \"0x2AB0e9e4eE70FFf1fB9D67031E44F6410170d00e\",\n        chainId: \"137\",\n        chainName: \"polygon\",\n        currency: \"MATIC\"\n    },\n    setChain: (_value: any) => {}\n}\n\nconst ChainContext = createContext(initialChain);\nexport default ChainContext;","import { useState, useEffect, useContext } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport XENCrypto from '../../ethereum/XENCrypto';\nimport DBXen from \"../../ethereum/dbxen\"\nimport { ethers } from \"ethers\";\nimport \"../../componentsStyling/permanentDrawer.scss\";\nimport SnackbarNotification from './Snackbar';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport { Spinner } from './Spinner';\nimport axios, { Method } from 'axios';\nimport web3 from 'web3';\nimport ChainContext from '../Contexts/ChainContext';\nconst { BigNumber } = require(\"ethers\");\n\nexport function Burn(): any {\n    const context = useWeb3React()\n    const { library, account } = context\n    const [notificationState, setNotificationState] = useState({});\n    const [value, setValue] = useState(1);\n    const [approveBurn, setApproveBurn] = useState<boolean>(false);\n    const [balanceGratherThanZero, checkBalance] = useState(\"\");\n    const [maticValue, setMaticValue] = useState<any>();\n    const [totalCost, setTotalCost] = useState<any>();\n    const [totalAmountOfXEN, setXENAmount] = useState<any>();\n    const [loading, setLoading] = useState(false)\n    const [gasLimit, setCurrentGasLimit] = useState<number>();\n    const [valueAndFee, setValueAndFee] = useState<any>();\n    const [totalBatchApproved, setBatchApproved] = useState<number>();\n    const [maxAvailableBatch, setMaxBatch] = useState<number>(0);\n    const { chain }  = useContext(ChainContext)\n\n    useEffect(() => {\n        getAllowanceForAccount();\n        estimationValues();\n    }, [account]);\n\n    useEffect(() => {\n    }, [chain.deb0xAddress]);\n\n    useEffect(() => {\n        getAllowanceForAccount();\n        setXENAmount(value * 2500000);\n        estimationValues();\n        setBalance();\n    }, [value]);\n\n    useEffect(() => {\n        setBalance()\n    }, [account, balanceGratherThanZero]);\n\n    async function getAllowanceForAccount() {\n        const signer = library.getSigner(0)\n        const xenContract = XENCrypto(signer, chain.xenCryptoAddress);\n        await xenContract.allowance(account, chain.deb0xAddress).then((amount: any) =>{\n            let batchApproved = Number(ethers.utils.formatEther(amount)) / 2500000;\n            setBatchApproved(Math.trunc(batchApproved));\n            Number(ethers.utils.formatEther(amount)) < value * 2500000 ?\n                setApproveBurn(false) :\n                setApproveBurn(true)\n                setBalance();\n            })\n   \n    }\n\n    async function setBalance() {\n        setLoading(true);\n        const signer = library.getSigner(0)\n        const xenContract = XENCrypto(signer, chain.xenCryptoAddress);\n        let number;\n\n        await xenContract.balanceOf(account).then((balance: any) => {\n            number = ethers.utils.formatEther(balance);\n            setMaxBatch(Math.trunc(Number(number)/2500000))\n            checkBalance(number.toString())\n            setLoading(false);\n        })\n    }\n\n    async function estimationValues() {\n        let priceURL = \"\";\n        (Number(chain.chainId)) === 137 ?\n            priceURL = \"https://polygon-mainnet.infura.io/v3/6010818c577b4531b1886965421a91d3\" :\n            priceURL = \"https://avalanche-mainnet.infura.io/v3/6010818c577b4531b1886965421a91d3\"\n\n        let method: Method = 'POST';\n        const options = {\n            method: method,\n            url: priceURL,\n            port: 443,\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            data: JSON.stringify({\n                \"jsonrpc\": \"2.0\", \"method\": \"eth_gasPrice\", \"params\": [], \"id\": 1\n            })\n        };\n\n        const signer = library.getSigner(0)\n        const deb0xContract = DBXen(signer, chain.deb0xAddress)\n        await deb0xContract.getCurrentCycle().then(async (currentCycle: any) => {\n            await deb0xContract.cycleTotalBatchesBurned(currentCycle).then(\n                async (numberBatchesBurnedInCurrentCycle: any) => {\n                    await axios.request(options).then((result) => {\n                        let price = Number(web3.utils.fromWei(result.data.result.toString(), \"Gwei\"));\n                        let protocol_fee = value * (1 - 0.00005 * value);\n                        let gasLimitVal = 0;\n                        (Number(chain.chainId)) === 137 ?\n                        numberBatchesBurnedInCurrentCycle != 0 ?\n                            gasLimitVal = (BigNumber.from(\"350000\")) :\n                            gasLimitVal = (BigNumber.from(\"500000\"))\n                        :\n                        numberBatchesBurnedInCurrentCycle != 0 ?\n                        gasLimitVal = (BigNumber.from(\"500000\")) :\n                        gasLimitVal = (BigNumber.from(\"700000\"))\n                        setCurrentGasLimit(gasLimitVal);\n                        let fee = gasLimitVal * price * protocol_fee / 1000000000;\n                        let totalValue = fee + (fee / ((1 - 0.00005 * value) * value));\n\n                        setValueAndFee({ fee: fee.toFixed(4), total: totalValue.toFixed(4) })\n                        setMaticValue(fee.toFixed(4));\n                        setTotalCost(totalValue.toFixed(4));\n                    })\n                }\n            )\n        })\n    }\n\n    async function setApproval() {\n        setLoading(true);\n        const signer = library.getSigner(0)\n        const xenContract = XENCrypto(signer, chain.xenCryptoAddress)\n        let amountToApprove = 0;\n            if(totalBatchApproved != undefined){\n                if(value > totalBatchApproved){\n                    amountToApprove = value - totalBatchApproved;\n                }\n            }\n        try {\n            const tx = await xenContract.increaseAllowance(chain.deb0xAddress, ethers.utils.parseEther(Number(amountToApprove*2500000).toString()))\n            tx.wait()\n                .then((result: any) => {\n                    getAllowanceForAccount();\n                    setNotificationState({\n                        message: \"Your succesfully approved contract for burn.\", open: true,\n                        severity: \"success\"\n                    })\n                    setLoading(false)\n                })\n                .catch((error: any) => {\n                    setNotificationState({\n                        message: \"Contract couldn't be approved for burn!\", open: true,\n                        severity: \"error\"\n                    })\n                    setLoading(false)\n                })\n        } catch (error) {\n            setNotificationState({\n                message: \"You rejected the transaction. Contract hasn't been approved for burn.\", open: true,\n                severity: \"info\"\n            })\n            setLoading(false)\n        }\n    }\n\n    async function burnXEN() {\n        setLoading(true)\n        const signer = await library.getSigner(0)\n        const deb0xContract = DBXen(signer, chain.deb0xAddress)\n        let gasLimitIntervalValue = gasLimit\n        let currentValue = valueAndFee.fee;\n  \n        try {\n            const overrides =\n            {\n                value: ethers.utils.parseUnits(currentValue.toString(), \"ether\"),\n                gasLimit: gasLimitIntervalValue\n            }\n            const tx = await deb0xContract[\"burnBatch(uint256)\"](value, overrides)\n\n            await tx.wait()\n                .then((result: any) => {\n                    setNotificationState({\n                        message: \"Burn completed\",\n                        open: true,\n                        severity: \"success\"\n                    })\n                    getAllowanceForAccount();\n                    setLoading(false)\n                })\n                .catch((error: any) => {\n                    setNotificationState({\n                        message: \"Something went wrong!\",\n                        open: true,\n                        severity: \"error\"\n                    })\n                    setLoading(false)\n                })\n        } catch (error: any) {\n            console.log(error.message)\n            setNotificationState({\n                message: \"You rejected the transaction.\",\n                open: true,\n                severity: \"info\"\n            })\n            setLoading(false)\n        }\n    }\n\n    useEffect(() => {\n        setTimeout(() => { setNotificationState({}) }, 2000)\n    }, [notificationState])\n\n    const handleInputChange = (e: any) => {\n        if (value > 10000) {\n            setValue(10000)\n        } else {\n            setValue(e.target.value);\n        }\n    }\n\n    const incNum = () => {\n        if (value < 10000)\n            setValue(Number(value) + 1);\n    };\n\n    const decNum = () => {\n        if (value > 1)\n            setValue(value - 1);\n    }\n\n    useEffect(() => {\n        if (value > 10000) {\n            setValue(10000)\n        }\n        if (value <= 0) {\n            setValue(1)\n        }\n    }, [value])\n\n    return (\n        <>\n            <SnackbarNotification state={notificationState}\n                setNotificationState={setNotificationState} />\n            <div className=\"side-menu--bottom burn-container\">\n                <div className=\"row\">\n                    <p className=\"text-center mb-0\">Choose the number of XEN batches you want to burn</p>\n                    <p className=\"text-center\">(1 batch = 2,500,000 XEN)</p>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col input-col\">\n                        <input type=\"number\" value={value} max=\"10000\" onChange={handleInputChange} />\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <button className=\"btn count-btn col\" type=\"button\" onClick={decNum}>-</button>\n                    <button className=\"btn count-btn col\" type=\"button\" onClick={incNum}>+</button>\n                </div>\n                <div className=\"row\">\n                    <button className=\"btn count-btn max-btn col\" type=\"button\"\n                        onClick={() => setValue(10000)}>MAX</button>\n                </div>\n                <div className=\"values-container\">\n                    <div className=\"value-content\">\n                        <p>Protocol Fee:</p>\n                        <p> ~{maticValue} {chain.currency}</p>\n                    </div>\n                    <div className=\"value-content\">\n                        <p>Total transaction cost:</p>\n                        <p> ~{totalCost} {chain.currency}</p>\n                    </div>\n                    <div className=\"value-content\">\n                        <p>Total XEN burned:</p>\n                        <p>\n                            {Number(totalAmountOfXEN).toLocaleString('en-US', {\n                                minimumFractionDigits: 2,\n                                maximumFractionDigits: 2\n                            })} XEN</p>\n                    </div>\n                </div>\n                {approveBurn ?\n                maxAvailableBatch < value ?\n                    <LoadingButton className=\"burn-btn\"\n                    loadingPosition=\"end\"\n                    disabled={true}>\n                    {loading ? <Spinner color={'black'} /> : \"Insufficient XEN balance\"}\n                </LoadingButton> :\n                    <LoadingButton className=\"burn-btn\"\n                        loadingPosition=\"end\"\n                        onClick={() => burnXEN()} >\n                        {loading ? <Spinner color={'black'} /> : \"Burn XEN\"}\n                    </LoadingButton> :\n                    balanceGratherThanZero === '0.0' || balanceGratherThanZero === '0' ?\n                        <LoadingButton className=\"burn-btn\"\n                            loadingPosition=\"end\"\n                            disabled={balanceGratherThanZero === '0.0' || balanceGratherThanZero === '0'}>\n                            {loading ? <Spinner color={'black'} /> : \"Your balance is 0!\"}\n                        </LoadingButton> :\n                        <LoadingButton className=\"burn-btn\"\n                            loadingPosition=\"end\"\n                            disabled={balanceGratherThanZero === '0.0' || balanceGratherThanZero === '0'}\n                            onClick={() => setApproval()} >\n                            {loading ? <Spinner color={'black'} /> : \"Approve Burn XEN\"}\n                        </LoadingButton>\n                }\n            </div>\n        </>\n    )\n}\n","export default function formatAccountName(account: string)\n{   \n    return `${account.substring(0, 5)}...${account.substring(account.length - 4)}`\n}","import React, { useState, useEffect, useContext, useDebugValue } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport Box from '@mui/material/Box';\nimport Drawer from '@mui/material/Drawer';\nimport { injected } from '../../connectors';\nimport XENCrypto from '../../ethereum/XENCrypto';\nimport DBXen from \"../../ethereum/dbxen\"\nimport { ethers } from \"ethers\";\nimport \"../../componentsStyling/permanentDrawer.scss\";\nimport ScreenSize from '../Common/ScreenSize';\nimport SnackbarNotification from './Snackbar';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport { Spinner } from './Spinner';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter, faGithub, faTelegram } from \"@fortawesome/free-brands-svg-icons\";\nimport document from \"../../photos/icons/file-icon.svg\";\nimport axios, { Method } from 'axios';\nimport web3 from 'web3';\nimport { Burn } from './Burn';\nimport formatAccountName from '../Common/AccountName';\nimport ChainContext from '../Contexts/ChainContext';\nimport ChainSetter from '../Contexts/ChainSetter';\n\ndeclare global {\n    interface Window {\n        ethereum: any;\n    }\n}\n\nexport function PermanentDrawer(props: any): any {\n    const context = useWeb3React()\n    const { connector } = context\n    const [activatingConnector, setActivatingConnector] = useState<any>()\n    const dimensions = ScreenSize();\n    const [notificationState, setNotificationState] = useState({});\n    const [networkName, setNetworkName] = useState<any>();\n    const { chain } = useContext(ChainContext);\n    const [baseUrl, setBaseUrl] = useState(\"\");\n\n    useEffect(() => {\n        injected.supportedChainIds?.forEach(chainId =>\n            setNetworkName((ethers.providers.getNetwork(chainId).name)));\n        if (activatingConnector && activatingConnector === connector) {\n            setActivatingConnector(undefined)\n        }\n    }, [activatingConnector, connector])\n\n    useEffect(() => {\n        Number(chain.chainId) === 137 ?\n            setBaseUrl(\"https://polygonscan.com/address/\") :\n            setBaseUrl(\"https://snowtrace.io/address/\")\n    }, [])\n\n    useEffect(() => {\n        setTimeout(() => { setNotificationState({}) }, 2000)\n    }, [notificationState])\n    return (\n        <>\n            <SnackbarNotification state={notificationState}\n                setNotificationState={setNotificationState} />\n            {dimensions.width > 768 ?\n                <Box className=\"side-menu-box\" sx={{ display: 'flex' }}>\n                    <Drawer variant=\"permanent\"\n                        anchor='left'\n                        className=\"side-menu\">\n                        <div className=\"image-container\">\n                            <div className=\"img\"></div>\n                        </div>\n                        <Burn />\n                        <div className=\"content\">\n                            <div className=\"social-media\">\n                                <a href=\"https://twitter.com/DBXen_crypto\" target=\"_blank\" className=\"logo-text-color\">\n                                    <FontAwesomeIcon icon={faTwitter} size=\"xl\" />\n                                </a>\n                                <a href=\"https://dbxen.gitbook.io/dbxen-litepaper/\" target=\"_blank\" className=\"logo-text-color\">\n                                    <img src={document} />\n                                </a>\n                                <a href=\"https://github.com/deb0x/dbXenBurnerProject\" target=\"_blank\" className=\"logo-text-color\">\n                                    <FontAwesomeIcon icon={faGithub} size=\"xl\" />\n                                </a>\n                                <a href=\"https://t.me/+_Q3prZI35gJkZmI0\" target=\"_blank\" className=\"logo-text-color\">\n                                    <FontAwesomeIcon icon={faTelegram} size=\"xl\" />\n                                </a>\n                            </div>\n                            <div className=\"contracts\">\n                                <div className=\"row\">\n                                    <span className=\"col-6\">DBXen: </span>\n                                    <a className=\"col-6\" target=\"_blank\"\n                                        href={baseUrl+chain.deb0xAddress}>\n                                        {formatAccountName(chain.deb0xAddress)}\n                                    </a>\n                                </div>\n                                <div className=\"row\">\n                                    <span className=\"col-6\">DBXenERC20: </span>\n                                    <a className=\"col-6\" target=\"_blank\"\n                                        href={baseUrl+chain.deb0xERC20Address}>\n                                        {formatAccountName(chain.deb0xERC20Address)}\n                                    </a>\n                                </div>\n                                <div className=\"row\">\n                                    <span className=\"col-6\">DBXenViews:</span>\n                                    <a className=\"col-6\" target=\"_blank\"\n                                        href={baseUrl+chain.deb0xViewsAddress}>\n                                        {formatAccountName(chain.deb0xViewsAddress)}\n                                    </a>\n                                </div>\n                            </div>\n                        </div>\n                    </Drawer>\n                </Box> : <></>\n            }\n\n        </>\n    );\n}","import { ethers } from \"ethers\";\n\nconst { abi } = require(\"./DBXenViews.json\");\n\nexport default (signerOrProvider, address) => {\n    return new ethers.Contract(address, abi, signerOrProvider);\n}","import { ethers } from \"ethers\";\n\nconst { abi } = require(\"./DBXenERC20.json\");\n\nexport default (signerOrProvider, address) => {\n    return new ethers.Contract(address, abi, signerOrProvider);\n}\n","export default __webpack_public_path__ + \"static/media/coin-bag-solid--light.d9344235.svg\";","export default __webpack_public_path__ + \"static/media/token.0bd78e9a.svg\";","export default __webpack_public_path__ + \"static/media/coin-bag-solid--dark.b9b74873.svg\";","export default __webpack_public_path__ + \"static/media/wallet--light.60fbc32b.svg\";","export default __webpack_public_path__ + \"static/media/wallet--dark.307c5384.svg\";","export default __webpack_public_path__ + \"static/media/fees.50cb4df6.svg\";","export default __webpack_public_path__ + \"static/media/finance.d8ebf4c0.svg\";","const ethSigUtil = require('eth-sig-util');\n\nconst ethers = require('ethers')\n\nconst ethereumJsUtil = require('ethereumjs-util')\n\nconst GENERIC_PARAMS = 'address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data,uint256 validUntilTime'\nconst typeName = `ForwardRequest(${GENERIC_PARAMS})`\nconst typeHash = ethers.utils.id(typeName)\n\nconst EIP712Domain = [\n    { name: 'name', type: 'string' },\n    { name: 'version', type: 'string' },\n    { name: 'chainId', type: 'uint256' },\n    { name: 'verifyingContract', type: 'address' }\n];\n\nconst ForwardRequest = [\n    { name: 'from', type: 'address' },\n    { name: 'to', type: 'address' },\n    { name: 'value', type: 'uint256' },\n    { name: 'gas', type: 'uint256' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'data', type: 'bytes' },\n    { name: 'validUntilTime', type: 'uint256' }\n];\n\nfunction getMetaTxTypeData(chainId, verifyingContract) {\n    return {\n        types: {\n            EIP712Domain,\n            ForwardRequest,\n        },\n        domain: {\n            name: 'Forwarder',\n            version: '0.0.1',\n            chainId,\n            verifyingContract,\n        },\n        primaryType: 'ForwardRequest',\n    }\n};\n\nasync function signTypedData(signer, from, data) {\n    const [method, argData] = ['eth_signTypedData_v4', JSON.stringify(data)]\n    return await signer.send(method, [from, argData]);\n}\n\nasync function buildRequest(forwarder, input, valueParam) {\n    const value = valueParam ? valueParam : '0';\n    const nonce = await forwarder.getNonce(input.from).then(nonce => nonce.toString());\n    return { value, gas: '100000', nonce, validUntilTime: '0', ...input };\n}\n\nasync function buildTypedData(forwarder, request) {\n    const chainId = await forwarder.provider.getNetwork().then(n => n.chainId);\n    const typeData = getMetaTxTypeData(chainId, forwarder.address);\n    return {...typeData, message: request };\n}\n\nasync function getDomainSeparator(forwarder) {\n    const chainId = await forwarder.provider.getNetwork().then(n => n.chainId);\n    const typeData = getMetaTxTypeData(chainId, forwarder.address);\n    return ethereumJsUtil.bufferToHex(ethSigUtil.TypedDataUtils.hashStruct('EIP712Domain', typeData.domain, { EIP712Domain }, 'V4'))\n}\n\nexport async function signMetaTxRequest(signer, forwarder, input, value) {\n    const request = await buildRequest(forwarder, input, value);\n    const toSign = await buildTypedData(forwarder, request);\n    const signature = await signTypedData(signer, input.from, toSign);\n    const domainSeparator = await getDomainSeparator(forwarder)\n    return { typeHash, domainSeparator, signature, request };\n}","import { ethers } from 'ethers';\nimport { Forwarder as address } from '../deploy.json';\n\nconst { abi } = require(\"./Forwarder.json\");\n\nexport function createInstance(provider) {\n  return new ethers.Contract(address, abi, provider);\n}\n","import { useState, useEffect, useContext } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport {\n    Card, CardActions, CardContent, Button, Grid,\n    Typography, Box, OutlinedInput\n} from '@mui/material';\n\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport DBXen from \"../../ethereum/dbxen\"\nimport DBXenViews from \"../../ethereum/dbxenViews\";\nimport DBXenERC20 from \"../../ethereum/dbxenerc20\"\nimport SnackbarNotification from './Snackbar';\nimport { BigNumber, ethers } from \"ethers\";\nimport \"../../componentsStyling/stake.scss\";\nimport token from \"../../photos/icons/token.svg\"\nimport coinBagLight from \"../../photos/icons/coin-bag-solid--light.svg\";\nimport coinBagDark from \"../../photos/icons/coin-bag-solid--dark.svg\";\nimport walletLight from \"../../photos/icons/wallet--light.svg\";\nimport walletDark from \"../../photos/icons/wallet--dark.svg\";\nimport fees from \"../../photos/icons/fees.svg\";\nimport finance from \"../../photos/icons/finance.svg\";\nimport { signMetaTxRequest } from '../../ethereum/signer';\nimport { createInstance } from '../../ethereum/forwarder'\nimport dataFromWhitelist from '../../constants.json';\nimport useAnalyticsEventTracker from '../Common/GaEventTracker';\nimport Countdown, { zeroPad } from \"react-countdown\";\nimport ChainContext from '../Contexts/ChainContext';\n\nconst { whitelist } = dataFromWhitelist;\n\nexport function Stake(props: any): any {\n\n    const { account, library, activate } = useWeb3React()\n    const { chain }  = useContext(ChainContext)\n    const [notificationState, setNotificationState] = useState({})\n    const gaEventTracker = useAnalyticsEventTracker('Stake');\n    const [previousCycleXENBurned, setPreviousCycleXENBurned] = useState<any>();\n    const datePolygon: any = new Date(Date.UTC(2023, 2, 17, 14, 3, 19, 0));\n    const dateAvalance: any = new Date(Date.UTC(2023, 2, 17, 14, 7, 20, 0));\n    const now: any = Date.now()\n    let endDatePolygon = datePolygon.getTime() - now;\n    let endDateAvalance = dateAvalance.getTime() - now;\n\n    const renderer = ({ hours, minutes, seconds, completed }: any) => {\n        if (completed) {\n            // Render a complete state\n            return;\n        } else {\n            // Render a countdown\n            return (\n                <span>\n                    ~ {zeroPad(hours)}:{zeroPad(minutes)}:{zeroPad(seconds)}\n                </span>\n            );\n        }\n    };\n\n    function FeesPanel() {\n        const [feesUnclaimed, setFeesUnclaimed] = useState(\"\")\n        const [loading, setLoading] = useState(false)\n\n        useEffect(() => {\n            feesAccrued()\n        }, [feesUnclaimed]);\n\n\n        useEffect(() => {\n            totalXenBurnedPreviousCycle();\n        }, []);\n\n        async function totalXenBurnedPreviousCycle() {\n            await getTotalXenBurnedInPreviusCycle().then((result: any) => {\n                setPreviousCycleXENBurned(result);\n            })\n        }\n\n        async function getTotalXenBurnedInPreviusCycle() {\n            const signer = await library.getSigner(0)\n            const deb0xContract = DBXen(signer, chain.deb0xAddress)\n\n            await deb0xContract.getCurrentCycle().then(async (currentCycle: any) => {\n                if (currentCycle != 0) {\n                    await deb0xContract.cycleTotalBatchesBurned(currentCycle)\n                        .then((numberBatchesBurnedInCurrentCycle: any) => {\n                            return numberBatchesBurnedInCurrentCycle.toNumber() * 2500000;\n                        })\n                }\n            })\n            return 0;\n        }\n\n        async function feesAccrued() {\n            const deb0xViewsContract = DBXenViews(library, chain.deb0xViewsAddress);\n            await deb0xViewsContract.getUnclaimedFees(account).then((result: any) => {\n                setFeesUnclaimed(ethers.utils.formatEther(result))\n            });\n        }\n\n        async function fetchClaimFeesResult(request: any, url: any) {\n            await fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(request),\n                headers: { 'Content-Type': 'application/json' },\n            })\n                .then((response) => response.json())\n                .then(async (data) => {\n                    try {\n                        const { tx: txReceipt } = JSON.parse(data.result)\n                        if (txReceipt.status == 1) {\n                            setNotificationState({\n                                message: \"You succesfully claimed your fees.\", open: true,\n                                severity: \"success\"\n                            })\n                        } else {\n                            setNotificationState({\n                                message: \"Fees couldn't be claimed!\", open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    } catch (error) {\n                        if (data.status == \"pending\") {\n                            setNotificationState({\n                                message: \"Your transaction is pending. Your fees should arrive shortly\",\n                                open: true,\n                                severity: \"info\"\n                            })\n                        } else if (data.status == \"error\") {\n                            setNotificationState({\n                                message: \"Transaction relayer error. Please try again\",\n                                open: true,\n                                severity: \"error\"\n                            })\n                        }\n                    }\n\n                })\n        }\n\n        async function sendClaimFeesTx(deb0xContract: any) {\n            try {\n                const tx = await deb0xContract.claimFees()\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"You succesfully claimed your fees.\", open: true,\n                            severity: \"success\"\n                        })\n                        //setLoading(false)\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: \"Fees couldn't be claimed!\", open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n            } catch (error: any) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Your fees haven't been claimed.\",\n                    open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function claimFees() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = DBXen(signer, chain.deb0xAddress)\n\n            const from = signer.getAddress();\n            if (whitelist.includes(from)) {\n                const url = \"https://api.defender.openzeppelin.com/autotasks/b939da27-4a61-4464-8d7e-4b0c5dceb270/runs/webhook/f662ac31-8f56-4b4c-9526-35aea314af63/SPs6smVfv41kLtz4zivxr8\";\n                const forwarder = createInstance(library)\n                const data = deb0xContract.interface.encodeFunctionData(\"claimFees()\")\n                const to = deb0xContract.address\n\n                try {\n                    const request = await signMetaTxRequest(library, forwarder, { to, from, data });\n\n                    gaEventTracker(\"Success: Claim fees\");\n\n                    await fetchClaimFeesResult(request, url)\n\n                } catch (error: any) {\n                    setNotificationState({\n                        message: \"You rejected the transaction. Fees were not claimed.\",\n                        open: true,\n                        severity: \"info\"\n                    })\n\n                    gaEventTracker(\"Rejected: Claim fees\");\n                }\n            } else {\n                await sendClaimFeesTx(deb0xContract)\n            }\n        }\n\n        return (\n            <>\n                <Card variant=\"outlined\" className=\"card-container\">\n                    <CardContent className=\"row\">\n                        <div className=\"col-12 col-md-8 mb-2\">\n                            <Typography variant=\"h4\" component=\"div\" className=\"rewards mb-3\">\n                                Your protocol fee share\n                            </Typography>\n                            <Typography >\n                                Your unclaimed {chain.currency} fees:&nbsp;\n                                <strong>\n                                    {Number(feesUnclaimed).toLocaleString('en-US', {\n                                        minimumFractionDigits: 2,\n                                        maximumFractionDigits: 2\n                                    })}\n                                </strong>\n                            </Typography>\n                            <p className='my-2 counter'>\n                                Get next fees in \n                                {chain.chainName === \"polygon\" ?\n                                    <Countdown date={Date.now() + endDatePolygon} renderer={renderer} /> :\n                                    <Countdown date={Date.now() + endDateAvalance} renderer={renderer} />\n                                }\n                            </p>\n                        </div>\n                        <div className='col-12 col-md-4 d-flex justify-content-end align-items-start'>\n                            <img src={fees} alt=\"trophyRewards\" className=\"p-3 medium-img\" />\n                        </div>\n                    </CardContent>\n                    <CardActions className='button-container px-3'>\n                        <LoadingButton\n                            className=\"collect-btn\"\n                            disabled={feesUnclaimed == \"0.0\"}\n                            loading={loading}\n                            variant=\"contained\"\n                            onClick={claimFees}>\n                            Collect\n                        </LoadingButton>\n                    </CardActions>\n                </Card>\n            </>\n        )\n    }\n\n    function CyclePanel() {\n        const [currentReward, setCurrentReward] = useState(\"\")\n\n    \n        async function getChainId() {\n            const currentChainId = await window.ethereum.request({\n                method: 'eth_chainId',\n            }).then((result:any) =>{\n                \n            })\n        }\n\n        useEffect(() => {\n            getChainId();\n        }, [])\n\n        useEffect(() => {\n            cycleReward()\n        }, [currentReward]);\n\n        async function cycleReward() {\n            const deb0xContract = DBXen(library, chain.deb0xAddress);\n            await deb0xContract.currentCycleReward().then((result: any) => {\n                setCurrentReward(ethers.utils.formatEther(result))\n            })\n        }\n        return (\n            <>\n                <Card variant=\"outlined\" className=\"card-container\">\n                    <CardContent className=\"row\">\n                        <div className=\"col-12 col-md-12 mb-2\">\n                            <Typography variant=\"h4\" component=\"div\" className=\"rewards mb-3\">\n                                Daily stats\n                            </Typography>\n                            <Typography className=\"data-height\">\n                                This cycle mints:&nbsp;\n                                <strong>\n                                    {Number(currentReward).toLocaleString('en-US', {\n                                        minimumFractionDigits: 2,\n                                        maximumFractionDigits: 2\n                                    })}\n                                </strong> DXN\n                            </Typography>\n                            {/* <Typography className=\"data-height\">\n                            Total XEN burned in previous cycle: <strong>{previousCycleXENBurned}</strong>\n                        </Typography> */}\n                        </div>\n                    </CardContent>\n                </Card>\n            </>\n        )\n    }\n\n    function RewardsPanel() {\n\n        const [rewardsUnclaimed, setRewardsUnclaimed] = useState(\"\")\n        const [feeSharePercentage, setFeeSharePercentage] = useState(\"\")\n        const [loading, setLoading] = useState(false)\n\n    \n        async function getChainId() {\n            const currentChainId = await window.ethereum.request({\n                method: 'eth_chainId',\n            }).then((result:any) =>{\n                \n            })\n        }\n\n        useEffect(() => {\n            getChainId();\n        }, [])\n\n        useEffect(() => {\n            rewardsAccrued()\n        }, [rewardsUnclaimed]);\n\n        useEffect(() => {\n            feeShare()\n        }, [feeSharePercentage]);\n\n        async function rewardsAccrued() {\n            const deb0xViewsContract = DBXenViews(library, chain.deb0xViewsAddress);\n\n            await deb0xViewsContract.getUnclaimedRewards(account).then((result: any) => {\n                setRewardsUnclaimed(ethers.utils.formatEther(result))\n            })\n        }\n\n        async function feeShare() {\n            const deb0xViewsContract = DBXenViews(library, chain.deb0xViewsAddress);\n\n            const deb0xContract = DBXen(library, chain.deb0xAddress);\n\n            const unclaimedRewards = await deb0xViewsContract.getUnclaimedRewards(account);\n\n            const accWithdrawableStake = await deb0xViewsContract.getAccWithdrawableStake(account);\n\n            let balance = parseFloat((ethers.utils.formatEther(unclaimedRewards.add(accWithdrawableStake))))\n\n            const currentCycle = await deb0xContract.currentStartedCycle();\n\n            const totalSupply = await deb0xContract.summedCycleStakes(currentCycle);\n\n            const feeShare = balance * 100 / totalSupply\n            setFeeSharePercentage(((Math.round(feeShare * 100) / 100).toFixed(2)).toString() + \"%\")\n        }\n\n        async function fetchClaimRewardsResult(request: any, url: any) {\n            await fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(request),\n                headers: { 'Content-Type': 'application/json' },\n            })\n                .then((response) => response.json())\n                .then(async (data) => {\n                    try {\n                        const { tx: txReceipt } = JSON.parse(data.result)\n                        if (txReceipt.status == 1) {\n                            setNotificationState({\n                                message: \"You succesfully claimed your rewards.\", open: true,\n                                severity: \"success\"\n                            })\n                        } else {\n                            setNotificationState({\n                                message: \"Rewards couldn't be claimed!\", open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    } catch (error) {\n                        if (data.status == \"pending\") {\n                            setNotificationState({\n                                message: \"Your transaction is pending. Your rewards should arrive shortly\",\n                                open: true,\n                                severity: \"info\"\n                            })\n                        } else if (data.status == \"error\") {\n                            setNotificationState({\n                                message: \"Transaction relayer error. Please try again\",\n                                open: true,\n                                severity: \"error\"\n                            })\n                        }\n                    }\n\n                })\n        }\n\n        async function sendClaimRewardsTx(deb0xContract: any) {\n            try {\n                const tx = await deb0xContract.claimRewards()\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"You succesfully claimed your rewards.\", open: true,\n                            severity: \"success\"\n                        })\n                        //setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: \"Rewards couldn't be claimed!\", open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n            } catch (error: any) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Your rewards haven't been claimed.\",\n                    open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function claimRewards() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = DBXen(signer, chain.deb0xAddress)\n\n\n            const from = await signer.getAddress();\n            if (whitelist.includes(from)) {\n                const url = \"https://api.defender.openzeppelin.com/autotasks/b939da27-4a61-4464-8d7e-4b0c5dceb270/runs/webhook/f662ac31-8f56-4b4c-9526-35aea314af63/SPs6smVfv41kLtz4zivxr8\";\n                const forwarder = createInstance(library)\n                const data = deb0xContract.interface.encodeFunctionData(\"claimRewards()\")\n                const to = deb0xContract.address\n\n                try {\n                    const request = await signMetaTxRequest(library, forwarder, { to, from, data });\n\n                    gaEventTracker(\"Success: Claim rewards\");\n\n                    await fetchClaimRewardsResult(request, url)\n\n                } catch (error: any) {\n                    setNotificationState({\n                        message: \"You rejected the transaction. Rewards were not claimed.\",\n                        open: true,\n                        severity: \"info\"\n                    })\n\n                    gaEventTracker(\"Rejected: Claim rewards\");\n                }\n            } else {\n                await sendClaimRewardsTx(deb0xContract)\n            }\n        }\n\n        return (\n            <>\n                <Card variant=\"outlined\" className=\"card-container\">\n                    <CardContent className=\"row\">\n                        <div className=\"col-12 col-md-10 mb-2\">\n                            <Typography variant=\"h4\" component=\"div\" className=\"rewards mb-3\">\n                                Your rewards\n                            </Typography>\n                            <Typography >\n                                Your unclaimed DXN rewards:&nbsp;\n                                <strong>\n                                    {Number(rewardsUnclaimed).toLocaleString('en-US', {\n                                        minimumFractionDigits: 2,\n                                        maximumFractionDigits: 2\n                                    })}\n                                </strong>\n                            </Typography>\n                            <p className='my-2 counter'>\n                                Get next rewards in \n                                {chain.chainName === \"polygon\" ?\n                                    <Countdown date={Date.now() + endDatePolygon} renderer={renderer} /> :\n                                    <Countdown date={Date.now() + endDateAvalance} renderer={renderer} />\n                                }\n                            </p>\n                        </div>\n                        <div className='col-12 col-md-2 d-flex justify-content-end align-items-start'>\n                            <img src={finance} alt=\"trophyRewards\" className=\"p-3 medium-img\" />\n                        </div>\n                    </CardContent>\n                    <CardActions className='button-container px-3'>\n                        <LoadingButton className=\"collect-btn\" loading={loading} variant=\"contained\" onClick={claimRewards}>Claim</LoadingButton>\n                        <span className=\"text\">Unclaimed DXN is considered automatically staked. Only claim when you want to trade.</span>\n                    </CardActions>\n                </Card>\n            </>\n        )\n    }\n\n    function floorPrecised(number: any) {\n        var power = Math.pow(10, 2);\n        return (Math.floor(parseFloat(number) * power) / power).toString();\n    }\n\n    function StakeUnstake() {\n        const [alignment, setAlignment] = useState(\"stake\");\n\n        const [userStakedAmount, setUserStakedAmount] = useState(\"\")\n        const [userUnstakedAmount, setUserUnstakedAmount] = useState(\"\")\n        const [tokensForUnstake, setTokenForUnstake] = useState(\"\");\n        const [totalStaked, setTotalStaked] = useState(\"\")\n        const [amountToUnstake, setAmountToUnstake] = useState(\"\")\n        const [amountToStake, setAmountToStake] = useState(\"\")\n        const [loading, setLoading] = useState(false)\n        const [approved, setApproved] = useState<Boolean | null>(false)\n\n    \n        async function getChainId() {\n            const currentChainId = await window.ethereum.request({\n                method: 'eth_chainId',\n            }).then((result:any) =>{\n                \n            })\n        }\n\n        useEffect(() => {\n            getChainId();\n        }, [])\n\n        const handleChange = (\n            event: React.MouseEvent<HTMLElement>,\n            newAlignment: string,\n        ) => {\n            setAlignment(newAlignment);\n            gaEventTracker(newAlignment + \" tab\");\n        };\n\n        const [theme, setTheme] = useState(localStorage.getItem('globalTheme'));\n        useEffect(() => {\n            setTheme(localStorage.getItem('globalTheme'));\n        });\n\n        useEffect(() => {\n            setStakedAmount()\n        }, [userStakedAmount]);\n\n        useEffect(() => {\n            totalAmountStaked()\n        }, [totalStaked]);\n\n\n        useEffect(() => {\n            setTokensForUntakedAmount()\n        }, []);\n\n        useEffect(() => {\n            setUnstakedAmount()\n        }, [userUnstakedAmount]);\n\n        useEffect(() => {\n            setApproval()\n        }, [approved]);\n\n        async function setStakedAmount() {\n            const deb0xContract = await DBXen(library, chain.deb0xAddress)\n            const deb0xViewsContract = await DBXenViews(library, chain.deb0xViewsAddress)\n            const balance = await deb0xViewsContract.getAccWithdrawableStake(account)\n            let firstStakeCycle = await deb0xContract.accFirstStake(account)\n            let secondStakeCycle = await deb0xContract.accSecondStake(account)\n            let firstStakeCycleAmount = await deb0xContract.accStakeCycle(account, firstStakeCycle);\n            let secondStakeCycleAmount = await deb0xContract.accStakeCycle(account, secondStakeCycle);\n            let withdawbleStake = await deb0xContract.accWithdrawableStake(account);\n            let totalStakedAmount = BigNumber.from(firstStakeCycleAmount).add(BigNumber.from(secondStakeCycleAmount)).add(BigNumber.from(withdawbleStake))\n            setUserStakedAmount(ethers.utils.formatEther(totalStakedAmount))\n        }\n\n        async function setTokensForUntakedAmount() {\n            const deb0xViewsContract =  DBXenViews(library, chain.deb0xViewsAddress)\n            const balance = await deb0xViewsContract.getAccWithdrawableStake(account).then((balance:any) =>{\n                setTokenForUnstake(ethers.utils.formatEther(balance.toString()));\n            })\n        }\n\n        async function setUnstakedAmount() {\n            const deb0xERC20Contract = await DBXenERC20(library, chain.deb0xERC20Address)\n            const balance = await deb0xERC20Contract.balanceOf(account).then((balance:any) =>{\n                let number = ethers.utils.formatEther(balance);\n                setUserUnstakedAmount(parseFloat(number.slice(0, (number.indexOf(\".\")) + 3)).toString())\n            })\n        }\n\n        async function setApproval() {\n            const deb0xERC20Contract = DBXenERC20(library, chain.deb0xERC20Address)\n\n            await deb0xERC20Contract.allowance(account, chain.deb0xAddress).then((allowance:any) =>\n                 allowance > 0 ? setApproved(true) : setApproved(false)\n            )\n        }\n\n        async function totalAmountStaked() {\n\n            const deb0xContract = DBXen(library, chain.deb0xAddress)\n\n           await deb0xContract.currentStartedCycle().then(async (currentCycle:any) =>{\n                await deb0xContract.summedCycleStakes(currentCycle).then((totalSupply:any) => {\n                    setTotalStaked(ethers.utils.formatEther(totalSupply))\n                })\n            })\n\n        }\n\n        async function approveStaking() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n            const deb0xERC20Contract = DBXenERC20(signer, chain.deb0xERC20Address)\n\n            try {\n                const tx = await deb0xERC20Contract.approve(chain.deb0xAddress, ethers.utils.parseEther(\"5010000\"))\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"Your succesfully approved contract for staking.\", open: true,\n                            severity: \"success\"\n                        })\n                        setLoading(false)\n\n                        gaEventTracker(\"Success: Approve staking\");\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: \"Contract couldn't be approved for staking!\", open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                        gaEventTracker(\"Error: Approve staking\");\n                    })\n            } catch (error) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Contract hasn't been approved for staking.\", open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n                gaEventTracker(\"Rejected: Approve staking\");\n            }\n        }\n\n        async function fetchUnstakeResult(request: any, url: any) {\n            await fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(request),\n                headers: { 'Content-Type': 'application/json' },\n            })\n                .then((response) => response.json())\n                .then(async (data) => {\n                    try {\n                        const { tx: txReceipt } = JSON.parse(data.result)\n                        if (txReceipt.status == 1) {\n                            setNotificationState({\n                                message: \"Your tokens were succesfully unstaked.\", open: true,\n                                severity: \"success\"\n                            })\n                            setLoading(false)\n                        } else {\n                            setNotificationState({\n                                message: \"Your tokens couldn't be unstaked!\", open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    } catch (error) {\n                        if (data.status == \"pending\") {\n                            setNotificationState({\n                                message: \"Your transaction is pending. Your DXN should be unstaked shortly\",\n                                open: true,\n                                severity: \"info\"\n                            })\n                        } else if (data.status == \"error\") {\n                            setNotificationState({\n                                message: \"Transaction relayer error. Please try again\",\n                                open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    }\n\n                })\n        }\n\n        async function sendUnstakeTx(deb0xContract: any) {\n            try {\n                const tx = await deb0xContract.unstake(ethers.utils.parseEther(amountToUnstake.toString()))\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"Your tokens were succesfully unstaked.\", open: true,\n                            severity: \"success\"\n                        })\n                        setTokensForUntakedAmount();\n                        setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setLoading(false)\n                        setNotificationState({\n                            message: \"Your tokens couldn't be unstaked!\", open: true,\n                            severity: \"error\"\n                        })\n\n                    })\n            } catch (error) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Your tokens haven't been unstaked.\",\n                    open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function unstake() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = DBXen(signer, chain.deb0xAddress)\n\n            const from = await signer.getAddress();\n            if (whitelist.includes(from)) {\n                const url = \"https://api.defender.openzeppelin.com/autotasks/b939da27-4a61-4464-8d7e-4b0c5dceb270/runs/webhook/f662ac31-8f56-4b4c-9526-35aea314af63/SPs6smVfv41kLtz4zivxr8\";\n                const forwarder = createInstance(library)\n                const data = deb0xContract.interface.encodeFunctionData(\"unstake\",\n                    [ethers.utils.parseEther(amountToUnstake.toString())])\n                const to = deb0xContract.address\n                try {\n                    const request = await signMetaTxRequest(library, forwarder, { to, from, data });\n\n                    gaEventTracker(\"Success: Unstake\");\n\n                    await fetchUnstakeResult(request, url)\n\n                } catch (error: any) {\n                    setNotificationState({\n                        message: \"You rejected the transaction. DXN were not unstaked.\",\n                        open: true,\n                        severity: \"info\"\n                    })\n                    setLoading(false)\n\n                    gaEventTracker(\"Rejected: Unstake\");\n                }\n            } else {\n                await sendUnstakeTx(deb0xContract)\n            }\n        }\n\n        async function fetchStakeResult(request: any, url: any) {\n            await fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(request),\n                headers: { 'Content-Type': 'application/json' },\n            })\n                .then((response) => response.json())\n                .then(async (data) => {\n                    try {\n                        const { tx: txReceipt } = JSON.parse(data.result)\n                        if (txReceipt.status == 1) {\n                            setNotificationState({\n                                message: \"You succesfully staked your DXN.\", open: true,\n                                severity: \"success\"\n                            })\n                        } else {\n                            setNotificationState({\n                                message: \"DXN couldn't be claimed!\", open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    } catch (error) {\n                        if (data.status == \"pending\") {\n                            setNotificationState({\n                                message: \"Your transaction is pending. Your DXN should be staked shortly\",\n                                open: true,\n                                severity: \"info\"\n                            })\n                        } else if (data.status == \"error\") {\n                            setNotificationState({\n                                message: \"Transaction relayer error. Please try again\",\n                                open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    }\n\n                })\n        }\n\n        async function sendStakeTx(deb0xContract: any) {\n            try {\n                const tx = await deb0xContract.stake(ethers.utils.parseEther(amountToStake.toString()))\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"Your tokens were succesfully staked.\", open: true,\n                            severity: \"success\"\n                        })\n                        //\n                        let tokensInWallet = Number(userUnstakedAmount) - Number(amountToStake);\n                        setUserUnstakedAmount(tokensInWallet.toString())\n                        //setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: \"Your tokens couldn't be staked!\", open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n            } catch (error) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Your tokens haven't been staked.\",\n                    open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function stake() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = DBXen(signer, chain.deb0xAddress)\n\n            const from = await signer.getAddress();\n            if (whitelist.includes(from)) {\n                const url = \"https://api.defender.openzeppelin.com/autotasks/b939da27-4a61-4464-8d7e-4b0c5dceb270/runs/webhook/f662ac31-8f56-4b4c-9526-35aea314af63/SPs6smVfv41kLtz4zivxr8\";\n                const forwarder = createInstance(library)\n                const data = deb0xContract.interface.encodeFunctionData(\"stake\",\n                    [ethers.utils.parseEther(amountToStake.toString())])\n                const to = deb0xContract.address\n\n                try {\n                    const request = await signMetaTxRequest(library, forwarder, { to, from, data });\n\n                    gaEventTracker(\"Success: Stake\");\n\n                    await fetchStakeResult(request, url)\n\n                } catch (error: any) {\n                    setNotificationState({\n                        message: \"You rejected the transaction. DXN were not staked.\",\n                        open: true,\n                        severity: \"info\"\n                    })\n                    setLoading(false)\n                    gaEventTracker(\"Rejected: Stake\");\n                }\n            } else {\n                await sendStakeTx(deb0xContract)\n            }\n        }\n\n        return (\n            <Card variant=\"outlined\" className=\"card-container\">\n                <ToggleButtonGroup\n                    color=\"primary\"\n                    value={alignment}\n                    exclusive\n                    onChange={handleChange}\n                    className=\"tab-container\"\n                >\n                    <ToggleButton className=\"tab-btn\" value=\"stake\">Stake</ToggleButton>\n                    <ToggleButton className=\"tab-btn\" value=\"unstake\" >Unstake</ToggleButton>\n\n                </ToggleButtonGroup>\n\n                {\n                    alignment === \"stake\" ?\n\n                        <>\n                            <CardContent className=\"row\">\n                                <div className=\"col-6 px-3\">\n                                    <img className=\"display-element\" src={theme === \"classic\" ? coinBagDark : coinBagLight} alt=\"coinbag\" />\n                                    <Typography className=\"p-0\">\n                                        Your staked amount:\n                                    </Typography>\n                                    <Typography variant=\"h6\" className=\"p-0 data-height\">\n                                        <strong>\n                                            {Number(userStakedAmount).toLocaleString('en-US', {\n                                                minimumFractionDigits: 2,\n                                                maximumFractionDigits: 2\n                                            })} DXN</strong>\n                                    </Typography>\n                                </div>\n                                <div className=\"col-6 px-3\">\n                                    <img className=\"display-element\" src={theme === \"classic\" ? walletDark : walletLight} alt=\"coinbag\" />\n                                    <Typography className=\"p-0\">\n                                        Available DXN in your wallet:\n                                    </Typography>\n                                    <Typography variant=\"h6\" className=\"p-0\" data-height>\n                                        <strong>\n                                            {Number(userUnstakedAmount).toLocaleString('en-US', {\n                                                minimumFractionDigits: 2,\n                                                maximumFractionDigits: 2\n                                            })} DXN</strong>\n                                    </Typography>\n                                </div>\n                                {approved && <Grid className=\"amount-row px-3\" container>\n                                    <Grid item>\n                                        <OutlinedInput id=\"outlined-basic\"\n                                            placeholder=\"Amount to stake\"\n                                            type=\"number\"\n                                            value={amountToStake}\n                                            inputProps={{ min: 0 }}\n                                            onChange={e => setAmountToStake(e.target.value)} />\n                                    </Grid>\n                                    <Grid className=\"max-btn-container\" item>\n                                        <Button className=\"max-btn\"\n                                            size=\"small\" variant=\"contained\" color=\"error\"\n                                            onClick={() => setAmountToStake(userUnstakedAmount)}>\n                                            max\n                                        </Button>\n                                    </Grid>\n                                </Grid>}\n                            </CardContent>\n                            <CardActions className='button-container px-3'>\n                                {approved && <LoadingButton disabled={!amountToStake} className=\"collect-btn\" loading={loading} variant=\"contained\" onClick={stake}>Stake</LoadingButton>}\n                                {!approved &&\n                                    <>\n                                        <LoadingButton\n                                            className=\"collect-btn\"\n                                            loading={loading}\n                                            variant=\"contained\"\n                                            disabled={userUnstakedAmount === '0.00' || userUnstakedAmount === '0'}\n                                            onClick={approveStaking}>\n                                            Initialize Staking\n                                        </LoadingButton>\n                                        <span className=\"text\">\n                                            Make sure you have DXN tokens in your wallet before you can stake them.\n                                        </span>\n                                    </>\n                                }\n                            </CardActions>\n                        </>\n                        :\n\n                        <>\n                            <CardContent className=\"row\">\n                                <div className=\"col-6 px-3\">\n                                    <img className=\"display-element\" src={theme === \"classic\" ? coinBagDark : coinBagLight} alt=\"coinbag\" />\n                                    <Typography className=\"p-0\">\n                                        Available to unstake:\n                                    </Typography>\n                                    <Typography variant=\"h6\" className=\"p-0\">\n                                        <strong>{Number(tokensForUnstake).toLocaleString('en-US', {\n                                            minimumFractionDigits: 2,\n                                            maximumFractionDigits: 2\n                                        })} DXN</strong>\n                                    </Typography>\n                                </div>\n                                {/* <div className=\"col-6 px-3\">\n                        <img className=\"display-element\" src={theme === \"classic\" ? walletDark : walletLight} alt=\"coinbag\" />\n                        <Typography className=\"p-0\">\n                            Your actual stake:\n                        </Typography>\n                        <Typography variant=\"h6\" className=\"p-0 data-height\">\n                            <strong>{userStakedAmount} DXN</strong>\n                        </Typography>\n                    </div> */}\n\n\n                                <Grid className=\"amount-row px-3\" container>\n                                    <Grid item>\n                                        <OutlinedInput value={amountToUnstake}\n                                            id=\"outlined-basic\"\n                                            className=\"max-field\"\n                                            placeholder=\"Amount to unstake\"\n                                            onChange={e => setAmountToUnstake(e.target.value)}\n                                            inputProps={{ min: 0 }}\n                                            type=\"number\" />\n                                    </Grid>\n                                    <Grid className=\"max-btn-container\" item>\n                                        <Button className=\"max-btn\"\n                                            size=\"small\" variant=\"contained\" color=\"error\"\n                                            onClick={() => setAmountToUnstake(tokensForUnstake)}>\n                                            max\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </CardContent>\n                            <CardActions className='button-container px-3'>\n                                <LoadingButton className=\"collect-btn\" disabled={!amountToUnstake} loading={loading} variant=\"contained\" onClick={unstake}>Unstake</LoadingButton>\n                            </CardActions>\n                        </>\n                }\n\n            </Card>\n\n        )\n    }\n\n    function TotalStaked() {\n        const [totalStaked, setTotalStaked] = useState(\"\")\n        useEffect(() => {\n            totalAmountStaked()\n        }, [totalStaked]);\n\n        async function totalAmountStaked() {\n\n            const deb0xContract = DBXen(library, chain.deb0xAddress)\n\n            const currentCycle = await deb0xContract.currentStartedCycle()\n\n            const currentStake = await deb0xContract.summedCycleStakes(currentCycle)\n\n            const pendingStakeWithdrawal = await deb0xContract.pendingStakeWithdrawal()\n            \n            // setTotalStaked(ethers.utils.formatEther(currentStake))\n\n            setTotalStaked(floorPrecised(ethers.utils.formatEther(currentStake.sub(pendingStakeWithdrawal))))\n\n        }\n\n        return (\n            <Card className=\"heading-card\">\n                <CardContent>\n                    <Typography variant=\"h5\">\n                        Total tokens staked:\n                    </Typography>\n                    <Typography variant=\"h4\">\n                        <img className=\"logo\" src={token} />\n                        {totalStaked} DXN\n                    </Typography>\n                </CardContent>\n            </Card>\n        )\n    }\n\n    return (\n        <>\n            <SnackbarNotification state={notificationState} setNotificationState={setNotificationState} />\n            <Box className=\"content-box stake-content\">\n                <div className=\"cards-grid\">\n                    <div className='row'>\n                        <Grid item className=\"col col-12 col-md-6 \">\n                            <FeesPanel />\n                        </Grid>\n                        <Grid item className=\"col col-12 col-md-6\">\n                            <CyclePanel />\n                        </Grid>\n                    </div>\n                    <div className='row'>\n                        <Grid item className=\"col col-12 col-md-6 \">\n                            <RewardsPanel />\n                        </Grid>\n                        <Grid item className=\"col col-12 col-md-6\">\n                            <StakeUnstake />\n                        </Grid>\n                    </div>\n                </div>\n            </Box>\n        </>\n    )\n}","import ReactGA from \"react-ga\";\n\nexport default function useAnalyticsEventTracker(category: string) {\n    const eventTracker = (action: string) => {\n      ReactGA.event({category, action});\n    }\n    return eventTracker;\n}","import { createContext } from \"react\";\n\nexport const initialThemeState = {\n  theme: \"dark\",\n  setTheme: (_value: string) => {}\n};\n\nconst ThemeContext = createContext(initialThemeState);\nexport default ThemeContext;","import { useState, useEffect } from \"react\";\nimport ThemeContext, { initialThemeState } from \"./ThemeContext\";\n\ntype Props = {\n    children: JSX.Element|JSX.Element[],\n};\n\nconst ThemeProvider = ( { children }: Props ) => {\n  const [theme, setTheme] = useState<any>(initialThemeState.theme);\n\n  const localStorage = window.localStorage;\n\n  useEffect(() => {\n    const savedThemeLocal = localStorage.getItem(\"globalTheme\");\n\n    if (!!savedThemeLocal) {\n      setTheme(savedThemeLocal);\n    }\n  }, [localStorage]);\n\n  useEffect(() => {\n    localStorage.setItem(\"globalTheme\", theme);\n  }, [theme, localStorage]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      <div className={`theme theme--${theme}`}>{children}</div>\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider;\n","export default __webpack_public_path__ + \"static/media/elephant.605d60c2.svg\";","export default __webpack_public_path__ + \"static/media/white_dbxen.8b09777a.svg\";","export default __webpack_public_path__ + \"static/media/elephant.b785cc48.png\";","export default __webpack_public_path__ + \"static/media/empty.efc45323.png\";","export default __webpack_public_path__ + \"static/media/copy-1.6be37e8f.svg\";","export default __webpack_public_path__ + \"static/media/wallet.0d69376a.svg\";","export default __webpack_public_path__ + \"static/media/diconnect.a287fc1c.svg\";","import { useState, useEffect } from \"react\";\nimport ChainContext, { initialChain } from './ChainContext';\n\ntype Props = {\n    children: JSX.Element|JSX.Element[],\n};\n\nconst ChainProvider = ( { children }: Props ) => {\n    const [chain, setChain] = useState<any>(initialChain.chain);\n\n    useEffect(\n        () => {\n            window.ethereum.request({\n                method: 'eth_chainId',\n            }).then((result: any) => {\n                if(parseInt(result, 16) === 137) {\n                    setChain({\n                        deb0xAddress: \"0x4F3ce26D9749C0f36012C9AbB41BF9938476c462\",\n                        deb0xViewsAddress: \"0xCF7582E5FaC8a6674CcD96ce71D807808Ca8ba6E\",\n                        deb0xERC20Address: \"0x47DD60FA40A050c0677dE19921Eb4cc512947729\",\n                        xenCryptoAddress: \"0x2AB0e9e4eE70FFf1fB9D67031E44F6410170d00e\",\n                        chainId: parseInt(result, 16),\n                        chainName: \"polygon\",\n                        currency: \"MATIC\"\n                    })\n                } else {\n                    setChain({\n                        deb0xAddress: \"0xF5c80c305803280B587F8cabBcCdC4d9BF522AbD\",\n                        deb0xViewsAddress: \"0xf032f7FB8258728A1938473B2115BB163d5Da593\",\n                        deb0xERC20Address: \"0x80f0C1c49891dcFDD40b6e0F960F84E6042bcB6F\",\n                        xenCryptoAddress: \"0xC0C5AA69Dbe4d6DDdfBc89c0957686ec60F24389\",\n                        chainId: parseInt(result, 16),\n                        chainName: \"avalanche\",\n                        currency: \"AVAX\"\n                    })\n                }\n            });\n        },\n        []\n    );\n    \n    return (\n      <ChainContext.Provider value={{chain, setChain}}>\n        <>{children}</>\n      </ChainContext.Provider>\n    );\n  };\n  \n  export default ChainProvider;","export default __webpack_public_path__ + \"static/media/polygon.c13e4066.svg\";","export default __webpack_public_path__ + \"static/media/avalanche.234db155.svg\";","import Popper from '@mui/material/Popper';\nimport { useContext, useEffect, useState } from \"react\";\nimport ChainContext from \"./ChainContext\";\nimport polygon from \"../../photos/icons/polygon.svg\";\nimport avalanche from \"../../photos/icons/avalanche.svg\";\nimport ClickAwayListener from '@mui/base/ClickAwayListener';\n\nconst networks: any = {\n    polygon: {\n      chainId: `0x${Number(137).toString(16)}`,\n      chainName: \"Polygon Mainnet\",\n      nativeCurrency: {\n        name: \"MATIC\",\n        symbol: \"MATIC\",\n        decimals: 18\n      },\n      rpcUrls: [\"https://polygon.llamarpc.com\"],\n      blockExplorerUrls: [\"https://polygonscan.com/\"]\n    },\n    avalanche: {\n        chainId: `0x${Number(43114).toString(16)}`,\n        chainName: \"Avalanche Mainnet C-Chain\",\n        nativeCurrency: {\n          name: \"Avalanche\",\n          symbol: \"AVAX\",\n          decimals: 18,\n        },\n        rpcUrls: [\"https://api.avax.network/ext/bc/C/rpc\"],\n        blockExplorerUrls: [\"https://snowtrace.io/\"],\n    }\n};\n\nexport default function ChainSetter(props: any) {\n    const { chain, setChain } = useContext(ChainContext);\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const [open, setOpen] = useState<any>(false);\n    const id = open ? 'simple-popper' : \"\";\n\n    useEffect(() => {\n        window.ethereum.on(\"chainChanged\", networkChanged);\n\n        return () => {\n            window.ethereum.removeListener(\"chainChanged\", networkChanged);\n            };\n    }, [])\n\n    const changeNetwork = async ({ networkName, setError }: any) => {\n        try {\n            if (!window.ethereum) throw new Error(\"No crypto wallet found\");\n            await window.ethereum.request({\n                method: \"wallet_addEthereumChain\",\n                params: [\n                    {\n                        ...networks[networkName]\n                    }\n                ]\n            }).then((result: any) => {\n                if(parseInt(result, 16) === 137) {\n                    setChain({\n                        deb0xAddress: \"0x4F3ce26D9749C0f36012C9AbB41BF9938476c462\",\n                        deb0xViewsAddress: \"0xCF7582E5FaC8a6674CcD96ce71D807808Ca8ba6E\",\n                        deb0xERC20Address: \"0x47DD60FA40A050c0677dE19921Eb4cc512947729\",\n                        xenCryptoAddress: \"0x2AB0e9e4eE70FFf1fB9D67031E44F6410170d00e\",\n                        chainId: parseInt(result, 16),\n                        chainName: \"polygon\",\n                        currency: \"MATIC\"\n                    })\n                } else {\n                    setChain({\n                        deb0xAddress: \"0xF5c80c305803280B587F8cabBcCdC4d9BF522AbD\",\n                        deb0xViewsAddress: \"0xf032f7FB8258728A1938473B2115BB163d5Da593\",\n                        deb0xERC20Address: \"0x80f0C1c49891dcFDD40b6e0F960F84E6042bcB6F\",\n                        xenCryptoAddress: \"0xC0C5AA69Dbe4d6DDdfBc89c0957686ec60F24389\",\n                        chainId: parseInt(result, 16),\n                        chainName: \"avalanche\",\n                        currency: \"AVAX\"\n                    })\n                }\n            });\n        } catch (err: any) {\n            setError(err.message);\n        }\n    };\n    \n    const [error, setError] = useState<any>();\n\n    const handleNetworkSwitch = async (networkName: any) => {\n        setError(\"\");\n        await changeNetwork({ networkName, setError }).then(() => {\n            window.location.reload();\n        });\n    };\n\n    const networkChanged = (chainId: any) => {\n       window.location.reload()\n    };\n\n    const handleClick = (event: any) => {\n        const { currentTarget } = event;\n        setAnchorEl(currentTarget)\n        setOpen(!open)\n    };\n\n    const handleClickAway = () => {\n        setOpen(false)\n    };\n\n\n    return (\n        <ClickAwayListener onClickAway={handleClickAway}>\n            <div>\n                <button onClick={handleClick} className=\"chain-switcher\">\n                    {chain.chainName.charAt(0).toUpperCase() + chain.chainName.slice(1)}\n                </button>\n                <Popper id={id} open={open} anchorEl={anchorEl} className=\"chain-popper\">\n                    <button\n                        onClick={() => handleNetworkSwitch(\"polygon\")}\n                        className=\"btn\"\n                    >\n                        <img alt=\"polygon\" src={polygon} className=\"polygon\"/>\n                        Switch to Polygon\n                    </button>\n                    <button\n                        onClick={() => handleNetworkSwitch(\"avalanche\")}\n                        className=\"btn\"\n                    >\n                        <img alt=\"avalanche\" src={avalanche} className=\"avalanche\"/>\n                        Switch to Avalanche\n                    </button>       \n                </Popper>\n            </div>\n        </ClickAwayListener>\n    )\n}","import { useContext, useEffect, useState } from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport { injected } from '../../connectors';\nimport { useWeb3React } from '@web3-react/core';\nimport { Spinner } from './Spinner';\nimport { ethers } from 'ethers';\nimport formatAccountName from '../Common/AccountName';\nimport DBXen from \"../../ethereum/dbxen\"\nimport DBXenViews from \"../../ethereum/dbxenViews\";\nimport DBXenERC20 from \"../../ethereum/dbxenerc20\"\nimport Popper from '@mui/material/Popper';\nimport ClickAwayListener from '@mui/base/ClickAwayListener';\nimport '../../componentsStyling/appBar.scss';\nimport copyIcon from '../../photos/icons/copy-1.svg';\nimport walletIcon from '../../photos/icons/wallet.svg';\nimport disconnectIcon from '../../photos/icons/diconnect.svg';\nimport logo from \"../../photos/white_dbxen.svg\";\nimport ChainProvider from '../Contexts/ChainProvider';\nimport ChainSetter from '../Contexts/ChainSetter';\nimport ChainContext from '../Contexts/ChainContext';\nconst tokenSymbol = 'DBXen';\n\n\nconst tokenDecimals = 18;\nenum ConnectorNames { Injected = 'Injected' };\n\nconst connectorsByName: { [connectorName in ConnectorNames]: any } = {\n    [ConnectorNames.Injected]: injected\n}\n\nexport function AppBarComponent(props: any): any {\n    const context = useWeb3React();\n    const { connector, library, chainId, account, activate, deactivate } = context\n    const { chain }  = useContext(ChainContext)\n    const [activatingConnector, setActivatingConnector] = useState<any>();\n    const [networkName, setNetworkName] = useState<any>();\n    const [userUnstakedAmount,setUserUnstakedAmount] = useState<any>(0);\n    const [ensName, setEnsName] = useState<any>(\"\");\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const [, setNotificationState] = useState({})\n    const [theme, setTheme] = useState(localStorage.getItem('globalTheme'));\n    const [userStakedAmount, setUserStakedAmount] = useState(\"\")\n    const [rewardsUnclaimed, setRewardsUnclaimed] = useState(\"\")\n    const [open, setOpen] = useState<any>(false);\n    const deb0xViewsContract = DBXenViews(library, chain.deb0xViewsAddress)\n    const [totalStaked, setTotalStaked] = useState(\"\")\n    const [totalXENBurned, setTotalXENBurned] = useState<any>();\n\n    const id = open ? 'simple-popper' : \"\";\n\n    if(library){\n        // checkENS();\n        setUnstakedAmount();\n    }\n\n    useEffect(() => {\n        totalAmountStaked()\n    }, [totalAmountStaked]);\n\n    useEffect(() => {\n        setTheme(localStorage.getItem('globalTheme'));\n    }, []);\n\n    useEffect(() => {\n        injected.supportedChainIds?.forEach(chainId => \n            setNetworkName((ethers.providers.getNetwork(chainId).name)));\n        if (activatingConnector && activatingConnector === connector) {\n            setActivatingConnector(undefined)\n        }\n    }, [activatingConnector, connector]);\n\n    useEffect(() => {\n        xenBurned();\n    },[]);\n\n    const xenBurned = async () => {\n        await getTotalXenBurned().then((result: any) => {\n            setTotalXENBurned(result.toLocaleString('en-US'));\n        })\n    }\n\n    async function getTotalXenBurned(){\n        const signer = await library.getSigner(0)\n        const deb0xContract = DBXen(signer, chain.deb0xAddress)\n        let numberBatchesBurnedInCurrentCycle = await deb0xContract.totalNumberOfBatchesBurned();\n        let batchBurned =numberBatchesBurnedInCurrentCycle.toNumber();\n        return batchBurned * 2500000;\n    }\n\n    async function setUnstakedAmount() {\n        const deb0xERC20Contract = DBXenERC20(library, chain.deb0xERC20Address)\n        if(account){\n            await deb0xERC20Contract.balanceOf(account).then((result: any) => \n                setUserUnstakedAmount(floorPrecised(ethers.utils.formatEther(result)))\n            )\n        }\n    }\n\n    useEffect(() => {\n        const deb0xERC20Contract = DBXenERC20(library, chain.deb0xERC20Address)\n        const filterFrom = deb0xERC20Contract.filters.Transfer(account)\n        const filterTo =  deb0xERC20Contract.filters.Transfer(null, account)\n        deb0xERC20Contract.on(filterFrom, () => {\n            setUnstakedAmount()\n        })\n        deb0xERC20Contract.on(filterTo, () => {\n            setUnstakedAmount()\n        })\n\n        return () => {\n            deb0xERC20Contract.removeAllListeners()\n        }\n    },[])\n\n    async function checkENS(){\n        if(Number(chain.chainId) !== 137){\n            var name = await library.lookupAddress(account);\n            if(name !== null)\n            {   \n                setEnsName(name);\n            }\n        }\n       \n    }\n\n    function floorPrecised(number:any) {\n        var power = Math.pow(10, 2);\n        return (Math.floor(parseFloat(number) * power) / power).toString();\n    }\n\n    async function totalAmountStaked() {\n        const deb0xContract = DBXen(library, chain.deb0xAddress)\n        const currentCycle= await deb0xContract.currentStartedCycle()\n        const currentStake = await deb0xContract.summedCycleStakes(currentCycle)\n        const pendingStakeWithdrawal = await deb0xContract.pendingStakeWithdrawal()\n        setTotalStaked(floorPrecised(ethers.utils.formatEther(currentStake.sub(pendingStakeWithdrawal))))\n    }\n\n    async function addToken() {\n        try {\n            const wasAdded = await window.ethereum.request({\n              method: 'wallet_watchAsset',\n              params: {\n                type: 'ERC20',\n                options: {\n                  address: chain.deb0xERC20Address,\n                  symbol: tokenSymbol,\n                  decimals: tokenDecimals,\n                //   image: tokenImage,\n                },\n              },\n            });\n\n            if (wasAdded) {\n                setNotificationState({\n                    message: \"The token was added in your wallet\",\n                    open: true,\n                    severity: \"success\"\n                })      \n                setOpen(false)      \n            }\n            } catch (error: any) {\n                setNotificationState({\n                    message: \"There was an error. Try again later\",\n                    open: true,\n                    severity: \"info\"\n                })\n            }\n    }\n\n    function copyWalletID() {\n        if(account) {\n            navigator.clipboard.writeText(account)\n            setNotificationState({\n                message: \"The address ID was copied successfully\",\n                open: true,\n                severity: \"success\"\n            })\n        }\n        setOpen(false)\n        \n    }\n\n    async function rewardsAccrued() {\n        await deb0xViewsContract.getUnclaimedRewards(account).then((result: any) => \n            setRewardsUnclaimed(floorPrecised(ethers.utils.formatEther(result)))\n        )\n    }\n\n    async function setStakedAmount() {\n        await deb0xViewsContract.getAccWithdrawableStake(account).then((result: any) => \n            setUserStakedAmount(floorPrecised(ethers.utils.formatEther(result)))\n        )\n    }\n\n    const handleClick = (event: any) => {\n        rewardsAccrued();\n        setStakedAmount();\n        setUnstakedAmount();\n        const { currentTarget } = event;\n        setAnchorEl(currentTarget)\n        setOpen(!open)\n    };\n\n    const handleClickAway = () => {\n        setOpen(false)\n    };\n\n    return (\n        <ChainProvider>\n            <div>\n                <div className=\"app-bar--top\">\n                    <img className=\"logo\" src={logo} alt=\"logo\" />\n                    <Box className=\"main-menu--left\">\n                        <p className=\"mb-0\">Total tokens staked:&nbsp; \n                            {Number(totalStaked).toLocaleString('en-US', {\n                                minimumFractionDigits: 2,\n                                maximumFractionDigits: 2\n                            })} DXN</p>\n                        <p className=\"mb-0\">\n                            Total XEN burned: {totalXENBurned}\n                        </p>\n                    </Box>\n                    <Box className=\"main-menu--right d-flex\">\n                        <ChainSetter />\n                        <ClickAwayListener onClickAway={handleClickAway}>\n                            <div>\n                                { (() =>  {\n                                    const currentConnector = connectorsByName[ConnectorNames.Injected]\n                                    const activating = currentConnector === activatingConnector\n                                    const connected = currentConnector === connector\n\n                                    return (\n                                        <Button variant=\"contained\"\n                                            key={ConnectorNames.Injected}\n                                            aria-describedby={id}\n                                            onClick={!connected ? \n                                                () => {\n                                                    setActivatingConnector(currentConnector)\n                                                    activate(currentConnector)\n                                                } : \n                                                handleClick\n                                            }>\n                                            \n                                            { activating ? \n                                                <Spinner color={'black'} /> :\n                                                !connected ? \n                                                    \"Connect Wallet\" :\n                                                    <span>\n                                                        {account === undefined ? \n                                                            `Unsupported Network. Switch to ${networkName}` : \n                                                            account ? \n                                                                ensName === \"\" ? \n                                                                    `${formatAccountName(account)}` :\n                                                                    `${ensName.toLowerCase()} \n                                                                    (${formatAccountName(account)})`\n                                                            : ''}\n                                                    </span>\n                                            }\n                                        </Button>\n                                    )\n                                }) ()}\n                                <Popper className={`popper ${theme === \"classic\" ? \"classic\" : \"dark\"}` } id={id} open={open} anchorEl={anchorEl}>\n                                    <ul>\n                                        <li>\n                                            Unclaimed rewards: <br/> \n                                            {Number(rewardsUnclaimed).toLocaleString('en-US', {\n                                                minimumFractionDigits: 2,\n                                                maximumFractionDigits: 2\n                                            })} \n                                            <span>DXN</span>\n                                        </li>\n                                        <li>\n                                            Active stake: <br/>\n                                            {Number(userStakedAmount).toLocaleString('en-US', {\n                                                minimumFractionDigits: 2,\n                                                maximumFractionDigits: 2\n                                            })} \n                                            <span>DXN</span>\n                                        </li>\n                                        <li>\n                                            In wallet: <br/> \n                                            {Number(userUnstakedAmount).toLocaleString('en-US', {\n                                                minimumFractionDigits: 2,\n                                                maximumFractionDigits: 2\n                                            })} \n                                            <span>DXN</span>\n                                        </li>\n                                    </ul>\n                                    <Button \n                                        onClick={(event: any) => {\n                                            copyWalletID()\n                                        }}\n                                        className=\"copy-wallet-btn\">\n                                        <span><img src={copyIcon} alt=\"copy\" /></span>Copy wallet ID\n                                    </Button>\n                                    <Button\n                                        onClick={(event: any) => {\n                                            addToken()\n                                        }}\n                                        className=\"add-token-btn\">\n                                        <span><img src={walletIcon} alt=\"wallet\"/></span>Add token to wallet\n                                    </Button>\n                                    <Button \n                                        onClick={(event: any) => {\n                                            handleClick(event)\n                                            deactivate()\n                                        }}\n                                            className=\"logout-btn\">\n                                            <span><img src={disconnectIcon} alt=\"disconnect\"/></span>Disconnect wallet\n                                    </Button>  \n                                </Popper>\n                            </div>\n                        </ClickAwayListener>\n                    </Box>\n                </div>\n            </div>\n        </ChainProvider>\n    );\n}\n","import { useState, useEffect, useContext } from 'react';\nimport './App.css';\nimport { \n    Web3ReactProvider,\n    useWeb3React\n} from '@web3-react/core';\nimport { ethers } from \"ethers\";\nimport { useEagerConnect, useInactiveListener } from './hooks'\nimport { PermanentDrawer } from './components/App/PermanentDrawer'\nimport { Stake } from './components/App/Stake';\nimport { Box, Button } from '@mui/material';\nimport ThemeProvider from './components/Contexts/ThemeProvider';\nimport './index.scss';\nimport { injected, network } from './connectors';\nimport elephant from './photos/icons/elephant.svg';\nimport elephantWithText from './photos/icons/elephant.png';\nimport deb0xen from './photos/white_dbxen.svg';\nimport maintenanceImg from './photos/empty.png';\nimport { Spinner } from './components/App/Spinner';\nimport { AppBarComponent } from './components/App/AppBar';\nimport { Burn } from './components/App/Burn';\nimport ScreenSize from './components/Common/ScreenSize';\nimport Countdown, { zeroPad } from \"react-countdown\";\nimport ChainContext from './components/Contexts/ChainContext';\nimport ChainProvider from './components/Contexts/ChainProvider';\n\nconst maintenance = process.env.REACT_APP_MAINTENANCE_MODE;\n\n\nenum ConnectorNames { Injected = 'Injected', Network = 'Network' };\n\nconst connectorsByName: { [connectorName in ConnectorNames]: any } = {\n  [ConnectorNames.Injected]: injected,\n  [ConnectorNames.Network]: network\n}\n\nfunction getLibrary(provider: any): ethers.providers.Web3Provider {\n  const library = new ethers.providers.Web3Provider(provider)\n\n  library.pollingInterval = 12000\n  return library\n}\n\nexport default function web3App(): any {\n    const date:any = new Date(Date.UTC(2023, 2, 16, 13, 55, 0, 0));\n    const now: any = Date.now()\n    let endDate = date.getTime() - now\n\n  return (\n        <Web3ReactProvider getLibrary={getLibrary}>\n            {/* <Countdown date={Date.now() + endDate} renderer={renderer} /> */}\n            {/* <ContractsDeployed /> */}\n            <App />\n        </Web3ReactProvider>\n    )\n}\n\nconst renderer = ({ hours, minutes, seconds, completed }: any) => {\n    if (completed) {\n      // Render a complete state\n      return <ContractsDeployed />;\n    } else {\n      // Render a countdown\n      return (\n        <ThemeProvider>\n            <div className=\"app-container p-0 \">\n                <div className=\"initial-page contracts\">\n                    <div className=\"row\">\n                        <div className=\"col-12 img-container mr-4\">\n                            <p>DBXen time in:</p>\n                            <p>\n                                {zeroPad(hours)}:{zeroPad(minutes)}:{zeroPad(seconds)}\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ThemeProvider>\n      );\n    }\n};\n\nfunction ContractsDeployed() {\n    return (\n        <ThemeProvider>\n            <div className=\"app-container p-0 \">\n                <div className=\"initial-page contracts\">\n                    <div className=\"row\">\n                        <div className=\"col-12 img-container mr-4\">\n                            <img className=\"image--left\" src={elephantWithText} alt=\"elephant\" />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ThemeProvider>\n    )\n}\n\nfunction App() {\n    const context = useWeb3React<ethers.providers.Web3Provider>()\n    const { connector, account, activate } = context\n    const [selectedIndex, setSelectedIndex] = useState<any>(0);\n    // handle logic to recognize the connector currently being activated\n    const [activatingConnector, setActivatingConnector] = useState<any>()\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const [networkName, setNetworkName] = useState<any>();\n    let errorMsg;\n    const dimensions = ScreenSize();\n    const { chain, setChain }  = useContext(ChainContext)\n    \n    useEffect(() => {\n        injected.supportedChainIds?.forEach(chainId => \n            setNetworkName((ethers.providers.getNetwork(chainId).name)));\n        if (activatingConnector && activatingConnector === connector) {\n            setActivatingConnector(undefined)\n        }\n    }, [activatingConnector, connector])\n\n    // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n    const triedEager = useEagerConnect()\n\n    // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n    useInactiveListener(!triedEager || !!activatingConnector)\n\n    function handleClick (event: React.MouseEvent<HTMLElement>) {\n        setAnchorEl(anchorEl ? null : event.currentTarget);\n    };\n\n    useEffect(() => {   \n        window.ethereum ?\n            window.ethereum.request({method: \"eth_requestAccounts\"}).then(() => {\n                 window.ethereum.request({\n                    method: 'eth_chainId',\n                  }).then((chainId:any) => {\n                 //   switchNetwork(chainId); \n                  })\n            }).catch((err: any) => displayErrorMsg(err))\n            : displayErrorMsg(\"Please install MetaMask\");\n    }, [])\n\n    async function switchNetwork(chainId:any) {\n        if((parseInt(chainId.toString(), 16) !== 137) && (parseInt(chainId.toString(), 16) !== 43114)){\n        try {\n            await window.ethereum.request({\n            method: 'wallet_switchEthereumChain',\n            params: [{ chainId: \"0x89\"}],\n            }).then(\n                displayErrorMsg(\"You have switched to the right network\")\n            );            \n        } catch (switchError) {\n            try {\n                await window.ethereum.request({\n                method: 'wallet_addEthereumChain',\n                params: [\n                    {\n                        chainId: '0x89', \n                        chainName:'Polygon Network',\n                        rpcUrls:['https://polygon.llamarpc.com'],                   \n                        blockExplorerUrls:['https://polygonscan.com/'],  \n                        nativeCurrency: { \n                        symbol:'Matic',   \n                        decimals: 18\n                        }       \n                    }\n                    ]});\n            } catch (err) {\n                displayErrorMsg(\"Cannot switch to the network\");\n            }\n        }\n    }\n    }\n\n    function displayErrorMsg(error: string) {\n        errorMsg = error;\n        return errorMsg;\n    }\n    \n    return (\n\n    <ChainProvider>\n        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n            {!!errorMsg &&\n                <p className='alert alert-danger position-fixed' style={{ marginTop: '4rem', marginBottom: '0' }}>\n                    {displayErrorMsg(errorMsg)}\n                </p>\n            }\n        </div>\n            <ThemeProvider>\n            { account ? \n                <div className=\"app-container container-fluid\">\n                    { maintenance === \"true\" ?\n                        <div className=\"row main-row maintenance-mode\">\n                            <img className=\"maintenance-img\" src={maintenanceImg} alt=\"maintenance\" />\n                            <h1>Maintenance Mode</h1>\n                            <h4>We're tightening some nuts and bolts round the back. We'll be back up and running soon.</h4>\n                        </div> :\n                        <div className=\"row main-row\">\n                            <div className=\"col col-lg-3 col-12 p-0 side-menu-container\">\n                                <PermanentDrawer />\n                            </div>\n                            <div className=\"col col-lg-9 col-12\">\n                                <AppBarComponent />\n                                \n                                <Box className=\"main-container\" sx={{marginTop: 12}}>\n                                {dimensions.width > 768 ? \n                                    <Stake />\n                                    :\n                                    <>\n                                        {selectedIndex === 0 && <Burn /> }\n                                        {selectedIndex === 1 && <Stake /> }\n                                    </>\n                                }\n                                </Box>\n                            </div>\n                        </div>\n                    }\n                    <div className=\"navigation-mobile\">\n                        <div className={`navigation-item ${selectedIndex === 0 ? \"active\" : \"\"}`}\n                            onClick={() => setSelectedIndex(0)}>\n                                Mint\n                        </div>\n                        <div className={`navigation-item ${selectedIndex === 1 ? \"active\" : \"\"}`}\n                            onClick={() => setSelectedIndex(1)}>\n                                Fees\n                        </div>\n                    </div>\n                </div> :\n                <div className=\"app-container p-0 \">\n                    <div className=\"initial-page\">\n                        <div className=\"row\">\n                            <div className=\"col-lg-7 img-container mr-4\">\n                                <img className=\"image--left\" src={elephant} alt=\"elephant\" />\n                                <div className=\"img-content\">\n                                    <p>Connect your wallet</p>\n                                    <p>Burn $XEN</p>\n                                    <p>Earn crypto</p>\n                                    \n                                    <div>\n                                        { (() =>  {\n                                            const currentConnector = connectorsByName[ConnectorNames.Injected]\n                                            const activating = currentConnector === activatingConnector\n                                            const connected = currentConnector === connector\n\n                                            return (\n                                                <Button variant=\"contained\"\n                                                    key={ConnectorNames.Injected}\n                                                    // aria-describedby={id}\n                                                    onClick={!connected ? \n                                                        () => {\n                                                            setActivatingConnector(currentConnector)\n                                                            activate(currentConnector)\n                                                        } : \n                                                        handleClick}\n                                                        className=\"connect-button\">\n                                                    \n                                                    { activating ? \n                                                        <Spinner color={'black'} /> :\n                                                        !connected ? \n                                                            \"Connect\" :\n                                                            <span  className=\"unsupported\">\n                                                                {typeof window.ethereum === 'undefined' ? \n                                                                    `Check your prerequisites` : \n                                                                    account === undefined ? `Switch to POLYGON/AVALANCHE` : ''}\n                                                            </span>\n                                                    }\n                                                </Button>\n                                            )\n                                        }) ()}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"col-12 col-lg-5 text-center\">\n                                <div className=\"text-container\">\n                                    <img className=\"dark-logo\" src={deb0xen} alt=\"logo\" />\n                                    <p>\n                                        Community built crypto protocol <br/> contributing to XEN deflation\n                                    </p>\n                                    <div className=\"connect-mobile\">\n                                        { (() =>  {\n                                            const currentConnector = connectorsByName[ConnectorNames.Injected]\n                                            const activating = currentConnector === activatingConnector\n                                            const connected = currentConnector === connector\n\n                                            return (\n                                                <Button variant=\"contained\"\n                                                    key={ConnectorNames.Injected}\n                                                    // aria-describedby={id}\n                                                    onClick={!connected ? \n                                                        () => {\n                                                            setActivatingConnector(currentConnector)\n                                                            activate(currentConnector)\n                                                        } : \n                                                        handleClick}\n                                                        className=\"connect-button\">\n                                                    \n                                                    { activating ? \n                                                        <Spinner color={'black'} /> :\n                                                        !connected ? \n                                                            \"Connect\" :\n                                                            <span className='unsupported'>\n                                                                {typeof window.ethereum === 'undefined' ? \n                                                                    `Check your prerequisites` : \n                                                                    account === undefined ? `Switch to POLYGON/AVALANCHE` : ''}\n                                                            </span>\n                                                    }\n                                                </Button>\n                                            )\n                                        }) ()}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            }\n            </ThemeProvider>\n    </ChainProvider>\n  )\n}\n\n\n","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\n\nimport { injected } from './connectors'\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        setTried(true)\n      }\n    })\n  }, [activate]) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport function useInactiveListener(suppress: boolean = false) {\n  const { active, error, activate } = useWeb3React()\n\n  useEffect((): any => {\n    const { ethereum } = window as any\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        activate(injected)\n      }\n      const handleChainChanged = (chainId: string | number) => {\n        activate(injected)\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        if (accounts.length > 0) {\n          activate(injected)\n        }\n      }\n      const handleNetworkChanged = (networkId: string | number) => {\n        activate(injected)\n      }\n\n      ethereum.on('connect', handleConnect)\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n      ethereum.on('networkChanged', handleNetworkChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('connect', handleConnect)\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n          ethereum.removeListener('networkChanged', handleNetworkChanged)\n        }\n      }\n    }\n  }, [active, error, suppress, activate])\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}