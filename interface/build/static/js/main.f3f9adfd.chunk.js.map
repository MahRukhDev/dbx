{"version":3,"sources":["connectors.ts","components/Common/ScreenSize.tsx","components/App/Snackbar.tsx","photos/icons/file-icon.svg","ethereum/XENCrypto.js","ethereum/dbxen.js","components/App/Spinner.tsx","components/App/Burn.tsx","components/Common/AccountName.tsx","components/App/PermanentDrawer.tsx","ethereum/dbxenViews.js","ethereum/dbxenerc20.js","photos/icons/coin-bag-solid--light.svg","photos/icons/token.svg","photos/icons/coin-bag-solid--dark.svg","photos/icons/wallet--light.svg","photos/icons/wallet--dark.svg","photos/icons/fees.svg","photos/icons/finance.svg","ethereum/signer.js","ethereum/forwarder.js","components/App/Stake.tsx","components/Common/GaEventTracker.tsx","components/Contexts/ThemeContext.tsx","components/App/AppBar.tsx","components/Contexts/ThemeProvider.tsx","photos/icons/elephant.svg","photos/white_dbxen.svg","photos/icons/elephant.png","photos/empty.png","photos/icons/copy-1.svg","photos/icons/wallet.svg","photos/icons/diconnect.svg","App.tsx","hooks.ts","reportWebVitals.ts","index.tsx"],"names":["injected","InjectedConnector","supportedChainIds","network","NetworkConnector","urls","defaultChainId","useWindowSize","useState","width","height","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","Alert","forwardRef","props","ref","elevation","variant","SnackbarNotification","severity","state","open","message","setState","handleClose","event","reason","Snackbar","autoHideDuration","onClose","sx","abi","require","signerOrProvider","address","ethers","Contract","Spinner","color","rest","viewBox","xmlns","stroke","fill","fillRule","transform","strokeWidth","strokeOpacity","cx","cy","r","d","attributeName","type","from","to","dur","repeatCount","BigNumber","deb0xAddress","xenCryptoAddress","Burn","context","useWeb3React","library","account","notificationState","setNotificationState","value","setValue","approveBrun","setApproveBurn","balanceGratherThanZero","checkBalance","maticValue","setMaticValue","totalCost","setTotalCost","totalAmountOfXEN","setXENAmount","loading","setLoading","gasLimit","setCurrentGasLimit","valueAndFee","setValueAndFee","totalBatchApproved","setBatchApproved","getAllowanceForAccount","signer","getSigner","xenContract","XENCrypto","allowance","then","amount","batchApproved","Number","utils","formatEther","Math","trunc","balanceOf","balance","number","toString","estimationValues","options","method","url","port","headers","data","JSON","stringify","deb0xContract","DBXen","getCurrentCycle","currentCycle","cycleTotalBatchesBurned","numberBatchesBurnedInCurrentCycle","axios","request","result","price","web3","fromWei","protocol_fee","gasLimitVal","fee","totalValue","toFixed","total","amountToApprove","undefined","increaseAllowance","parseEther","wait","catch","error","gasLimitIntervalValue","currentValue","overrides","parseUnits","tx","console","log","setBalance","setTimeout","className","max","onChange","e","target","onClick","toLocaleString","minimumFractionDigits","maximumFractionDigits","LoadingButton","loadingPosition","burnXEN","disabled","setApproval","formatAccountName","substring","length","PermanentDrawer","connector","activatingConnector","setActivatingConnector","dimensions","ScreenSize","setNetworkName","forEach","chainId","providers","getNetwork","name","Box","display","Drawer","anchor","href","icon","faTwitter","size","src","document","faGithub","faTelegram","ethSigUtil","ethereumJsUtil","typeName","typeHash","id","EIP712Domain","ForwardRequest","getMetaTxTypeData","verifyingContract","types","domain","version","primaryType","signTypedData","argData","send","buildRequest","forwarder","input","valueParam","getNonce","nonce","gas","validUntilTime","buildTypedData","provider","n","typeData","getDomainSeparator","bufferToHex","TypedDataUtils","hashStruct","signMetaTxRequest","toSign","signature","domainSeparator","createInstance","whitelist","dataFromWhitelist","deb0xViewsAddress","deb0xERC20Address","Stake","category","gaEventTracker","action","ReactGA","setPreviousCycleXENBurned","date","Date","UTC","now","endDate","getTime","renderer","hours","minutes","seconds","completed","zeroPad","FeesPanel","feesUnclaimed","setFeesUnclaimed","getTotalXenBurnedInPreviusCycle","toNumber","deb0xViewsContract","DBXenViews","getUnclaimedFees","fetchClaimFeesResult","fetch","body","response","json","parse","status","sendClaimFeesTx","claimFees","getAddress","includes","interface","encodeFunctionData","feesAccrued","totalXenBurnedPreviousCycle","Card","CardContent","Typography","component","fees","alt","CardActions","CyclePanel","currentReward","setCurrentReward","currentCycleReward","cycleReward","RewardsPanel","rewardsUnclaimed","setRewardsUnclaimed","feeSharePercentage","setFeeSharePercentage","getUnclaimedRewards","unclaimedRewards","getAccWithdrawableStake","accWithdrawableStake","parseFloat","add","currentStartedCycle","summedCycleStakes","totalSupply","feeShare","round","fetchClaimRewardsResult","sendClaimRewardsTx","claimRewards","rewardsAccrued","finance","StakeUnstake","alignment","setAlignment","userStakedAmount","setUserStakedAmount","userUnstakedAmount","setUserUnstakedAmount","tokensForUnstake","setTokenForUnstake","totalStaked","setTotalStaked","amountToUnstake","setAmountToUnstake","amountToStake","setAmountToStake","approved","setApproved","localStorage","getItem","theme","setTheme","accFirstStake","firstStakeCycle","accSecondStake","secondStakeCycle","accStakeCycle","firstStakeCycleAmount","secondStakeCycleAmount","withdawbleStake","totalStakedAmount","DBXenERC20","deb0xERC20Contract","slice","indexOf","approve","fetchUnstakeResult","sendUnstakeTx","unstake","fetchStakeResult","sendStakeTx","stake","tokensInWallet","setStakedAmount","totalAmountStaked","setTokensForUntakedAmount","setUnstakedAmount","ToggleButtonGroup","exclusive","newAlignment","ToggleButton","coinBagDark","coinBagLight","walletDark","walletLight","Grid","container","item","OutlinedInput","placeholder","inputProps","min","Button","ConnectorNames","initialThemeState","_value","ThemeContext","createContext","ThemeProvider","children","savedThemeLocal","setItem","Provider","tokenSymbol","connectorsByName","Injected","AppBarComponent","activate","deactivate","networkName","ensName","setEnsName","anchorEl","setAnchorEl","setOpen","totalXENBurned","setTotalXENBurned","checkENS","xenBurned","getTotalXenBurned","totalNumberOfBatchesBurned","batchBurned","floorPrecised","lookupAddress","power","pow","floor","currentStake","pendingStakeWithdrawal","sub","ethereum","params","symbol","decimals","filterFrom","filters","Transfer","filterTo","on","removeAllListeners","handleClick","currentTarget","ClickAwayListener","onClickAway","logo","currentConnector","activating","connected","toLowerCase","Popper","navigator","clipboard","writeText","copyIcon","addToken","walletIcon","disconnectIcon","maintenance","process","REACT_APP_MAINTENANCE_MODE","Network","getLibrary","Web3Provider","pollingInterval","web3App","App","errorMsg","selectedIndex","setSelectedIndex","triedEager","active","tried","setTried","isAuthorized","useEagerConnect","displayErrorMsg","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","suppress","handleConnect","handleChainChanged","handleAccountsChanged","accounts","handleNetworkChanged","networkId","removeListener","useInactiveListener","switchNetwork","err","style","flexDirection","alignItems","marginTop","marginBottom","maintenanceImg","elephant","deb0xen","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"0ozLASaA,EAAW,IAAIC,IAAkB,CAAEC,kBAAmB,CAAC,OAEvDC,EAAU,IAAIC,IAAiB,CACxCC,KAAM,CAAE,IANH,6EAOLC,eAAgB,M,6BCXL,SAASC,IAGpB,MAAoCC,mBAAS,CAC3CC,MAAO,EACPC,OAAQ,IACR,mBAHKC,EAAU,KAAEC,EAAa,KAoBhC,OAhBAC,qBAAU,WAER,SAASC,IAEPF,EAAc,CACZH,MAAOM,OAAOC,WACdN,OAAQK,OAAOE,aAEnB,CAMA,OAJAF,OAAOG,iBAAiB,SAAUJ,GAElCA,IAEO,kBAAMC,OAAOI,oBAAoB,SAAUL,EAAc,CAClE,GAAG,IACIH,CACT,C,qCCtBIS,EAAQC,sBAAuC,SACnDC,EACAC,GAEA,OAAO,cAAC,IAAQ,aAACC,UAAW,EAAGD,IAAKA,EAAKE,QAAQ,UAAaH,GAChE,IAEe,SAASI,EAAqBJ,GAE3C,MAA0Bd,mBAAS,CAAEmB,SAAUL,EAAMM,MAAMD,SAAUE,KAAMP,EAAMM,MAAMC,KAAMC,QAASR,EAAMM,MAAME,UAAU,mBAArHF,EAAK,KAAEG,EAAQ,KAEtBlB,qBAAU,WACRkB,EAAS,CAACJ,SAAUL,EAAMM,MAAMD,SAAUE,KAAMP,EAAMM,MAAMC,KAAMC,QAASR,EAAMM,MAAME,SACzF,GAAG,CAACR,IAEJ,IAAMU,EAAc,SAACC,EAAsCC,GAC1C,cAAXA,GAIJH,EAAS,CACPD,QAASF,EAAME,QAASD,MAAM,EAC9BF,SAAUC,EAAMD,UAEpB,EAEA,OACE,cAACQ,EAAA,EAAQ,CAACN,KAAMD,EAAMC,KAAMO,iBAAkB,IAAMC,QAASL,EAAY,SACvE,cAAC,EAAK,CAACK,QAASL,EAAaL,SAAUC,EAAMD,SAAUW,GAAI,CAAE7B,MAAO,QAAS,SAC1EmB,EAAME,WAIf,C,sBCrCe,MAA0B,sCCEjCS,EAAQC,EAAQ,KAAhBD,IAEO,WAACE,EAAkBC,GAC9B,OAAO,IAAIC,SAAOC,SAASF,EAASH,EAAKE,EAC5C,ECJOF,EAAQC,EAAQ,KAAhBD,IAEO,WAACE,EAAkBC,GAChC,OAAO,IAAIC,SAAOC,SAASF,EAASH,EAAKE,EAC1C,E,8BCLM,SAASI,EAAQ,GAA0B,IAAxBC,EAAK,EAALA,MAAUC,EAAI,iBACpC,OACI,6CAAKtC,MAAM,KAAKC,OAAO,KAAKsC,QAAQ,YAChCC,MAAM,6BAA6BC,OAAQJ,GAAWC,GAAI,aAC1D,mBAAGI,KAAK,OAAOC,SAAS,UAAS,SAC7B,oBAAGC,UAAU,iBAAiBC,YAAY,IAAG,UACzC,wBAAQC,cAAc,KAAKC,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC7C,sBAAMC,EAAE,8BAA6B,SACrC,kCACIC,cAAc,YACdC,KAAK,SACLC,KAAK,UACLC,GAAG,YACHC,IAAI,KACJC,YAAY,wBAMpC,C,wCCVQC,EAAc1B,EAAQ,IAAtB0B,UAEFC,EAAe,6CACfC,EAAmB,6CAElB,SAASC,IACZ,IAAMC,EAAUC,cACRC,EAAqBF,EAArBE,QAASC,EAAYH,EAAZG,QACjB,EAAkDjE,mBAAS,CAAC,GAAE,mBAAvDkE,EAAiB,KAAEC,EAAoB,KAC9C,EAA0BnE,mBAAS,GAAE,mBAA9BoE,EAAK,KAAEC,EAAQ,KACtB,EAAsCrE,oBAAkB,GAAM,mBAAvDsE,EAAW,KAAEC,EAAc,KAClC,EAA+CvE,mBAAS,IAAG,mBAApDwE,EAAsB,KAAEC,EAAY,KAC3C,EAAoCzE,qBAAe,mBAA5C0E,EAAU,KAAEC,EAAa,KAChC,EAAkC3E,qBAAe,mBAA1C4E,EAAS,KAAEC,EAAY,KAC9B,EAAyC7E,qBAAe,mBAAjD8E,EAAgB,KAAEC,EAAY,KACrC,EAA8B/E,oBAAS,GAAM,mBAAtCgF,EAAO,KAAEC,EAAU,KAC1B,EAAuCjF,qBAAkB,mBAAlDkF,GAAQ,KAAEC,GAAkB,KACnC,GAAsCnF,qBAAe,qBAA9CoF,GAAW,MAAEC,GAAc,MAClC,GAA+CrF,qBAAkB,qBAA1DsF,GAAkB,MAAEC,GAAgB,MAeL,SAEvBC,KAAsB,8CAUpC,OAVoC,mCAArC,gGAE2D,OADjDC,EAASzB,EAAQ0B,UAAU,GAC3BC,EAAcC,EAAUH,EAAQ7B,GAAkB,EAAD,OACjD+B,EAAYE,UAAU5B,EAASN,GAAcmC,MAAK,SAACC,GACrD,IAAIC,EAAgBC,OAAO9D,SAAO+D,MAAMC,YAAYJ,IAAW,KAC/DR,GAAiBa,KAAKC,MAAML,IAC5BC,OAAO9D,SAAO+D,MAAMC,YAAYJ,IAAmB,KAAR3B,EACvCG,GAAe,GACfA,GAAe,EACnB,IAAE,4CACT,sBAEwB,cAWxB,OAXwB,mCAAzB,kGAG2D,OAFvDU,GAAW,GACLQ,EAASzB,EAAQ0B,UAAU,GAC3BC,EAAcC,EAAUH,EAAQ7B,GAAkB,EAAD,OAGjD+B,EAAYW,UAAUrC,GAAS6B,MAAK,SAACS,GACvCC,EAASrE,SAAO+D,MAAMC,YAAYI,GAClC9B,EAAa+B,EAAOC,YACpBxB,GAAW,EACf,IAAE,4CACL,+BAEcyB,KAAgB,8CAwC9B,OAxC8B,mCAA/B,kGAgBqD,MAd5B,OACfC,EAAU,CACZC,OAFiB,OAGjBC,IAAK,yEACLC,KAAM,IACNC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjB,QAAW,MAAO,OAAU,eAAgB,OAAU,GAAI,GAAM,KAIlEzB,EAASzB,EAAQ0B,UAAU,GAC3ByB,EAAgBC,EAAM3B,EAAQ9B,GAAa,SAC3CwD,EAAcE,kBAAkBvB,KAAI,iDAAC,WAAOwB,GAAiB,2FACzDH,EAAcI,wBAAwBD,GAAcxB,KAAI,iDAC1D,WAAO0B,GAAsC,2FACnCC,IAAMC,QAAQf,GAASb,MAAK,SAAC6B,GAC/B,IAAIC,EAAQ3B,OAAO4B,IAAK3B,MAAM4B,QAAQH,EAAOX,KAAKW,OAAOlB,WAAY,SACjEsB,EAAe3D,GAAS,EAAI,KAAUA,GACtC4D,EAAc,EAGdA,EADiC,GAArCR,EACmB9D,EAAUJ,KAAK,UACfI,EAAUJ,KAAK,UAElC6B,GAAmB6C,GACnB,IAAIC,EAAMD,EAAcJ,EAAQG,EAAe,IAC3CG,EAAaD,EAAOA,IAAQ,EAAI,KAAU7D,GAASA,GAEvDiB,GAAe,CAAE4C,IAAKA,EAAIE,QAAQ,GAAIC,MAAOF,EAAWC,QAAQ,KAChExD,EAAcsD,EAAIE,QAAQ,IAC1BtD,EAAaqD,EAAWC,QAAQ,GACpC,IAAE,2CACL,mDAnByD,IAoB7D,2CACJ,mDAtByC,IAsBxC,2CACL,yBAEyB,cAmCzB,OAnCyB,mCAA1B,kGASS,OARLlD,GAAW,GACLQ,EAASzB,EAAQ0B,UAAU,GAC3BC,EAAcC,EAAUH,EAAQ7B,GAClCyE,EAAkB,OACOC,GAAtBhD,IACIlB,EAAQkB,KACP+C,EAAkBjE,EAAQkB,IAEjC,kBAEgBK,EAAY4C,kBAAkB5E,EAAcxB,SAAO+D,MAAMsC,WAAWvC,OAAuB,KAAhBoC,GAAyB5B,aAAY,OAAzH,OACLgC,OACE3C,MAAK,SAAC6B,GACHnC,KACArB,EAAqB,CACjB7C,QAAS,+CAAgDD,MAAM,EAC/DF,SAAU,YAEd8D,GAAW,EACf,IACCyD,OAAM,SAACC,GACJxE,EAAqB,CACjB7C,QAAS,0CAA2CD,MAAM,EAC1DF,SAAU,UAEd8D,GAAW,EACf,IAAE,kDAENd,EAAqB,CACjB7C,QAAS,wEAAyED,MAAM,EACxFF,SAAU,SAEd8D,GAAW,GAAM,2DAExB,sBAEqB,cA0CrB,OA1CqB,mCAAtB,wGACoB,OAAhBA,GAAW,GAAK,SACKjB,EAAQ0B,UAAU,GAAE,OAUpC,OAVCD,EAAM,OACN0B,EAAgBC,EAAM3B,EAAQ9B,GAChCiF,EAAwB1D,GACxB2D,EAAezD,GAAY6C,IAAI,EAAD,OAGxBa,EACN,CACI1E,MAAOjC,SAAO+D,MAAM6C,WAAWF,EAAapC,WAAY,SACxDvB,SAAU0D,GACb,UACgBzB,EAAc,sBAAsB/C,EAAO0E,GAAU,QAA9D,OAAFE,EAAE,iBAEFA,EAAGP,OACJ3C,MAAK,SAAC6B,GACHxD,EAAqB,CACjB7C,QAAS,iBACTD,MAAM,EACNF,SAAU,YAEdqE,KACAP,GAAW,EACf,IACCyD,OAAM,SAACC,GACJxE,EAAqB,CACjB7C,QAAS,wBACTD,MAAM,EACNF,SAAU,UAEd8D,GAAW,EACf,IAAE,0DAENgE,QAAQC,IAAI,KAAM5H,SAClB6C,EAAqB,CACjB7C,QAAS,gCACTD,MAAM,EACNF,SAAU,SAEd8D,GAAW,GAAM,2DAExB,sBAjKD5E,qBAAU,WACNmF,KACAkB,IACJ,GAAG,CAACzC,IAEJ5D,qBAAU,WACNmF,KACAT,EAAqB,KAARX,GACbsC,IACJ,GAAG,CAACtC,IAEJ/D,qBAAU,YAcT,WAEwB,yBAfrB8I,EACJ,GAAG,CAAClF,EAASO,IAsJbnE,qBAAU,WACN+I,YAAW,WAAQjF,EAAqB,CAAC,EAAG,GAAG,IACnD,GAAG,CAACD,IA6BJ,OATA7D,qBAAU,WACF+D,EAAQ,KACRC,EAAS,KAETD,GAAS,GACTC,EAAS,EAEjB,GAAG,CAACD,IAGA,qCACI,cAAClD,EAAoB,CAACE,MAAO8C,EACzBC,qBAAsBA,IAC1B,sBAAKkF,UAAU,mCAAkC,UAC7C,sBAAKA,UAAU,MAAK,UAChB,mBAAGA,UAAU,mBAAkB,SAAC,sDAChC,mBAAGA,UAAU,cAAa,SAAC,iCAE/B,qBAAKA,UAAU,MAAK,SAChB,qBAAKA,UAAU,gBAAe,SAC1B,uBAAOhG,KAAK,SAASe,MAAOA,EAAOkF,IAAI,QAAQC,SAtCzC,SAACC,GAEnBnF,EADAD,EAAQ,IACC,IAEAoF,EAAEC,OAAOrF,MAE1B,QAmCY,sBAAKiF,UAAU,MAAK,UAChB,wBAAQA,UAAU,oBAAoBhG,KAAK,SAASqG,QA7BrD,WACPtF,EAAQ,GACRC,EAASD,EAAQ,EACzB,EA0BoF,SAAC,MACrE,wBAAQiF,UAAU,oBAAoBhG,KAAK,SAASqG,QAnCrD,WACPtF,EAAQ,KACRC,EAAS4B,OAAO7B,GAAS,EACjC,EAgCoF,SAAC,SAEzE,qBAAKiF,UAAU,MAAK,SAChB,wBAAQA,UAAU,4BAA4BhG,KAAK,SAC/CqG,QAAS,kBAAMrF,EAAS,IAAM,EAAC,SAAC,UAExC,sBAAKgF,UAAU,mBAAkB,UAC7B,sBAAKA,UAAU,gBAAe,UAC1B,4BAAG,kBACH,8BAAG,KAAG3E,EAAW,eAErB,sBAAK2E,UAAU,gBAAe,UAC1B,4BAAG,4BACH,8BAAG,KAAGzE,EAAU,eAEpB,sBAAKyE,UAAU,gBAAe,UAC1B,4BAAG,sBACH,8BACKpD,OAAOnB,GAAkB6E,eAAe,QAAS,CAC9CC,sBAAuB,EACvBC,sBAAuB,IACxB,gBAGdvF,EACG,cAACwF,EAAA,EAAa,CAACT,UAAU,WACrBU,gBAAgB,MAChBL,QAAS,kBAxH5B,WAEqB,gCAsHaM,EAAS,EAAC,SACxBhF,EAAU,cAAC3C,EAAO,CAACC,MAAO,UAAc,aAElB,QAA3BkC,GAA+D,MAA3BA,EAChC,cAACsF,EAAA,EAAa,CAACT,UAAU,WACrBU,gBAAgB,MAChBE,SAAqC,QAA3BzF,GAA+D,MAA3BA,EAA+B,SAC5EQ,EAAU,cAAC3C,EAAO,CAACC,MAAO,UAAc,uBAE7C,cAACwH,EAAA,EAAa,CAACT,UAAU,WACrBU,gBAAgB,MAChBE,SAAqC,QAA3BzF,GAA+D,MAA3BA,EAC9CkF,QAAS,kBAzKhC,WAEyB,gCAuKaQ,EAAa,EAAC,SAC5BlF,EAAU,cAAC3C,EAAO,CAACC,MAAO,UAAc,0BAMrE,CC/Re,SAAS6H,EAAkBlG,GAEtC,MAAM,GAAN,OAAUA,EAAQmG,UAAU,EAAG,GAAE,cAAMnG,EAAQmG,UAAUnG,EAAQoG,OAAS,GAC9E,CCwBO,SAASC,EAAgBxJ,GAC5B,IACQyJ,EADQxG,cACRwG,UACR,EAAsDvK,qBAAe,mBAA9DwK,EAAmB,KAAEC,EAAsB,KAC5CC,EAAaC,IACnB,EAAkD3K,mBAAS,CAAC,GAAE,mBAAvDkE,EAAiB,KAAEC,EAAoB,KAC9C,EAAsCnE,qBAAe,mBAAjC4K,GAAF,KAAgB,MAalC,OAXAvK,qBAAU,WAAO,IAAD,EACc,QAA1B,EAAAb,EAASE,yBAAiB,OAA1B,EAA4BmL,SAAQ,SAAAC,GAAO,OACvCF,EAAgBzI,SAAO4I,UAAUC,WAAWF,GAASG,KAAM,IAC3DT,GAAuBA,IAAwBD,GAC/CE,OAAuBnC,EAE/B,GAAG,CAACkC,EAAqBD,IAEzBlK,qBAAU,WACN+I,YAAW,WAAQjF,EAAqB,CAAC,EAAG,GAAG,IACnD,GAAG,CAACD,IAEA,qCACI,cAAChD,EAAoB,CAACE,MAAO8C,EACzBC,qBAAsBA,IACzBuG,EAAWzK,MAAQ,IAChB,cAACiL,EAAA,EAAG,CAAC7B,UAAU,gBAAgBvH,GAAI,CAAEqJ,QAAS,QAAS,SACnD,eAACC,EAAA,EAAM,CAACnK,QAAQ,YACZoK,OAAO,OACPhC,UAAU,YAAW,UACrB,qBAAKA,UAAU,kBAAiB,SAC5B,qBAAKA,UAAU,UAEnB,cAACxF,EAAI,IACL,sBAAKwF,UAAU,UAAS,UACpB,sBAAKA,UAAU,eAAc,UACzB,mBAAGiC,KAAK,mCAAmC7B,OAAO,SAASJ,UAAU,kBAAiB,SAClF,cAAC,IAAe,CAACkC,KAAMC,IAAWC,KAAK,SAE3C,mBAAGH,KAAK,4CAA4C7B,OAAO,SAASJ,UAAU,kBAAiB,SAC3F,qBAAKqC,IAAKC,MAEd,mBAAGL,KAAK,8CAA8C7B,OAAO,SAASJ,UAAU,kBAAiB,SAC7F,cAAC,IAAe,CAACkC,KAAMK,IAAUH,KAAK,SAE1C,mBAAGH,KAAK,iCAAiC7B,OAAO,SAASJ,UAAU,kBAAiB,SAChF,cAAC,IAAe,CAACkC,KAAMM,IAAYJ,KAAK,YAGhD,sBAAKpC,UAAU,YAAW,UACtB,sBAAKA,UAAU,MAAK,UAChB,sBAAMA,UAAU,QAAO,SAAC,YACxB,mBAAGA,UAAU,QAAQI,OAAO,SACxB6B,KAAK,6EAA4E,SAChFnB,EAAkB,mDAG3B,sBAAKd,UAAU,MAAK,UAChB,sBAAMA,UAAU,QAAO,SAAC,iBACxB,mBAAGA,UAAU,QAAQI,OAAO,SACxB6B,KAAK,6EAA4E,SAChFnB,EAAkB,mDAG3B,sBAAKd,UAAU,MAAK,UAChB,sBAAMA,UAAU,QAAO,SAAC,gBACxB,mBAAGA,UAAU,QAAQI,OAAO,SACxB6B,KAAK,6EAA4E,SAChFnB,EAAkB,8DAMlC,+BAKzB,C,uFCtGQpI,GAAQC,EAAQ,KAAhBD,IAEO,YAACE,EAAkBC,GAC9B,OAAO,IAAIC,SAAOC,SAASF,EAASH,GAAKE,EAC5C,ECJOF,GAAQC,EAAQ,KAAhBD,IAEO,YAACE,EAAkBC,GAC9B,OAAO,IAAIC,SAAOC,SAASF,EAASH,GAAKE,EAC5C,E,SCNc,I,OCAA,IDAA,IAA0B,mDEA1B,OAA0B,iDCA1B,OAA0B,0CCA1B,OAA0B,yCCA1B,OAA0B,iCCA1B,OAA0B,oCCAnC6J,GAAa9J,EAAQ,KAErBG,GAASH,EAAQ,IAEjB+J,GAAiB/J,EAAQ,KAGzBgK,GAAQ,yBADS,oGAC0B,KAC3CC,GAAW9J,GAAO+D,MAAMgG,GAAGF,IAE3BG,GAAe,CACjB,CAAElB,KAAM,OAAQ5H,KAAM,UACtB,CAAE4H,KAAM,UAAW5H,KAAM,UACzB,CAAE4H,KAAM,UAAW5H,KAAM,WACzB,CAAE4H,KAAM,oBAAqB5H,KAAM,YAGjC+I,GAAiB,CACnB,CAAEnB,KAAM,OAAQ5H,KAAM,WACtB,CAAE4H,KAAM,KAAM5H,KAAM,WACpB,CAAE4H,KAAM,QAAS5H,KAAM,WACvB,CAAE4H,KAAM,MAAO5H,KAAM,WACrB,CAAE4H,KAAM,QAAS5H,KAAM,WACvB,CAAE4H,KAAM,OAAQ5H,KAAM,SACtB,CAAE4H,KAAM,iBAAkB5H,KAAM,YAGpC,SAASgJ,GAAkBvB,EAASwB,GAChC,MAAO,CACHC,MAAO,CACHJ,gBACAC,mBAEJI,OAAQ,CACJvB,KAAM,YACNwB,QAAS,QACT3B,UACAwB,qBAEJI,YAAa,iBAErB,CAAE,SAEaC,GAAc,EAAD,mDAG3B,OAH2B,mCAA5B,WAA6BlH,EAAQnC,EAAM0D,GAAI,qFACrB,OADqB,EACjB,CAAC,uBAAwBC,KAAKC,UAAUF,IAA3DJ,EAAM,KAAEgG,EAAO,cACTnH,EAAOoH,KAAKjG,EAAQ,CAACtD,EAAMsJ,IAAU,KAAD,+EACpD,+BAEcE,GAAa,EAAD,mDAI1B,OAJ0B,mCAA3B,WAA4BC,EAAWC,EAAOC,GAAU,mFACT,OAArC7I,EAAQ6I,GAA0B,IAAI,EAAD,OACvBF,EAAUG,SAASF,EAAM1J,MAAMwC,MAAK,SAAAqH,GAAK,OAAIA,EAAM1G,UAAU,IAAE,KAAD,EAAvE,OAAL0G,EAAK,sCACF/I,QAAOgJ,IAAK,SAAUD,QAAOE,eAAgB,KAAQL,IAAK,4CACtE,+BAEcM,GAAe,EAAD,iDAI5B,OAJ4B,mCAA7B,WAA8BP,EAAWrF,GAAO,mGACtBqF,EAAUQ,SAASvC,aAAalF,MAAK,SAAA0H,GAAC,OAAIA,EAAE1C,OAAO,IAAE,KAAD,EACX,OADzDA,EAAO,OACP2C,EAAWpB,GAAkBvB,EAASiC,EAAU7K,SAAQ,6CACnDuL,GAAQ,IAAEnM,QAASoG,KAAO,4CACxC,+BAEcgG,GAAmB,GAAD,8CAIhC,OAJgC,mCAAjC,WAAkCX,GAAS,mGACjBA,EAAUQ,SAASvC,aAAalF,MAAK,SAAA0H,GAAC,OAAIA,EAAE1C,OAAO,IAAE,KAAD,EACX,OADzDA,EAAO,OACP2C,EAAWpB,GAAkBvB,EAASiC,EAAU7K,SAAQ,kBACvD6J,GAAe4B,YAAY7B,GAAW8B,eAAeC,WAAW,eAAgBJ,EAASjB,OAAQ,CAAEL,iBAAgB,QAAM,4CACnI,sBAEM,SAAe2B,GAAkB,EAAD,uCAMtC,wDANM,WAAiCrI,EAAQsH,EAAWC,EAAO5I,GAAK,uGAC7C0I,GAAaC,EAAWC,EAAO5I,GAAO,KAAD,EAA9C,OAAPsD,EAAO,gBACQ4F,GAAeP,EAAWrF,GAAS,KAAD,EAA3C,OAANqG,EAAM,gBACYpB,GAAclH,EAAQuH,EAAM1J,KAAMyK,GAAQ,KAAD,EAAlD,OAATC,EAAS,iBACeN,GAAmBX,GAAU,QAAtC,OAAfkB,EAAe,yBACd,CAAEhC,YAAUgC,kBAAiBD,YAAWtG,YAAS,6CAC3D,sB,cCrEO3F,GAAQC,EAAQ,KAAhBD,IAED,SAASmM,GAAeX,GAC7B,OAAO,IAAIpL,SAAOC,SAASF,KAASH,GAAKwL,EAC3C,C,qCCsBQY,GAAcC,GAAdD,UACFxK,GAAe,6CACf0K,GAAoB,6CACpBC,GAAoB,6CAEnB,SAASC,GAAMzN,GAElB,IClC6C0N,EDkC7C,EAA6BzK,cAArBE,EAAO,EAAPA,QAASD,EAAO,EAAPA,QACjB,EAAkDhE,mBAAS,CAAC,GAAE,mBAAvDkE,EAAiB,KAAEC,EAAoB,KACxCsK,GCpCuCD,EDoCG,QCnC3B,SAACE,GACpBC,KAAQlN,MAAM,CAAC+M,WAAUE,UAC3B,GDkCA,EAA4D1O,qBAAe,mBAA5C4O,GAAF,KAA2B,MAClDC,EAAY,IAAIC,KAAKA,KAAKC,IAAI,KAAM,EAAG,GAAI,GAAI,EAAG,GAAI,IACtDC,EAAWF,KAAKE,MAClBC,EAAUJ,EAAKK,UAAYF,EAEzBG,EAAW,SAAH,GAAqD,IAA/CC,EAAK,EAALA,MAAOC,EAAO,EAAPA,QAASC,EAAO,EAAPA,QAChC,OADkD,EAATC,eAGrC,EAII,iCAAM,KACCC,aAAQJ,GAAO,IAAEI,aAAQH,GAAS,IAAEG,aAAQF,KAI/D,EAEA,SAASG,IACL,MAA0CzP,mBAAS,IAAG,mBAA/C0P,EAAa,KAAEC,EAAgB,KACtC,EAA8B3P,oBAAS,GAAM,mBAAtCgF,EAAO,KAAEC,EAAU,KAWgB,aAIzC,OAJyC,kCAA1C,wGACU2K,IAAkC9J,MAAK,SAAC6B,GAC1CiH,EAA0BjH,EAC9B,IAAE,4CACL,+BAEciI,IAA+B,4CAa7C,OAb6C,kCAA9C,gHACyB5L,EAAQ0B,UAAU,GAAE,OACQ,OAD3CD,EAAM,OACN0B,EAAgBC,EAAM3B,EAAQ9B,IAAa,SAE3CwD,EAAcE,kBAAkBvB,KAAI,iDAAC,WAAOwB,GAAiB,8EAC3C,GAAhBA,EAAiB,gCACXH,EAAcI,wBAAwBD,GACvCxB,MAAK,SAAC0B,GACH,OAAsD,KAA/CA,EAAkCqI,UAC7C,IAAE,2CAEb,mDAPyC,IAOxC,gCACK,GAAC,2CACX,wBAEyB,aAMzB,OANyB,kCAA1B,8FACqE,OAA3DC,EAAqBC,GAAW/L,EAASqK,IAAmB,EAAD,OAE3DyB,EAAmBE,iBAAiB/L,GAAS6B,MAAK,SAAC6B,GACrDgI,EAAiBxN,SAAO+D,MAAMC,YAAYwB,GAC9C,IAAG,KAAD,uCACL,+BAEcsI,EAAqB,EAAD,+CAuClC,OAvCkC,kCAAnC,WAAoCvI,EAAcb,GAAQ,2FAChDqJ,MAAMrJ,EAAK,CACbD,OAAQ,OACRuJ,KAAMlJ,KAAKC,UAAUQ,GACrBX,QAAS,CAAE,eAAgB,sBAE1BjB,MAAK,SAACsK,GAAQ,OAAKA,EAASC,MAAM,IAClCvK,KAAI,iDAAC,WAAOkB,GAAI,iFACb,IAAK,EACyBC,KAAKqJ,MAAMtJ,EAAKW,QAClB,GADH,EAAbqB,GACMuH,OACVpM,EAAqB,CACjB7C,QAAS,qCAAsCD,MAAM,EACrDF,SAAU,aAGdgD,EAAqB,CACjB7C,QAAS,4BAA6BD,MAAM,EAC5CF,SAAU,UAEd8D,GAAW,GAgBnB,CAdE,MAAO0D,GACc,WAAf3B,EAAKuJ,OACLpM,EAAqB,CACjB7C,QAAS,+DACTD,MAAM,EACNF,SAAU,SAEQ,SAAf6F,EAAKuJ,QACZpM,EAAqB,CACjB7C,QAAS,8CACTD,MAAM,EACNF,SAAU,SAGtB,CAAC,2CAEJ,mDA/BI,IA+BH,2CACT,iCAEcqP,EAAgB,GAAD,4CA2B7B,OA3B6B,kCAA9B,WAA+BrJ,GAAkB,oGAExBA,EAAcsJ,YAAW,OAAlC,OAELhI,OACE3C,MAAK,SAAC6B,GACHxD,EAAqB,CACjB7C,QAAS,qCAAsCD,MAAM,EACrDF,SAAU,WAGlB,IACCuH,OAAM,SAACC,GACJxE,EAAqB,CACjB7C,QAAS,4BAA6BD,MAAM,EAC5CF,SAAU,UAEd8D,GAAW,EACf,IAAE,gDAENd,EAAqB,CACjB7C,QAAS,gEACTD,MAAM,EACNF,SAAU,SAEd8D,GAAW,GAAM,0DAExB,sBAEuB,aAiCvB,OAjCuB,kCAAxB,4GACoB,OAAhBA,GAAW,GAAK,SAEKjB,EAAQ0B,UAAU,GAAE,OAIR,GAJ3BD,EAAM,OAEN0B,EAAgBC,EAAM3B,EAAQ9B,IAE9BL,EAAOmC,EAAOiL,cAChBvC,GAAUwC,SAASrN,GAAM,CAAD,gBAIQ,OAH1BuD,EAAM,gKACNkG,EAAYmB,GAAelK,GAC3BgD,EAAOG,EAAcyJ,UAAUC,mBAAmB,eAClDtN,EAAK4D,EAAcjF,QAAO,oBAGN4L,GAAkB9J,EAAS+I,EAAW,CAAExJ,KAAID,OAAM0D,SAAQ,KAAD,GAEzC,OAFhCU,EAAO,OAEb+G,EAAe,uBAAuB,UAEhCwB,EAAqBvI,EAASb,GAAI,2DAGxC1C,EAAqB,CACjB7C,QAAS,uDACTD,MAAM,EACNF,SAAU,SAGdsN,EAAe,wBAAwB,iDAGrC+B,EAAgBrJ,GAAc,4DAE3C,sBAED,OA/IA9G,qBAAU,YA4BT,WAEyB,wBA7BtByQ,EACJ,GAAG,CAACpB,IAGJrP,qBAAU,YAEH,WAEmC,wBAHtC0Q,EACJ,GAAG,IAyIC,mCACI,eAACC,EAAA,EAAI,CAAC/P,QAAQ,WAAWoI,UAAU,iBAAgB,UAC/C,eAAC4H,EAAA,EAAW,CAAC5H,UAAU,MAAK,UACxB,sBAAKA,UAAU,uBAAsB,UACjC,cAAC6H,EAAA,EAAU,CAACjQ,QAAQ,KAAKkQ,UAAU,MAAM9H,UAAU,eAAc,SAAC,4BAGlE,eAAC6H,EAAA,EAAU,WAAE,iCAET,iCACKjL,OAAOyJ,GAAe/F,eAAe,QAAS,CAC3CC,sBAAuB,EACvBC,sBAAuB,SAInC,oBAAGR,UAAU,eAAc,UAAC,oBACP,cAAC,KAAS,CAACwF,KAAMC,KAAKE,MAAQC,EAASE,SAAUA,UAG1E,qBAAK9F,UAAU,+DAA8D,SACzE,qBAAKqC,IAAK0F,GAAMC,IAAI,gBAAgBhI,UAAU,wBAGtD,cAACiI,EAAA,EAAW,CAACjI,UAAU,wBAAuB,SAC1C,cAACS,EAAA,EAAa,CACVT,UAAU,cACVY,SAA2B,OAAjByF,EACV1K,QAASA,EACT/D,QAAQ,YACRyI,QApEnB,WAEuB,gCAkEe,SAAC,kBAO5C,CAEA,SAAS6H,IACL,MAA0CvR,mBAAS,IAAG,mBAA/CwR,EAAa,KAAEC,EAAgB,KAKZ,aAKzB,OALyB,kCAA1B,8FACsD,OAA5CtK,EAAgBC,EAAMpD,EAASL,IAAc,EAAD,OAC5CwD,EAAcuK,qBAAqB5L,MAAK,SAAC6B,GAC3C8J,EAAiBtP,SAAO+D,MAAMC,YAAYwB,GAC9C,IAAE,4CACL,sBACD,OAVAtH,qBAAU,YAEU,WAEM,wBAHtBsR,EACJ,GAAG,CAACH,IASA,mCACI,cAACR,EAAA,EAAI,CAAC/P,QAAQ,WAAWoI,UAAU,iBAAgB,SAC/C,cAAC4H,EAAA,EAAW,CAAC5H,UAAU,MAAK,SACxB,sBAAKA,UAAU,wBAAuB,UAClC,cAAC6H,EAAA,EAAU,CAACjQ,QAAQ,KAAKkQ,UAAU,MAAM9H,UAAU,eAAc,SAAC,gBAGlE,eAAC6H,EAAA,EAAU,CAAC7H,UAAU,cAAa,UAAC,wBAEhC,iCACKpD,OAAOuL,GAAe7H,eAAe,QAAS,CAC3CC,sBAAuB,EACvBC,sBAAuB,MAEtB,kBAUrC,CAEA,SAAS+H,IAEL,MAAgD5R,mBAAS,IAAG,mBAArD6R,EAAgB,KAAEC,EAAmB,KAC5C,EAAoD9R,mBAAS,IAAG,mBAAzD+R,EAAkB,KAAEC,EAAqB,KAChD,EAA8BhS,oBAAS,GAAM,mBAAtCgF,EAAO,KAAEC,EAAU,KAUG,aAM5B,OAN4B,kCAA7B,8FACqE,OAA3D6K,EAAqBC,GAAW/L,EAASqK,IAAmB,EAAD,OAE3DyB,EAAmBmC,oBAAoBhO,GAAS6B,MAAK,SAAC6B,GACxDmK,EAAoB3P,SAAO+D,MAAMC,YAAYwB,GACjD,IAAE,4CACL,sBAEsB,aAiBtB,OAjBsB,kCAAvB,4GAGsD,OAF5CmI,EAAqBC,GAAW/L,EAASqK,IAEzClH,EAAgBC,EAAMpD,EAASL,IAAc,EAAD,OAEnBmM,EAAmBmC,oBAAoBhO,GAAS,KAAD,EAAxD,OAAhBiO,EAAgB,gBAEapC,EAAmBqC,wBAAwBlO,GAAS,KAAD,EAEU,OAF1FmO,EAAoB,OAEtB7L,EAAU8L,WAAYlQ,SAAO+D,MAAMC,YAAY+L,EAAiBI,IAAIF,KAAwB,UAErEjL,EAAcoL,sBAAsB,KAAD,GAA5C,OAAZjL,EAAY,iBAEQH,EAAcqL,kBAAkBlL,GAAc,KAAD,GAAjEmL,EAAW,OAEXC,EAAqB,IAAVnM,EAAgBkM,EACjCT,GAAwB5L,KAAKuM,MAAiB,IAAXD,GAAkB,KAAKvK,QAAQ,GAAI1B,WAAa,KAAI,4CAC1F,iCAEcmM,EAAwB,EAAD,+CAuCrC,OAvCqC,kCAAtC,WAAuClL,EAAcb,GAAQ,2FACnDqJ,MAAMrJ,EAAK,CACbD,OAAQ,OACRuJ,KAAMlJ,KAAKC,UAAUQ,GACrBX,QAAS,CAAE,eAAgB,sBAE1BjB,MAAK,SAACsK,GAAQ,OAAKA,EAASC,MAAM,IAClCvK,KAAI,iDAAC,WAAOkB,GAAI,iFACb,IAAK,EACyBC,KAAKqJ,MAAMtJ,EAAKW,QAClB,GADH,EAAbqB,GACMuH,OACVpM,EAAqB,CACjB7C,QAAS,wCAAyCD,MAAM,EACxDF,SAAU,aAGdgD,EAAqB,CACjB7C,QAAS,+BAAgCD,MAAM,EAC/CF,SAAU,UAEd8D,GAAW,GAgBnB,CAdE,MAAO0D,GACc,WAAf3B,EAAKuJ,OACLpM,EAAqB,CACjB7C,QAAS,kEACTD,MAAM,EACNF,SAAU,SAEQ,SAAf6F,EAAKuJ,QACZpM,EAAqB,CACjB7C,QAAS,8CACTD,MAAM,EACNF,SAAU,SAGtB,CAAC,2CAEJ,mDA/BI,IA+BH,2CACT,iCAEc0R,EAAmB,GAAD,4CA4BhC,OA5BgC,kCAAjC,WAAkC1L,GAAkB,oGAE3BA,EAAc2L,eAAc,OAArC,OAELrK,OACE3C,MAAK,SAAC6B,GACHxD,EAAqB,CACjB7C,QAAS,wCAAyCD,MAAM,EACxDF,SAAU,WAIlB,IACCuH,OAAM,SAACC,GACJxE,EAAqB,CACjB7C,QAAS,+BAAgCD,MAAM,EAC/CF,SAAU,UAEd8D,GAAW,EACf,IAAE,gDAENd,EAAqB,CACjB7C,QAAS,mEACTD,MAAM,EACNF,SAAU,SAEd8D,GAAW,GAAM,0DAExB,sBAE0B,aAkC1B,OAlC0B,kCAA3B,4GACoB,OAAhBA,GAAW,GAAK,SAEKjB,EAAQ0B,UAAU,GAAE,OAEQ,OAF3CD,EAAM,OAEN0B,EAAgBC,EAAM3B,EAAQ9B,IAAa,SAG9B8B,EAAOiL,aAAa,KAAD,EAA5B,GAAJpN,EAAI,QACN6K,GAAUwC,SAASrN,GAAM,CAAD,gBAIQ,OAH1BuD,EAAM,gKACNkG,EAAYmB,GAAelK,GAC3BgD,EAAOG,EAAcyJ,UAAUC,mBAAmB,kBAClDtN,EAAK4D,EAAcjF,QAAO,oBAGN4L,GAAkB9J,EAAS+I,EAAW,CAAExJ,KAAID,OAAM0D,SAAQ,KAAD,GAEtC,OAFnCU,EAAO,OAEb+G,EAAe,0BAA0B,UAEnCmE,EAAwBlL,EAASb,GAAI,2DAG3C1C,EAAqB,CACjB7C,QAAS,0DACTD,MAAM,EACNF,SAAU,SAGdsN,EAAe,2BAA2B,iDAGxCoE,EAAmB1L,GAAc,4DAE9C,sBAED,OA9IA9G,qBAAU,YAMe,WAEI,wBAPzB0S,EACJ,GAAG,CAAClB,IAEJxR,qBAAU,YAUT,WAEsB,wBAXnBqS,EACJ,GAAG,CAACX,IAyIA,mCACI,eAACf,EAAA,EAAI,CAAC/P,QAAQ,WAAWoI,UAAU,iBAAgB,UAC/C,eAAC4H,EAAA,EAAW,CAAC5H,UAAU,MAAK,UACxB,sBAAKA,UAAU,wBAAuB,UAClC,cAAC6H,EAAA,EAAU,CAACjQ,QAAQ,KAAKkQ,UAAU,MAAM9H,UAAU,eAAc,SAAC,iBAGlE,eAAC6H,EAAA,EAAU,WAAE,kCAET,iCACKjL,OAAO4L,GAAkBlI,eAAe,QAAS,CAC9CC,sBAAuB,EACvBC,sBAAuB,SAInC,oBAAGR,UAAU,eAAc,UAAC,uBACJ,cAAC,KAAS,CAACwF,KAAMC,KAAKE,MAAQC,EAASE,SAAUA,UAG7E,qBAAK9F,UAAU,+DAA8D,SACzE,qBAAKqC,IAAKsH,GAAS3B,IAAI,gBAAgBhI,UAAU,wBAGzD,eAACiI,EAAA,EAAW,CAACjI,UAAU,wBAAuB,UAC1C,cAACS,EAAA,EAAa,CAACT,UAAU,cAAcrE,QAASA,EAAS/D,QAAQ,YAAYyI,QAhE5F,WAE0B,gCA8DwF,SAAC,UACpG,sBAAML,UAAU,OAAM,SAAC,gGAK3C,CAOA,SAAS4J,IACL,MAAkCjT,mBAAS,SAAQ,mBAA5CkT,EAAS,KAAEC,EAAY,KAE9B,EAAgDnT,mBAAS,IAAG,mBAArDoT,EAAgB,KAAEC,EAAmB,KAC5C,EAAoDrT,mBAAS,IAAG,mBAAzDsT,EAAkB,KAAEC,EAAqB,KAChD,EAA+CvT,mBAAS,IAAG,mBAApDwT,EAAgB,KAAEC,EAAkB,KAC3C,EAAsCzT,mBAAS,IAAG,mBAA3C0T,EAAW,KAAEC,EAAc,KAClC,EAA8C3T,mBAAS,IAAG,mBAAnD4T,EAAe,KAAEC,EAAkB,KAC1C,EAA0C7T,mBAAS,IAAG,mBAA/C8T,EAAa,KAAEC,EAAgB,KACtC,EAA8B/T,oBAAS,GAAM,mBAAtCgF,EAAO,KAAEC,EAAU,KAC1B,EAAgCjF,oBAAyB,GAAM,mBAAxDgU,EAAQ,KAAEC,GAAW,KAU5B,GAA0BjU,mBAASkU,aAAaC,QAAQ,gBAAe,qBAAhEC,GAAK,MAAEC,GAAQ,MA0BQ,cAW7B,OAX6B,mCAA9B,4HACgCjN,EAAMpD,EAASL,IAAa,OAArC,OAAbwD,EAAa,gBACc4I,GAAW/L,EAASqK,IAAkB,OAA/C,OAAlByB,EAAkB,gBACFA,EAAmBqC,wBAAwBlO,GAAQ,OAA5D,wBACekD,EAAcmN,cAAcrQ,GAAQ,QAA7C,OAAfsQ,EAAe,iBACUpN,EAAcqN,eAAevQ,GAAQ,QAA9C,OAAhBwQ,EAAgB,iBACctN,EAAcuN,cAAczQ,EAASsQ,GAAiB,KAAD,GAA9D,OAArBI,EAAqB,iBACUxN,EAAcuN,cAAczQ,EAASwQ,GAAkB,KAAD,GAA/D,OAAtBG,EAAsB,iBACEzN,EAAciL,qBAAqBnO,GAAS,KAAD,GAAnE4Q,EAAe,OACfC,EAAoBpR,KAAUJ,KAAKqR,GAAuBrC,IAAI5O,KAAUJ,KAAKsR,IAAyBtC,IAAI5O,KAAUJ,KAAKuR,IAC7HxB,EAAoBlR,SAAO+D,MAAMC,YAAY2O,IAAmB,6CACnE,sBAEuC,cAKvC,OALuC,mCAAxC,8FACsE,OAA5DhF,EAAsBC,GAAW/L,EAASqK,IAAkB,SAC5CyB,EAAmBqC,wBAAwBlO,GAAS6B,MAAK,SAACS,GAC5EkN,EAAmBtR,SAAO+D,MAAMC,YAAYI,EAAQE,YACxD,IAAE,OAFW,mDAGhB,sBAE+B,cAM/B,OAN+B,mCAAhC,8GACqCsO,GAAW/Q,EAASsK,IAAkB,OAA/C,OAAlB0G,EAAkB,gBACFA,EAAmB1O,UAAUrC,GAAS6B,MAAK,SAACS,GAC9D,IAAIC,EAASrE,SAAO+D,MAAMC,YAAYI,GACtCgN,EAAsBlB,WAAW7L,EAAOyO,MAAM,EAAIzO,EAAO0O,QAAQ,KAAQ,IAAIzO,WACjF,IAAE,OAHW,mDAIhB,sBAEyB,cAMzB,OANyB,mCAA1B,8FACqE,OAA3DuO,EAAqBD,GAAW/Q,EAASsK,IAAkB,SAE3D0G,EAAmBnP,UAAU5B,EAASN,IAAcmC,MAAK,SAACD,GAAa,OACxDoO,GAAhBpO,EAAY,EAA0C,IAC1D,4CACJ,sBAE+B,cAU/B,OAV+B,mCAAhC,8FAEsD,OAA5CsB,EAAgBC,EAAMpD,EAASL,IAAa,SAE7CwD,EAAcoL,sBAAsBzM,KAAI,iDAAC,WAAOwB,GAAgB,2FAC3DH,EAAcqL,kBAAkBlL,GAAcxB,MAAK,SAAC2M,GACtDkB,EAAexR,SAAO+D,MAAMC,YAAYsM,GAC5C,IAAE,2CACL,mDAJ4C,IAI3C,2CAEL,yBAE4B,cAmC5B,OAnC4B,mCAA7B,gGACoB,OAAhBxN,GAAW,GAAK,SAEKjB,EAAQ0B,UAAU,GAAE,OACuB,OAD1DD,EAAM,OACNuP,EAAqBD,GAAWtP,EAAQ6I,IAAkB,kBAG3C0G,EAAmBG,QAAQxR,GAAcxB,SAAO+D,MAAMsC,WAAW,YAAW,OAArF,OACLC,OACE3C,MAAK,SAAC6B,GACHxD,EAAqB,CACjB7C,QAAS,kDAAmDD,MAAM,EAClEF,SAAU,YAEd8D,GAAW,GAEXwJ,EAAe,2BAEnB,IACC/F,OAAM,SAACC,GACJxE,EAAqB,CACjB7C,QAAS,6CAA8CD,MAAM,EAC7DF,SAAU,UAEd8D,GAAW,GACXwJ,EAAe,yBACnB,IAAE,kDAENtK,EAAqB,CACjB7C,QAAS,2EAA4ED,MAAM,EAC3FF,SAAU,SAEd8D,GAAW,GACXwJ,EAAe,6BAA6B,2DAEnD,+BAEc2G,GAAmB,EAAD,iDAyChC,OAzCgC,mCAAjC,WAAkC1N,EAAcb,GAAQ,2FAC9CqJ,MAAMrJ,EAAK,CACbD,OAAQ,OACRuJ,KAAMlJ,KAAKC,UAAUQ,GACrBX,QAAS,CAAE,eAAgB,sBAE1BjB,MAAK,SAACsK,GAAQ,OAAKA,EAASC,MAAM,IAClCvK,KAAI,iDAAC,WAAOkB,GAAI,iFACb,IAAK,EACyBC,KAAKqJ,MAAMtJ,EAAKW,QAClB,GADH,EAAbqB,GACMuH,QACVpM,EAAqB,CACjB7C,QAAS,yCAA0CD,MAAM,EACzDF,SAAU,YAEd8D,GAAW,KAEXd,EAAqB,CACjB7C,QAAS,oCAAqCD,MAAM,EACpDF,SAAU,UAEd8D,GAAW,GAiBnB,CAfE,MAAO0D,GACc,WAAf3B,EAAKuJ,OACLpM,EAAqB,CACjB7C,QAAS,mEACTD,MAAM,EACNF,SAAU,SAEQ,SAAf6F,EAAKuJ,SACZpM,EAAqB,CACjB7C,QAAS,8CACTD,MAAM,EACNF,SAAU,UAEd8D,GAAW,GAEnB,CAAC,2CAEJ,mDAjCI,IAiCH,2CACT,kCAEcoQ,GAAc,GAAD,8CA6B3B,OA7B2B,mCAA5B,WAA6BlO,GAAkB,oGAEtBA,EAAcmO,QAAQnT,SAAO+D,MAAMsC,WAAWoL,EAAgBnN,aAAY,OAAnF,OAELgC,OACE3C,MAAK,SAAC6B,GACHxD,EAAqB,CACjB7C,QAAS,yCAA0CD,MAAM,EACzDF,SAAU,YAEd8D,GAAW,EAEf,IACCyD,OAAM,SAACC,GACJ1D,GAAW,GACXd,EAAqB,CACjB7C,QAAS,oCAAqCD,MAAM,EACpDF,SAAU,SAGlB,IAAE,gDAENgD,EAAqB,CACjB7C,QAAS,mEACTD,MAAM,EACNF,SAAU,SAEd8D,GAAW,GAAM,0DAExB,sBAEqB,cAkCrB,OAlCqB,mCAAtB,4GACoB,OAAhBA,GAAW,GAAK,SAEKjB,EAAQ0B,UAAU,GAAE,OAEQ,OAF3CD,EAAM,OAEN0B,EAAgBC,EAAM3B,EAAQ9B,IAAa,SAE9B8B,EAAOiL,aAAa,KAAD,EAA5B,GAAJpN,EAAI,QACN6K,GAAUwC,SAASrN,GAAM,CAAD,gBAKQ,OAJ1BuD,EAAM,gKACNkG,EAAYmB,GAAelK,GAC3BgD,EAAOG,EAAcyJ,UAAUC,mBAAmB,UACpD,CAAC1O,SAAO+D,MAAMsC,WAAWoL,EAAgBnN,cACvClD,EAAK4D,EAAcjF,QAAO,oBAEN4L,GAAkB9J,EAAS+I,EAAW,CAAExJ,KAAID,OAAM0D,SAAQ,KAAD,GAE5C,OAF7BU,EAAO,OAEb+G,EAAe,oBAAoB,UAE7B2G,GAAmB1N,EAASb,GAAI,2DAGtC1C,EAAqB,CACjB7C,QAAS,uDACTD,MAAM,EACNF,SAAU,SAEd8D,GAAW,GAEXwJ,EAAe,qBAAqB,iDAGlC4G,GAAclO,GAAc,4DAEzC,+BAEcoO,GAAiB,EAAD,iDAwC9B,OAxC8B,mCAA/B,WAAgC7N,EAAcb,GAAQ,2FAC5CqJ,MAAMrJ,EAAK,CACbD,OAAQ,OACRuJ,KAAMlJ,KAAKC,UAAUQ,GACrBX,QAAS,CAAE,eAAgB,sBAE1BjB,MAAK,SAACsK,GAAQ,OAAKA,EAASC,MAAM,IAClCvK,KAAI,iDAAC,WAAOkB,GAAI,iFACb,IAAK,EACyBC,KAAKqJ,MAAMtJ,EAAKW,QAClB,GADH,EAAbqB,GACMuH,OACVpM,EAAqB,CACjB7C,QAAS,mCAAoCD,MAAM,EACnDF,SAAU,aAGdgD,EAAqB,CACjB7C,QAAS,2BAA4BD,MAAM,EAC3CF,SAAU,UAEd8D,GAAW,GAiBnB,CAfE,MAAO0D,GACc,WAAf3B,EAAKuJ,OACLpM,EAAqB,CACjB7C,QAAS,iEACTD,MAAM,EACNF,SAAU,SAEQ,SAAf6F,EAAKuJ,SACZpM,EAAqB,CACjB7C,QAAS,8CACTD,MAAM,EACNF,SAAU,UAEd8D,GAAW,GAEnB,CAAC,2CAEJ,mDAhCI,IAgCH,2CACT,kCAEcuQ,GAAY,GAAD,8CA+BzB,OA/ByB,mCAA1B,WAA2BrO,GAAkB,oGAEpBA,EAAcsO,MAAMtT,SAAO+D,MAAMsC,WAAWsL,EAAcrN,aAAY,OAA/E,OAELgC,OACE3C,MAAK,SAAC6B,GACHxD,EAAqB,CACjB7C,QAAS,uCAAwCD,MAAM,EACvDF,SAAU,YAGd,IAAIuU,EAAiBzP,OAAOqN,GAAsBrN,OAAO6N,GACzDP,EAAsBmC,EAAejP,WAGzC,IACCiC,OAAM,SAACC,GACJxE,EAAqB,CACjB7C,QAAS,kCAAmCD,MAAM,EAClDF,SAAU,UAEd8D,GAAW,EACf,IAAE,gDAENd,EAAqB,CACjB7C,QAAS,iEACTD,MAAM,EACNF,SAAU,SAEd8D,GAAW,GAAM,0DAExB,sBAEmB,cAkCnB,OAlCmB,mCAApB,4GACoB,OAAhBA,GAAW,GAAK,SAEKjB,EAAQ0B,UAAU,GAAE,OAEQ,OAF3CD,EAAM,OAEN0B,EAAgBC,EAAM3B,EAAQ9B,IAAa,SAE9B8B,EAAOiL,aAAa,KAAD,EAA5B,GAAJpN,EAAI,QACN6K,GAAUwC,SAASrN,GAAM,CAAD,gBAKQ,OAJ1BuD,EAAM,gKACNkG,EAAYmB,GAAelK,GAC3BgD,EAAOG,EAAcyJ,UAAUC,mBAAmB,QACpD,CAAC1O,SAAO+D,MAAMsC,WAAWsL,EAAcrN,cACrClD,EAAK4D,EAAcjF,QAAO,oBAGN4L,GAAkB9J,EAAS+I,EAAW,CAAExJ,KAAID,OAAM0D,SAAQ,KAAD,GAE9C,OAF3BU,EAAO,OAEb+G,EAAe,kBAAkB,UAE3B8G,GAAiB7N,EAASb,GAAI,2DAGpC1C,EAAqB,CACjB7C,QAAS,qDACTD,MAAM,EACNF,SAAU,SAEd8D,GAAW,GACXwJ,EAAe,mBAAmB,iDAGhC+G,GAAYrO,GAAc,4DAEvC,sBAED,OA3UA9G,qBAAU,WACNgU,GAASH,aAAaC,QAAQ,eAClC,IAEA9T,qBAAU,YAmBK,WAEe,yBApB1BsV,EACJ,GAAG,CAACvC,IAEJ/S,qBAAU,YAmDT,WAE+B,yBApD5BuV,EACJ,GAAG,CAAClC,IAGJrT,qBAAU,YAuBT,WAEuC,yBAxBpCwV,EACJ,GAAG,IAEHxV,qBAAU,YA0BT,WAE+B,yBA3B5ByV,EACJ,GAAG,CAACxC,IAEJjT,qBAAU,YA8BT,WAEyB,yBA/BtB6J,EACJ,GAAG,CAAC8J,IAqTA,eAAChD,EAAA,EAAI,CAAC/P,QAAQ,WAAWoI,UAAU,iBAAgB,UAC/C,eAAC0M,GAAA,EAAiB,CACdzT,MAAM,UACN8B,MAAO8O,EACP8C,WAAS,EACTzM,SA1VS,SACjB9H,EACAwU,GAEA9C,EAAa8C,GACbxH,EAAewH,EAAe,OAClC,EAqVY5M,UAAU,gBAAe,UAEzB,cAAC6M,GAAA,EAAY,CAAC7M,UAAU,UAAUjF,MAAM,QAAO,SAAC,UAChD,cAAC8R,GAAA,EAAY,CAAC7M,UAAU,UAAUjF,MAAM,UAAS,SAAE,eAKrC,UAAd8O,EAEI,qCACI,eAACjC,EAAA,EAAW,CAAC5H,UAAU,MAAK,UACxB,sBAAKA,UAAU,aAAY,UACvB,qBAAKA,UAAU,kBAAkBqC,IAAe,YAAV0I,GAAsB+B,GAAcC,GAAc/E,IAAI,YAC5F,cAACH,EAAA,EAAU,CAAC7H,UAAU,MAAK,SAAC,wBAG5B,cAAC6H,EAAA,EAAU,CAACjQ,QAAQ,KAAKoI,UAAU,kBAAiB,SAChD,mCACKpD,OAAOmN,GAAkBzJ,eAAe,QAAS,CAC9CC,sBAAuB,EACvBC,sBAAuB,IACxB,eAGf,sBAAKR,UAAU,aAAY,UACvB,qBAAKA,UAAU,kBAAkBqC,IAAe,YAAV0I,GAAsBiC,GAAaC,GAAajF,IAAI,YAC1F,cAACH,EAAA,EAAU,CAAC7H,UAAU,MAAK,SAAC,kCAG5B,cAAC6H,EAAA,EAAU,CAACjQ,QAAQ,KAAKoI,UAAU,MAAM,iBAAW,SAChD,mCACKpD,OAAOqN,GAAoB3J,eAAe,QAAS,CAChDC,sBAAuB,EACvBC,sBAAuB,IACxB,eAGdmK,GAAY,eAACuC,EAAA,EAAI,CAAClN,UAAU,kBAAkBmN,WAAS,YACpD,cAACD,EAAA,EAAI,CAACE,MAAI,WACN,cAACC,EAAA,EAAa,CAACxK,GAAG,iBACdyK,YAAY,kBACZtT,KAAK,SACLe,MAAO0P,EACP8C,WAAY,CAAEC,IAAK,GACnBtN,SAAU,SAAAC,GAAC,OAAIuK,EAAiBvK,EAAEC,OAAOrF,MAAM,MAEvD,cAACmS,EAAA,EAAI,CAAClN,UAAU,oBAAoBoN,MAAI,WACpC,cAACK,EAAA,EAAM,CAACzN,UAAU,UACdoC,KAAK,QAAQxK,QAAQ,YAAYqB,MAAM,QACvCoH,QAAS,kBAAMqK,EAAiBT,EAAmB,EAAC,SAAC,gBAMrE,eAAChC,EAAA,EAAW,CAACjI,UAAU,wBAAuB,UACzC2K,GAAY,cAAClK,EAAA,EAAa,CAACG,UAAW6J,EAAezK,UAAU,cAAcrE,QAASA,EAAS/D,QAAQ,YAAYyI,QAtG3I,WAEmB,iCAoGuI,SAAC,WAClIsK,GACE,qCACI,cAAClK,EAAA,EAAa,CACVT,UAAU,cACVrE,QAASA,EACT/D,QAAQ,YACRgJ,SAAiC,SAAvBqJ,GAAwD,MAAvBA,EAC3C5J,QA5UnC,WAE4B,iCA0U+B,SAAC,uBAG7B,sBAAML,UAAU,OAAM,SAAC,qFASvC,qCACI,eAAC4H,EAAA,EAAW,CAAC5H,UAAU,MAAK,UACxB,sBAAKA,UAAU,aAAY,UACvB,qBAAKA,UAAU,kBAAkBqC,IAAe,YAAV0I,GAAsB+B,GAAcC,GAAc/E,IAAI,YAC5F,cAACH,EAAA,EAAU,CAAC7H,UAAU,MAAK,SAAC,0BAG5B,cAAC6H,EAAA,EAAU,CAACjQ,QAAQ,KAAKoI,UAAU,MAAK,SACpC,mCAASpD,OAAOuN,GAAkB7J,eAAe,QAAS,CACtDC,sBAAuB,EACvBC,sBAAuB,IACxB,eAcX,eAAC0M,EAAA,EAAI,CAAClN,UAAU,kBAAkBmN,WAAS,YACvC,cAACD,EAAA,EAAI,CAACE,MAAI,WACN,cAACC,EAAA,EAAa,CAACtS,MAAOwP,EAClB1H,GAAG,iBACH7C,UAAU,YACVsN,YAAY,oBACZpN,SAAU,SAAAC,GAAC,OAAIqK,EAAmBrK,EAAEC,OAAOrF,MAAM,EACjDwS,WAAY,CAAEC,IAAK,GACnBxT,KAAK,aAEb,cAACkT,EAAA,EAAI,CAAClN,UAAU,oBAAoBoN,MAAI,WACpC,cAACK,EAAA,EAAM,CAACzN,UAAU,UACdoC,KAAK,QAAQxK,QAAQ,YAAYqB,MAAM,QACvCoH,QAAS,kBAAMmK,EAAmBL,EAAiB,EAAC,SAAC,gBAMrE,cAAClC,EAAA,EAAW,CAACjI,UAAU,wBAAuB,SAC1C,cAACS,EAAA,EAAa,CAACT,UAAU,cAAcY,UAAW2J,EAAiB5O,QAASA,EAAS/D,QAAQ,YAAYyI,QAtRhI,WAEqB,iCAoR4H,SAAC,mBAQvJ,CAuCA,OACI,qCACI,cAACxI,EAAoB,CAACE,MAAO8C,EAAmBC,qBAAsBA,IACtE,cAAC+G,EAAA,EAAG,CAAC7B,UAAU,4BAA2B,SACtC,sBAAKA,UAAU,aAAY,UACvB,sBAAKA,UAAU,MAAK,UAChB,cAACkN,EAAA,EAAI,CAACE,MAAI,EAACpN,UAAU,uBAAsB,SACvC,cAACoG,EAAS,MAEd,cAAC8G,EAAA,EAAI,CAACE,MAAI,EAACpN,UAAU,sBAAqB,SACtC,cAACkI,EAAU,SAGnB,sBAAKlI,UAAU,MAAK,UAChB,cAACkN,EAAA,EAAI,CAACE,MAAI,EAACpN,UAAU,uBAAsB,SACvC,cAACuI,EAAY,MAEjB,cAAC2E,EAAA,EAAI,CAACE,MAAI,EAACpN,UAAU,sBAAqB,SACtC,cAAC4J,EAAY,gBAOzC,CE9/BO,ICuBF8D,GDvBQC,GAAoB,CAC/B5C,MAAO,OACPC,SAAU,SAAC4C,GAAoB,GAIlBC,GADMC,wBAAcH,IEwBpBI,GAxBO,SAAH,GAA+B,IAAxBC,EAAQ,EAARA,SACxB,EAA0BrX,mBAAcgX,GAAkB5C,OAAM,mBAAzDA,EAAK,KAAEC,EAAQ,KAEhBH,EAAe3T,OAAO2T,aAc5B,OAZA7T,qBAAU,WACR,IAAMiX,EAAkBpD,EAAaC,QAAQ,eAEvCmD,GACJjD,EAASiD,EAEb,GAAG,CAACpD,IAEJ7T,qBAAU,WACR6T,EAAaqD,QAAQ,cAAenD,EACtC,GAAG,CAACA,EAAOF,IAGT,cAAC,GAAasD,SAAQ,CAACpT,MAAO,CAAEgQ,QAAOC,YAAW,SAChD,qBAAKhL,UAAS,uBAAkB+K,GAAQ,SAAEiD,KAGhD,EC7Be,I,OAAA,IAA0B,sCCA1B,ICAA,IDAA,IAA0B,yCEA1B,OAA0B,kC,oBCA1B,I,OAAA,IAA0B,oCCA1B,OAA0B,mCCA1B,OAA0B,sCRmBnC1T,GAAe,6CAEf2K,GAAoB,6CACpBmJ,GAAc,SAGD,SAAdV,KAAc,qBAAdA,QAAc,KAEnB,I,GAAMW,GAA4D,eAC7DX,GAAeY,SAAWnY,GAGxB,SAASoY,GAAgB9W,GAC5B,IAAMgD,EAAUC,cACRwG,EAA+DzG,EAA/DyG,UAAWvG,EAAoDF,EAApDE,QAAS8G,EAA2ChH,EAA3CgH,QAAS7G,EAAkCH,EAAlCG,QAAS4T,EAAyB/T,EAAzB+T,SAAUC,EAAehU,EAAfgU,WACxD,EAAsD9X,qBAAe,mBAA9DwK,EAAmB,KAAEC,EAAsB,KAClD,EAAsCzK,qBAAe,mBAA9C+X,EAAW,KAAEnN,EAAc,KAClC,EAAmD5K,mBAAc,GAAE,mBAA5DsT,EAAkB,KAACC,EAAqB,KAC/C,EAA8BvT,mBAAc,IAAG,mBAAxCgY,EAAO,KAAEC,EAAU,KAC1B,EAAgCjY,mBAA6B,MAAK,mBAA3DkY,EAAQ,KAAEC,EAAW,KAC5B,EAAiCnY,mBAAS,CAAC,GAAlCmE,EAAoC,iBAAhB,GAC7B,EAA0BnE,mBAASkU,aAAaC,QAAQ,gBAAe,mBAAhEC,EAAK,KAAEC,EAAQ,KACtB,EAAgDrU,mBAAS,IAAG,mBAArDoT,EAAgB,KAAEC,EAAmB,KAC5C,EAAgDrT,mBAAS,IAAG,mBAArD6R,EAAgB,KAAEC,GAAmB,KAC5C,GAAwB9R,qBAAe,qBAAhCqB,GAAI,MAAE+W,GAAO,MACdtI,GAAqBC,GAAW/L,EAxBhB,8CAyBtB,GAAsChE,mBAAS,IAAG,qBAA3C0T,GAAW,MAAEC,GAAc,MAClC,GAA4C3T,qBAAe,qBAApDqY,GAAc,MAAEC,GAAiB,MAElCpM,GAAK7K,GAAO,qBAAkBiH,EAEjCtE,KA8DE,WAEkB,yBA/DnBuU,GACAzC,MAGJzV,qBAAU,WACNuV,IACJ,GAAG,CAACA,KAEJvV,qBAAU,WACNgU,EAASH,aAAaC,QAAQ,eAClC,GAAG,IAEH9T,qBAAU,WAAO,IAAD,EACc,QAA1B,EAAAb,EAASE,yBAAiB,OAA1B,EAA4BmL,SAAQ,SAAAC,GAAO,OACvCF,EAAgBzI,SAAO4I,UAAUC,WAAWF,GAASG,KAAM,IAC3DT,GAAuBA,IAAwBD,GAC/CE,OAAuBnC,EAE/B,GAAG,CAACkC,EAAqBD,IAEzBlK,qBAAU,WACNmY,IACJ,GAAE,IAEF,IAAMA,GAAS,iDAAG,wGACRC,KAAoB3S,MAAK,SAAC6B,GAC5B2Q,GAAkB3Q,EAAOgC,eAAe,SAC5C,IAAE,2CACL,kBAJc,mCAId,SAEc8O,KAAoB,OAAH,uCAM/B,OAN+B,mCAAhC,oHACyBzU,EAAQ0B,UAAU,GAAE,OACQ,OAD3CD,EAAM,OACN0B,EAAgBC,EAAM3B,EAAQ9B,IAAa,SACHwD,EAAcuR,6BAA6B,KAAD,EAC1B,OAD1DlR,EAAiC,OACjCmR,EAAanR,EAAkCqI,WAAU,kBACxC,KAAd8I,GAAqB,4CAC/B,+BAEc7C,KAAiB,8CAO/B,OAP+B,mCAAhC,8FACqE,GAA3Dd,EAAqBD,GAAW/Q,EAASsK,KAC5CrK,EAAQ,CAAC,EAAF,6BACA+Q,EAAmB1O,UAAUrC,GAAS6B,MAAK,SAAC6B,GAAW,OACzD4L,EAAsBqF,GAAczW,SAAO+D,MAAMC,YAAYwB,IAAS,IACzE,4CAER,sBAkBsB,cAStB,OATsB,mCAAvB,iGACmB,MAAZmD,EAAe,gCACG9G,EAAQ6U,cAAc5U,GAAS,KAAD,EACnC,QADRgH,EAAI,SAGJgN,EAAWhN,GACd,4CAGR,sBAED,SAAS2N,GAAcpS,GACnB,IAAIsS,EAAQ1S,KAAK2S,IAAI,GAAI,GACzB,OAAQ3S,KAAK4S,MAAM3G,WAAW7L,GAAUsS,GAASA,GAAOrS,UAC5D,CAAC,SAEcmP,KAAiB,8CAM/B,OAN+B,mCAAhC,oGACsD,OAA5CzO,EAAgBC,EAAMpD,EAASL,IAAa,SACxBwD,EAAcoL,sBAAqB,OAA3C,OAAZjL,EAAa,EAAD,cACSH,EAAcqL,kBAAkBlL,GAAa,OAAtD,OAAZ2R,EAAY,gBACmB9R,EAAc+R,yBAAwB,OAArEA,EAAsB,OAC5BvF,GAAeiF,GAAczW,SAAO+D,MAAMC,YAAY8S,EAAaE,IAAID,MAA0B,6CACpG,sBAEsB,cA8BtB,OA9BsB,mCAAvB,iHAE+B3Y,OAAO6Y,SAAS1R,QAAQ,CAC7Cd,OAAQ,oBACRyS,OAAQ,CACNhW,KAAM,QACNsD,QAAS,CACPzE,QAASoM,GACTgL,OAAQ7B,GACR8B,SA3HI,OA+HP,KAAD,EAXY,SAcVpV,EAAqB,CACjB7C,QAAS,qCACTD,MAAM,EACNF,SAAU,YAEdiX,IAAQ,IACX,gDAEGjU,EAAqB,CACjB7C,QAAS,sCACTD,MAAM,EACNF,SAAU,SACZ,0DAEb,sBAe4B,cAI5B,OAJ4B,mCAA7B,wGACU2O,GAAmBmC,oBAAoBhO,GAAS6B,MAAK,SAAC6B,GAAW,OACnEmK,GAAoB8G,GAAczW,SAAO+D,MAAMC,YAAYwB,IAAS,IACvE,4CACJ,sBAE6B,cAI7B,OAJ6B,mCAA9B,wGACUmI,GAAmBqC,wBAAwBlO,GAAS6B,MAAK,SAAC6B,GAAW,OACvE0L,EAAoBuF,GAAczW,SAAO+D,MAAMC,YAAYwB,IAAS,IACvE,4CACJ,sBA/FDtH,qBAAU,WACN,IAAM2U,EAAqBD,GAAW/Q,EAASsK,IACzCkL,EAAaxE,EAAmByE,QAAQC,SAASzV,GACjD0V,EAAY3E,EAAmByE,QAAQC,SAAS,KAAMzV,GAQ5D,OAPA+Q,EAAmB4E,GAAGJ,GAAY,WAC9B1D,IACJ,IACAd,EAAmB4E,GAAGD,GAAU,WAC5B7D,IACJ,IAEO,WACHd,EAAmB6E,oBACvB,CACJ,GAAE,IAmFF,IAAMC,GAAc,SAACrY,IAdpB,WAE4B,yBAazBsR,GATH,WAE6B,yBAQ1B4C,GACAG,KACA,IAAQiE,EAAkBtY,EAAlBsY,cACR5B,EAAY4B,GACZ3B,IAAS/W,GACX,EAMF,OACI,cAAC2Y,GAAA,EAAiB,CAACC,YALC,WACpB7B,IAAQ,EACZ,EAGoD,SAC5C,gCACI,sBAAK/O,UAAU,eAAc,UACzB,qBAAKA,UAAU,OAAOqC,IAAKwO,GAAM7I,IAAI,SACrC,eAACnG,EAAA,EAAG,CAAC7B,UAAU,kBAAiB,UAC5B,oBAAGA,UAAU,OAAM,UAAC,2BACfpD,OAAOyN,IAAa/J,eAAe,QAAS,CACzCC,sBAAuB,EACvBC,sBAAuB,IACxB,UACP,oBAAGR,UAAU,OAAM,UAAC,qBACGgP,SAG3B,cAACnN,EAAA,EAAG,CAAC7B,UAAU,mBAAkB,SAE9B,WACC,IAAM8Q,EAAmBzC,GAAiBX,GAAeY,UACnDyC,EAAaD,IAAqB3P,EAClC6P,EAAYF,IAAqB5P,EAEvC,OACI,cAACuM,EAAA,EAAM,CAAC7V,QAAQ,YAEZ,mBAAkBiL,GAClBxC,QAAU2Q,EAKNP,GAJA,WACIrP,EAAuB0P,GACvBtC,EAASsC,EACb,EAEH,SAECC,EACE,cAAC/X,EAAO,CAACC,MAAO,UACf+X,EAEG,oCACiB/R,IAAZrE,EAAqB,yCACgB8T,GAClC9T,EACgB,KAAZ+T,EAAc,UACP7N,EAAkBlG,IAAQ,UAC1B+T,EAAQsC,cAAa,uEACrBnQ,EAAkBlG,GAAQ,KACnC,KATV,kBAbH8S,GAAeY,SA2BhC,CAlCG,QAqCP,eAAC4C,GAAA,EAAM,CAAClR,UAAS,iBAAsB,YAAV+K,EAAsB,UAAY,QAAWlI,GAAIA,GAAI7K,KAAMA,GAAM6W,SAAUA,EAAS,UAC7G,+BACI,+BAAI,sBACmB,uBAClBjS,OAAO4L,GAAkBlI,eAAe,QAAS,CAC9CC,sBAAuB,EACvBC,sBAAuB,IAE3B,+BAAM,WAEV,+BAAI,iBACc,uBACb5D,OAAOmN,GAAkBzJ,eAAe,QAAS,CAC9CC,sBAAuB,EACvBC,sBAAuB,IAE3B,+BAAM,WAEV,+BAAI,cACW,uBACV5D,OAAOqN,GAAoB3J,eAAe,QAAS,CAChDC,sBAAuB,EACvBC,sBAAuB,IAE3B,+BAAM,cAGd,eAACiN,EAAA,EAAM,CACHpN,QAAS,SAACjI,GAvHvBwC,IACCuW,UAAUC,UAAUC,UAAUzW,GAC9BE,EAAqB,CACjB7C,QAAS,yCACTD,MAAM,EACNF,SAAU,aAGlBiX,IAAQ,EAiHQ,EACA/O,UAAU,kBAAiB,UAC3B,+BAAM,qBAAKqC,IAAKiP,GAAUtJ,IAAI,WAAgB,oBAElD,eAACyF,EAAA,EAAM,CACHpN,QAAS,SAACjI,IAjK7B,WAEsB,yBAgKCmZ,EACJ,EACAvR,UAAU,gBAAe,UACxB,+BAAM,qBAAKqC,IAAKmP,GAAYxJ,IAAI,aAAiB,yBAEtD,eAACyF,EAAA,EAAM,CACHpN,QAAS,SAACjI,GACNqY,GAAYrY,GACZqW,GACJ,EACIzO,UAAU,aAAY,UACrB,+BAAM,qBAAKqC,IAAKoP,GAAgBzJ,IAAI,iBAAqB,8BAOtF,CSpSA,IAGK0F,GAHCgE,GAAcC,mIAAYC,4BAGb,SAAdlE,KAAc,oBAAdA,EAAc,mBAAdA,QAAc,KAEnB,IAAMW,IAA4D,qBAC/DX,GAAeY,SAAWnY,GAAQ,eAClCuX,GAAemE,QAAUvb,GAAO,IAGnC,SAASwb,GAAW5N,GAClB,IAAMvJ,EAAU,IAAI7B,SAAO4I,UAAUqQ,aAAa7N,GAGlD,OADAvJ,EAAQqX,gBAAkB,KACnBrX,CACT,CAEe,SAASsX,KACpB,IAAMzM,EAAW,IAAIC,KAAKA,KAAKC,IAAI,KAAM,EAAG,GAAI,GAAI,GAAI,EAAG,IACrDC,EAAWF,KAAKE,MACRH,EAAKK,UAErB,OACM,cAAC,IAAiB,CAACiM,WAAYA,GAAW,SAGtC,cAAC,GAAG,KAGhB,CA2CA,SAASI,KACL,IAOIC,EAPE1X,EAAUC,cACRwG,EAAiCzG,EAAjCyG,UAAWtG,EAAsBH,EAAtBG,QAAS4T,EAAa/T,EAAb+T,SAC5B,EAA0C7X,mBAAc,GAAE,mBAAnDyb,EAAa,KAAEC,EAAgB,KAEtC,EAAsD1b,qBAAe,mBAA9DwK,EAAmB,KAAEC,EAAsB,KAClD,EAAgCzK,mBAA6B,MAAK,mBAA3DkY,EAAQ,KAAEC,EAAW,KAC5B,EAAsCnY,qBAAe,mBAA9C+X,EAAW,KAAEnN,EAAc,KAE5BF,EAAaC,IAEnBtK,qBAAU,WAAO,IAAD,EACc,QAA1B,EAAAb,EAASE,yBAAiB,OAA1B,EAA4BmL,SAAQ,SAAAC,GAAO,OACvCF,EAAgBzI,SAAO4I,UAAUC,WAAWF,GAASG,KAAM,IAC3DT,GAAuBA,IAAwBD,GAC/CE,OAAuBnC,EAE/B,GAAG,CAACkC,EAAqBD,IAGzB,IAAMoR,EC/GH,WACL,MAA6B5X,cAArB8T,EAAQ,EAARA,SAAU+D,EAAM,EAANA,OAElB,EAA0B5b,oBAAS,GAAM,mBAAlC6b,EAAK,KAAEC,EAAQ,KAqBtB,OAnBAzb,qBAAU,WACRb,EAASuc,eAAejW,MAAK,SAACiW,GACxBA,EACFlE,EAASrY,OAAU8I,GAAW,GAAMI,OAAM,WACxCoT,GAAS,EACX,IAEAA,GAAS,EAEb,GACF,GAAG,CAACjE,IAGJxX,qBAAU,YACHwb,GAASD,GACZE,GAAS,EAEb,GAAG,CAACD,EAAOD,IAEJC,CACT,CDsFuBG,GAKnB,SAASlC,EAAarY,GAClB0W,EAAYD,EAAW,KAAOzW,EAAMsY,cACxC,CAU4B,aA6B3B,OA7B2B,kCAA5B,iHAEcxZ,OAAO6Y,SAAS1R,QAAQ,CAC9Bd,OAAQ,6BACRyS,OAAQ,CAAC,CAAEvO,QAAS,WACjBhF,KACCmW,EAAgB,2CAClB,KAAD,4EAGS1b,OAAO6Y,SAAS1R,QAAQ,CAC9Bd,OAAQ,0BACRyS,OAAQ,CACJ,CACIvO,QAAS,OACToR,UAAU,kBACVC,QAAQ,CAAC,sCACTC,kBAAkB,CAAC,4BACnBC,eAAgB,CAChB/C,OAAO,QACPC,SAAU,QAGV,KAAD,qDAEP0C,EAAgB,gCAAgC,iEAI3D,sBAED,SAASA,EAAgBtT,GAErB,OADA6S,EAAW7S,CAEf,CAEA,OCzIG,WAAyD,IAA5B2T,EAAiB,wDACnD,EAAoCvY,cAA5B6X,EAAM,EAANA,OAAQjT,EAAK,EAALA,MAAOkP,EAAQ,EAARA,SAEvBxX,qBAAU,WACR,IAAQ+Y,EAAa7Y,OAAb6Y,SACR,GAAIA,GAAYA,EAASQ,KAAOgC,IAAWjT,IAAU2T,EAAU,CAC7D,IAAMC,EAAgB,WACpB1E,EAASrY,EACX,EACMgd,EAAqB,SAAC1R,GAC1B+M,EAASrY,EACX,EACMid,EAAwB,SAACC,GACzBA,EAASrS,OAAS,GACpBwN,EAASrY,EAEb,EACMmd,EAAuB,SAACC,GAC5B/E,EAASrY,EACX,EAOA,OALA4Z,EAASQ,GAAG,UAAW2C,GACvBnD,EAASQ,GAAG,eAAgB4C,GAC5BpD,EAASQ,GAAG,kBAAmB6C,GAC/BrD,EAASQ,GAAG,iBAAkB+C,GAEvB,WACDvD,EAASyD,iBACXzD,EAASyD,eAAe,UAAWN,GACnCnD,EAASyD,eAAe,eAAgBL,GACxCpD,EAASyD,eAAe,kBAAmBJ,GAC3CrD,EAASyD,eAAe,iBAAkBF,GAE9C,CACF,CACF,GAAG,CAACf,EAAQjT,EAAO2T,EAAUzE,GAC/B,CDmDIiF,EAAqBnB,KAAgBnR,GAMrCnK,qBAAU,WACNE,OAAO6Y,SACH7Y,OAAO6Y,SAAS1R,QAAQ,CAACd,OAAQ,wBAAwBd,MAAK,YAI5D,WAEkB,wBALhBiX,EACJ,IAAGrU,OAAM,SAACsU,GAAQ,OAAKf,EAAgBe,EAAI,IACzCf,EAAgB,0BACtB,GAAG,IAwCP,qCACA,qBAAKgB,MAAO,CAAE9R,QAAS,OAAQ+R,cAAe,SAAUC,WAAY,UAAW,WACxE3B,GACC,mBAAGnS,UAAU,oCAAoC4T,MAAO,CAAEG,UAAW,OAAQC,aAAc,KAAM,SAC5FpB,EAAgBT,OAIzB,cAAC,GAAa,UACZvX,EACE,sBAAKoF,UAAU,gCAA+B,UACxB,SAAhB0R,GACE,sBAAK1R,UAAU,gCAA+B,UAC1C,qBAAKA,UAAU,kBAAkBqC,IAAK4R,GAAgBjM,IAAI,gBAC1D,6BAAI,qBACJ,6BAAI,+FAER,sBAAKhI,UAAU,eAAc,UACzB,qBAAKA,UAAU,8CAA6C,SACxD,cAACiB,EAAe,MAEpB,sBAAKjB,UAAU,sBAAqB,UAChC,cAACuO,GAAe,IAEhB,cAAC1M,EAAA,EAAG,CAAC7B,UAAU,iBAAiBvH,GAAI,CAACsb,UAAW,IAAI,SACnD1S,EAAWzK,MAAQ,IAChB,cAACsO,GAAK,IACN,qCACuB,IAAlBkN,GAAuB,cAAC5X,EAAI,IACV,IAAlB4X,GAAuB,cAAClN,GAAK,eAOlD,sBAAKlF,UAAU,oBAAmB,UAC9B,qBAAKA,UAAS,0BAAuC,IAAlBoS,EAAsB,SAAW,IAChE/R,QAAS,kBAAMgS,EAAiB,EAAE,EAAC,SAAC,SAGxC,qBAAKrS,UAAS,0BAAuC,IAAlBoS,EAAsB,SAAW,IAChE/R,QAAS,kBAAMgS,EAAiB,EAAE,EAAC,SAAC,eAKhD,qBAAKrS,UAAU,qBAAoB,SAC/B,qBAAKA,UAAU,eAAc,SACzB,sBAAKA,UAAU,MAAK,UAChB,sBAAKA,UAAU,8BAA6B,UACxC,qBAAKA,UAAU,cAAcqC,IAAK6R,GAAUlM,IAAI,aAChD,sBAAKhI,UAAU,cAAa,UACxB,4BAAG,wBACH,4BAAG,cACH,4BAAG,gBAEH,8BACO,WACC,IAAM8Q,EAAmBzC,GAAiBX,GAAeY,UACnDyC,EAAaD,IAAqB3P,EAClC6P,EAAYF,IAAqB5P,EAEvC,OACI,cAACuM,EAAA,EAAM,CAAC7V,QAAQ,YAGZyI,QAAU2Q,EAKNP,EAJA,WACIrP,EAAuB0P,GACvBtC,EAASsC,EACb,EAEA9Q,UAAU,iBAAgB,SAE5B+Q,EACE,cAAC/X,EAAO,CAACC,MAAO,UACf+X,EAEG,+BACgC,qBAApB9Z,OAAO6Y,SAAwB,gCAEvB9Q,IAAZrE,EAAqB,yCAAqC8T,GAAgB,KAJlF,WAbHhB,GAAeY,SAsBhC,CA7BG,WAiCf,qBAAKtO,UAAU,8BAA6B,SACxC,sBAAKA,UAAU,iBAAgB,UAC3B,qBAAKA,UAAU,YAAYqC,IAAK8R,GAASnM,IAAI,SAC7C,8BAAG,mCACiC,uBAAK,oCAEzC,qBAAKhI,UAAU,iBAAgB,SACxB,WACC,IAAM8Q,EAAmBzC,GAAiBX,GAAeY,UACnDyC,EAAaD,IAAqB3P,EAClC6P,EAAYF,IAAqB5P,EAEvC,OACI,cAACuM,EAAA,EAAM,CAAC7V,QAAQ,YAGZyI,QAAU2Q,EAKNP,EAJA,WACIrP,EAAuB0P,GACvBtC,EAASsC,EACb,EAEA9Q,UAAU,iBAAgB,SAE5B+Q,EACE,cAAC/X,EAAO,CAACC,MAAO,UACf+X,EAEG,+BACgC,qBAApB9Z,OAAO6Y,SAAwB,gCAEvB9Q,IAAZrE,EAAqB,yCAAqC8T,GAAgB,KAJlF,WAbHhB,GAAeY,SAsBhC,CA7BG,qBAwCvC,CEnTA,IAYe8F,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB7X,MAAK,YAAkD,IAA/C8X,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,EACV,GAEJ,E,OCLAO,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,GAAG,MAENxS,SAASyS,eAAe,SAM1BX,I","file":"static/js/main.f3f9adfd.chunk.js","sourcesContent":["\nimport { InjectedConnector } from '@web3-react/injected-connector'\nimport { NetworkConnector } from '@web3-react/network-connector'\n\n// const POLLING_INTERVAL = 12000\nconst RPC_URLS: { [chainId: number]: string } = {\n    137: 'https://polygon-mainnet.g.alchemy.com/v2/qthz4_6kfuPquCG5N1A6v5Waz9YW0pNZ'\n}\n\nexport const injected = new InjectedConnector({ supportedChainIds: [137] })\n\nexport const network = new NetworkConnector({\n    urls: { 137: RPC_URLS[137] },\n    defaultChainId: 137\n  })","import React, { useState, useEffect } from 'react'\n\nexport default function useWindowSize() {\n    // Initialize state with undefined width/height so server and client renders match\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n    const [windowSize, setWindowSize] = useState({\n      width: 0,\n      height: 0,\n    });\n    useEffect(() => {\n      // Handler to call on window resize\n      function handleResize() {\n        // Set window width/height to state\n        setWindowSize({\n          width: window.innerWidth,\n          height: window.innerHeight,\n        });\n      }\n      // Add event listener\n      window.addEventListener(\"resize\", handleResize);\n      // Call handler right away so state gets updated with initial window size\n      handleResize();\n      // Remove event listener on cleanup\n      return () => window.removeEventListener(\"resize\", handleResize);\n    }, []); // Empty array ensures that effect is only run on mount\n    return windowSize;\n  }","import { useState, forwardRef, useEffect } from 'react'\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\nconst Alert = forwardRef<HTMLDivElement, AlertProps>(function Alert(\n  props,\n  ref,\n) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport default function SnackbarNotification(props: any) {\n\n  const [state, setState] = useState({ severity: props.state.severity, open: props.state.open, message: props.state.message })\n\n  useEffect(() => {\n    setState({severity: props.state.severity, open: props.state.open, message: props.state.message})\n  }, [props])\n\n  const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setState({\n      message: state.message, open: false,\n      severity: state.severity\n    })\n  };\n\n  return (\n    <Snackbar open={state.open} autoHideDuration={6000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity={state.severity} sx={{ width: '100%' }}>\n        {state.message}\n      </Alert>\n    </Snackbar>\n  )\n}","export default __webpack_public_path__ + \"static/media/file-icon.92106822.svg\";","import { ethers } from \"ethers\";\n\nconst { abi } = require(\"./XENCrypto.json\");\n\nexport default (signerOrProvider, address) => {\n    return new ethers.Contract(address, abi, signerOrProvider);\n}","import { ethers } from \"ethers\";\n\nconst { abi } = require(\"./DBXen.json\");\n\nexport default (signerOrProvider, address) => {\n  return new ethers.Contract(address, abi, signerOrProvider);\n}","// <!-- By Sam Herbert (@sherb), for everyone. More @ http://goo.gl/7AJzbL -->\nexport function Spinner({ color, ...rest }: any) {\n    return (\n        <svg width=\"38\" height=\"38\" viewBox=\"0 0 38 38\" \n            xmlns=\"http://www.w3.org/2000/svg\" stroke={color} {...rest}>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <g transform=\"translate(1 1)\" strokeWidth=\"2\">\n                    <circle strokeOpacity=\".5\" cx=\"18\" cy=\"18\" r=\"18\" />\n                    <path d=\"M36 18c0-9.94-8.06-18-18-18\">\n                    <animateTransform\n                        attributeName=\"transform\"\n                        type=\"rotate\"\n                        from=\"0 18 18\"\n                        to=\"360 18 18\"\n                        dur=\"1s\"\n                        repeatCount=\"indefinite\" />\n                    </path>\n                </g>\n            </g>\n        </svg>\n    )\n}","import { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport XENCrypto from '../../ethereum/XENCrypto';\nimport DBXen from \"../../ethereum/dbxen\"\nimport { ethers } from \"ethers\";\nimport \"../../componentsStyling/permanentDrawer.scss\";\nimport SnackbarNotification from './Snackbar';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport { Spinner } from './Spinner';\nimport axios, { Method } from 'axios';\nimport web3 from 'web3';\nconst { BigNumber } = require(\"ethers\");\n\nconst deb0xAddress = \"0x4F3ce26D9749C0f36012C9AbB41BF9938476c462\";\nconst xenCryptoAddress = \"0x2AB0e9e4eE70FFf1fB9D67031E44F6410170d00e\";\n\nexport function Burn(): any {\n    const context = useWeb3React()\n    const { library, account } = context\n    const [notificationState, setNotificationState] = useState({});\n    const [value, setValue] = useState(1);\n    const [approveBrun, setApproveBurn] = useState<boolean>(false);\n    const [balanceGratherThanZero, checkBalance] = useState(\"\");\n    const [maticValue, setMaticValue] = useState<any>();\n    const [totalCost, setTotalCost] = useState<any>();\n    const [totalAmountOfXEN, setXENAmount] = useState<any>();\n    const [loading, setLoading] = useState(false)\n    const [gasLimit, setCurrentGasLimit] = useState<number>();\n    const [valueAndFee, setValueAndFee] = useState<any>();\n    const [totalBatchApproved, setBatchApproved] = useState<number>();\n\n    useEffect(() => {\n        getAllowanceForAccount();\n        estimationValues();\n    }, [account]);\n\n    useEffect(() => {\n        getAllowanceForAccount();\n        setXENAmount(value * 2500000);\n        estimationValues();\n    }, [value]);\n\n    useEffect(() => {\n        setBalance()\n    }, [account, balanceGratherThanZero]);\n\n    async function getAllowanceForAccount() {\n        const signer = library.getSigner(0)\n        const xenContract = XENCrypto(signer, xenCryptoAddress);\n        await xenContract.allowance(account, deb0xAddress).then((amount: any) =>{\n            let batchApproved = Number(ethers.utils.formatEther(amount)) / 2500000;\n            setBatchApproved(Math.trunc(batchApproved));\n            Number(ethers.utils.formatEther(amount)) < value * 2500000 ?\n                setApproveBurn(false) :\n                setApproveBurn(true)\n            })\n    }\n\n    async function setBalance() {\n        setLoading(true);\n        const signer = library.getSigner(0)\n        const xenContract = XENCrypto(signer, xenCryptoAddress);\n        let number;\n\n        await xenContract.balanceOf(account).then((balance: any) => {\n            number = ethers.utils.formatEther(balance);\n            checkBalance(number.toString())\n            setLoading(false);\n        })\n    }\n\n    async function estimationValues() {\n\n        let method: Method = 'POST';\n        const options = {\n            method: method,\n            url: 'https://polygon-mainnet.infura.io/v3/6010818c577b4531b1886965421a91d3 ',\n            port: 443,\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            data: JSON.stringify({\n                \"jsonrpc\": \"2.0\", \"method\": \"eth_gasPrice\", \"params\": [], \"id\": 1\n            })\n        };\n\n        const signer = library.getSigner(0)\n        const deb0xContract = DBXen(signer, deb0xAddress)\n        await deb0xContract.getCurrentCycle().then(async (currentCycle: any) => {\n            await deb0xContract.cycleTotalBatchesBurned(currentCycle).then(\n                async (numberBatchesBurnedInCurrentCycle: any) => {\n                    await axios.request(options).then((result) => {\n                        let price = Number(web3.utils.fromWei(result.data.result.toString(), \"Gwei\"));\n                        let protocol_fee = value * (1 - 0.00005 * value);\n                        let gasLimitVal = 0;\n\n                        numberBatchesBurnedInCurrentCycle != 0 ?\n                            gasLimitVal = (BigNumber.from(\"250000\")) :\n                            gasLimitVal = (BigNumber.from(\"400000\"))\n\n                        setCurrentGasLimit(gasLimitVal);\n                        let fee = gasLimitVal * price * protocol_fee / 1000000000;\n                        let totalValue = fee + (fee / ((1 - 0.00005 * value) * value));\n\n                        setValueAndFee({ fee: fee.toFixed(4), total: totalValue.toFixed(4) })\n                        setMaticValue(fee.toFixed(4));\n                        setTotalCost(totalValue.toFixed(4));\n                    })\n                }\n            )\n        })\n    }\n\n    async function setApproval() {\n        setLoading(true);\n        const signer = library.getSigner(0)\n        const xenContract = XENCrypto(signer, xenCryptoAddress)\n        let amountToApprove = 0;\n            if(totalBatchApproved != undefined){\n                if(value > totalBatchApproved){\n                    amountToApprove = value - totalBatchApproved;\n                }\n            }\n        try {\n            const tx = await xenContract.increaseAllowance(deb0xAddress, ethers.utils.parseEther(Number(amountToApprove*2500000).toString()))\n            tx.wait()\n                .then((result: any) => {\n                    getAllowanceForAccount();\n                    setNotificationState({\n                        message: \"Your succesfully approved contract for burn.\", open: true,\n                        severity: \"success\"\n                    })\n                    setLoading(false)\n                })\n                .catch((error: any) => {\n                    setNotificationState({\n                        message: \"Contract couldn't be approved for burn!\", open: true,\n                        severity: \"error\"\n                    })\n                    setLoading(false)\n                })\n        } catch (error) {\n            setNotificationState({\n                message: \"You rejected the transaction. Contract hasn't been approved for burn.\", open: true,\n                severity: \"info\"\n            })\n            setLoading(false)\n        }\n    }\n\n    async function burnXEN() {\n        setLoading(true)\n        const signer = await library.getSigner(0)\n        const deb0xContract = DBXen(signer, deb0xAddress)\n        let gasLimitIntervalValue = gasLimit\n        let currentValue = valueAndFee.fee;\n\n        try {\n            const overrides =\n            {\n                value: ethers.utils.parseUnits(currentValue.toString(), \"ether\"),\n                gasLimit: gasLimitIntervalValue\n            }\n            const tx = await deb0xContract[\"burnBatch(uint256)\"](value, overrides)\n\n            await tx.wait()\n                .then((result: any) => {\n                    setNotificationState({\n                        message: \"Burn completed\",\n                        open: true,\n                        severity: \"success\"\n                    })\n                    getAllowanceForAccount();\n                    setLoading(false)\n                })\n                .catch((error: any) => {\n                    setNotificationState({\n                        message: \"Something went wrong!\",\n                        open: true,\n                        severity: \"error\"\n                    })\n                    setLoading(false)\n                })\n        } catch (error: any) {\n            console.log(error.message)\n            setNotificationState({\n                message: \"You rejected the transaction.\",\n                open: true,\n                severity: \"info\"\n            })\n            setLoading(false)\n        }\n    }\n\n    useEffect(() => {\n        setTimeout(() => { setNotificationState({}) }, 2000)\n    }, [notificationState])\n\n    const handleInputChange = (e: any) => {\n        if (value > 10000) {\n            setValue(10000)\n        } else {\n            setValue(e.target.value);\n        }\n    }\n\n    const incNum = () => {\n        if (value < 10000)\n            setValue(Number(value) + 1);\n    };\n\n    const decNum = () => {\n        if (value > 1)\n            setValue(value - 1);\n    }\n\n    useEffect(() => {\n        if (value > 10000) {\n            setValue(10000)\n        }\n        if (value <= 0) {\n            setValue(1)\n        }\n    }, [value])\n\n    return (\n        <>\n            <SnackbarNotification state={notificationState}\n                setNotificationState={setNotificationState} />\n            <div className=\"side-menu--bottom burn-container\">\n                <div className=\"row\">\n                    <p className=\"text-center mb-0\">Choose the number of XEN batches you want to burn</p>\n                    <p className=\"text-center\">(1 batch = 2 500 000 XEN)</p>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col input-col\">\n                        <input type=\"number\" value={value} max=\"10000\" onChange={handleInputChange} />\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <button className=\"btn count-btn col\" type=\"button\" onClick={decNum}>-</button>\n                    <button className=\"btn count-btn col\" type=\"button\" onClick={incNum}>+</button>\n                </div>\n                <div className=\"row\">\n                    <button className=\"btn count-btn max-btn col\" type=\"button\"\n                        onClick={() => setValue(10000)}>MAX</button>\n                </div>\n                <div className=\"values-container\">\n                    <div className=\"value-content\">\n                        <p>Protocol Fee:</p>\n                        <p> ~{maticValue} MATIC</p>\n                    </div>\n                    <div className=\"value-content\">\n                        <p>Total transaction cost:</p>\n                        <p> ~{totalCost} MATIC</p>\n                    </div>\n                    <div className=\"value-content\">\n                        <p>Total XEN burned:</p>\n                        <p>\n                            {Number(totalAmountOfXEN).toLocaleString('en-US', {\n                                minimumFractionDigits: 2,\n                                maximumFractionDigits: 2\n                            })} XEN</p>\n                    </div>\n                </div>\n                {approveBrun ?\n                    <LoadingButton className=\"burn-btn\"\n                        loadingPosition=\"end\"\n                        onClick={() => burnXEN()} >\n                        {loading ? <Spinner color={'black'} /> : \"Burn XEN\"}\n                    </LoadingButton> :\n                    balanceGratherThanZero === '0.0' || balanceGratherThanZero === '0' ?\n                        <LoadingButton className=\"burn-btn\"\n                            loadingPosition=\"end\"\n                            disabled={balanceGratherThanZero === '0.0' || balanceGratherThanZero === '0'}>\n                            {loading ? <Spinner color={'black'} /> : \"Your balance is 0!\"}\n                        </LoadingButton> :\n                        <LoadingButton className=\"burn-btn\"\n                            loadingPosition=\"end\"\n                            disabled={balanceGratherThanZero === '0.0' || balanceGratherThanZero === '0'}\n                            onClick={() => setApproval()} >\n                            {loading ? <Spinner color={'black'} /> : \"Approve Burn XEN\"}\n                        </LoadingButton>\n                }\n            </div>\n        </>\n    )\n}\n","export default function formatAccountName(account: string)\n{   \n    return `${account.substring(0, 5)}...${account.substring(account.length - 4)}`\n}","import React, { useState, useEffect, useContext, useDebugValue } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport Box from '@mui/material/Box';\nimport Drawer from '@mui/material/Drawer';\nimport { injected } from '../../connectors';\nimport XENCrypto from '../../ethereum/XENCrypto';\nimport DBXen from \"../../ethereum/dbxen\"\nimport { ethers } from \"ethers\";\nimport \"../../componentsStyling/permanentDrawer.scss\";\nimport ScreenSize from '../Common/ScreenSize';\nimport SnackbarNotification from './Snackbar';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport { Spinner } from './Spinner';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter, faGithub, faTelegram } from \"@fortawesome/free-brands-svg-icons\";\nimport document from \"../../photos/icons/file-icon.svg\";\nimport axios, { Method } from 'axios';\nimport web3 from 'web3';\nimport { Burn } from './Burn';\nimport formatAccountName from '../Common/AccountName';\n\ndeclare global {\n    interface Window {\n        ethereum: any;\n    }\n}\n\nexport function PermanentDrawer(props: any): any {\n    const context = useWeb3React()\n    const { connector } = context\n    const [activatingConnector, setActivatingConnector] = useState<any>()\n    const dimensions = ScreenSize();\n    const [notificationState, setNotificationState] = useState({});\n    const [networkName, setNetworkName] = useState<any>();\n\n    useEffect(() => {\n        injected.supportedChainIds?.forEach(chainId =>\n            setNetworkName((ethers.providers.getNetwork(chainId).name)));\n        if (activatingConnector && activatingConnector === connector) {\n            setActivatingConnector(undefined)\n        }\n    }, [activatingConnector, connector])\n\n    useEffect(() => {\n        setTimeout(() => { setNotificationState({}) }, 2000)\n    }, [notificationState])\n    return (\n        <>\n            <SnackbarNotification state={notificationState}\n                setNotificationState={setNotificationState} />\n            {dimensions.width > 768 ?\n                <Box className=\"side-menu-box\" sx={{ display: 'flex' }}>\n                    <Drawer variant=\"permanent\"\n                        anchor='left'\n                        className=\"side-menu\">\n                        <div className=\"image-container\">\n                            <div className=\"img\"></div>\n                        </div>\n                        <Burn />\n                        <div className=\"content\">\n                            <div className=\"social-media\">\n                                <a href=\"https://twitter.com/DBXen_crypto\" target=\"_blank\" className=\"logo-text-color\">\n                                    <FontAwesomeIcon icon={faTwitter} size=\"xl\" />\n                                </a>\n                                <a href=\"https://dbxen.gitbook.io/dbxen-litepaper/\" target=\"_blank\" className=\"logo-text-color\">\n                                    <img src={document} />\n                                </a>\n                                <a href=\"https://github.com/deb0x/dbXenBurnerProject\" target=\"_blank\" className=\"logo-text-color\">\n                                    <FontAwesomeIcon icon={faGithub} size=\"xl\" />\n                                </a>\n                                <a href=\"https://t.me/+_Q3prZI35gJkZmI0\" target=\"_blank\" className=\"logo-text-color\">\n                                    <FontAwesomeIcon icon={faTelegram} size=\"xl\" />\n                                </a>\n                            </div>\n                            <div className=\"contracts\">\n                                <div className=\"row\">\n                                    <span className=\"col-6\">DBXen: </span>\n                                    <a className=\"col-6\" target=\"_blank\"\n                                        href=\"https://polygonscan.com/address/0x4F3ce26D9749C0f36012C9AbB41BF9938476c462\">\n                                        {formatAccountName(\"0x4F3ce26D9749C0f36012C9AbB41BF9938476c462\")}\n                                    </a>\n                                </div>\n                                <div className=\"row\">\n                                    <span className=\"col-6\">DBXenERC20: </span>\n                                    <a className=\"col-6\" target=\"_blank\"\n                                        href=\"https://polygonscan.com/address/0x47DD60FA40A050c0677dE19921Eb4cc512947729\">\n                                        {formatAccountName(\"0x47DD60FA40A050c0677dE19921Eb4cc512947729\")}\n                                    </a>\n                                </div>\n                                <div className=\"row\">\n                                    <span className=\"col-6\">DBXenViews:</span>\n                                    <a className=\"col-6\" target=\"_blank\"\n                                        href=\"https://polygonscan.com/address/0xcf7582e5fac8a6674ccd96ce71d807808ca8ba6e\">\n                                        {formatAccountName(\"0xcf7582e5fac8a6674ccd96ce71d807808ca8ba6e\")}\n                                    </a>\n                                </div>\n                            </div>\n                        </div>\n                    </Drawer>\n                </Box> : <></>\n            }\n\n        </>\n    );\n}","import { ethers } from \"ethers\";\n\nconst { abi } = require(\"./DBXenViews.json\");\n\nexport default (signerOrProvider, address) => {\n    return new ethers.Contract(address, abi, signerOrProvider);\n}","import { ethers } from \"ethers\";\n\nconst { abi } = require(\"./DBXenERC20.json\");\n\nexport default (signerOrProvider, address) => {\n    return new ethers.Contract(address, abi, signerOrProvider);\n}\n","export default __webpack_public_path__ + \"static/media/coin-bag-solid--light.d9344235.svg\";","export default __webpack_public_path__ + \"static/media/token.0bd78e9a.svg\";","export default __webpack_public_path__ + \"static/media/coin-bag-solid--dark.b9b74873.svg\";","export default __webpack_public_path__ + \"static/media/wallet--light.60fbc32b.svg\";","export default __webpack_public_path__ + \"static/media/wallet--dark.307c5384.svg\";","export default __webpack_public_path__ + \"static/media/fees.50cb4df6.svg\";","export default __webpack_public_path__ + \"static/media/finance.d8ebf4c0.svg\";","const ethSigUtil = require('eth-sig-util');\n\nconst ethers = require('ethers')\n\nconst ethereumJsUtil = require('ethereumjs-util')\n\nconst GENERIC_PARAMS = 'address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data,uint256 validUntilTime'\nconst typeName = `ForwardRequest(${GENERIC_PARAMS})`\nconst typeHash = ethers.utils.id(typeName)\n\nconst EIP712Domain = [\n    { name: 'name', type: 'string' },\n    { name: 'version', type: 'string' },\n    { name: 'chainId', type: 'uint256' },\n    { name: 'verifyingContract', type: 'address' }\n];\n\nconst ForwardRequest = [\n    { name: 'from', type: 'address' },\n    { name: 'to', type: 'address' },\n    { name: 'value', type: 'uint256' },\n    { name: 'gas', type: 'uint256' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'data', type: 'bytes' },\n    { name: 'validUntilTime', type: 'uint256' }\n];\n\nfunction getMetaTxTypeData(chainId, verifyingContract) {\n    return {\n        types: {\n            EIP712Domain,\n            ForwardRequest,\n        },\n        domain: {\n            name: 'Forwarder',\n            version: '0.0.1',\n            chainId,\n            verifyingContract,\n        },\n        primaryType: 'ForwardRequest',\n    }\n};\n\nasync function signTypedData(signer, from, data) {\n    const [method, argData] = ['eth_signTypedData_v4', JSON.stringify(data)]\n    return await signer.send(method, [from, argData]);\n}\n\nasync function buildRequest(forwarder, input, valueParam) {\n    const value = valueParam ? valueParam : '0';\n    const nonce = await forwarder.getNonce(input.from).then(nonce => nonce.toString());\n    return { value, gas: '100000', nonce, validUntilTime: '0', ...input };\n}\n\nasync function buildTypedData(forwarder, request) {\n    const chainId = await forwarder.provider.getNetwork().then(n => n.chainId);\n    const typeData = getMetaTxTypeData(chainId, forwarder.address);\n    return {...typeData, message: request };\n}\n\nasync function getDomainSeparator(forwarder) {\n    const chainId = await forwarder.provider.getNetwork().then(n => n.chainId);\n    const typeData = getMetaTxTypeData(chainId, forwarder.address);\n    return ethereumJsUtil.bufferToHex(ethSigUtil.TypedDataUtils.hashStruct('EIP712Domain', typeData.domain, { EIP712Domain }, 'V4'))\n}\n\nexport async function signMetaTxRequest(signer, forwarder, input, value) {\n    const request = await buildRequest(forwarder, input, value);\n    const toSign = await buildTypedData(forwarder, request);\n    const signature = await signTypedData(signer, input.from, toSign);\n    const domainSeparator = await getDomainSeparator(forwarder)\n    return { typeHash, domainSeparator, signature, request };\n}","import { ethers } from 'ethers';\nimport { Forwarder as address } from '../deploy.json';\n\nconst { abi } = require(\"./Forwarder.json\");\n\nexport function createInstance(provider) {\n  return new ethers.Contract(address, abi, provider);\n}\n","import { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport {\n    Card, CardActions, CardContent, Button, Grid,\n    Typography, Box, OutlinedInput\n} from '@mui/material';\n\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport DBXen from \"../../ethereum/dbxen\"\nimport DBXenViews from \"../../ethereum/dbxenViews\";\nimport DBXenERC20 from \"../../ethereum/dbxenerc20\"\nimport SnackbarNotification from './Snackbar';\nimport { BigNumber, ethers } from \"ethers\";\nimport \"../../componentsStyling/stake.scss\";\nimport token from \"../../photos/icons/token.svg\"\nimport coinBagLight from \"../../photos/icons/coin-bag-solid--light.svg\";\nimport coinBagDark from \"../../photos/icons/coin-bag-solid--dark.svg\";\nimport walletLight from \"../../photos/icons/wallet--light.svg\";\nimport walletDark from \"../../photos/icons/wallet--dark.svg\";\nimport fees from \"../../photos/icons/fees.svg\";\nimport finance from \"../../photos/icons/finance.svg\";\nimport { signMetaTxRequest } from '../../ethereum/signer';\nimport { createInstance } from '../../ethereum/forwarder'\nimport dataFromWhitelist from '../../constants.json';\nimport useAnalyticsEventTracker from '../Common/GaEventTracker';\nimport Countdown, { zeroPad } from \"react-countdown\";\n\nconst { whitelist } = dataFromWhitelist;\nconst deb0xAddress = \"0x4F3ce26D9749C0f36012C9AbB41BF9938476c462\";\nconst deb0xViewsAddress = \"0xCF7582E5FaC8a6674CcD96ce71D807808Ca8ba6E\";\nconst deb0xERC20Address = \"0x47DD60FA40A050c0677dE19921Eb4cc512947729\";\n\nexport function Stake(props: any): any {\n\n    const { account, library } = useWeb3React()\n    const [notificationState, setNotificationState] = useState({})\n    const gaEventTracker = useAnalyticsEventTracker('Stake');\n    const [previousCycleXENBurned, setPreviousCycleXENBurned] = useState<any>();\n    const date: any = new Date(Date.UTC(2023, 2, 17, 14, 3, 19, 0));\n    const now: any = Date.now()\n    let endDate = date.getTime() - now;\n\n    const renderer = ({ hours, minutes, seconds, completed }: any) => {\n        if (completed) {\n            // Render a complete state\n            return;\n        } else {\n            // Render a countdown\n            return (\n                <span>\n                    ~ {zeroPad(hours)}:{zeroPad(minutes)}:{zeroPad(seconds)}\n                </span>\n            );\n        }\n    };\n\n    function FeesPanel() {\n        const [feesUnclaimed, setFeesUnclaimed] = useState(\"\")\n        const [loading, setLoading] = useState(false)\n\n        useEffect(() => {\n            feesAccrued()\n        }, [feesUnclaimed]);\n\n\n        useEffect(() => {\n            totalXenBurnedPreviousCycle();\n        }, []);\n\n        async function totalXenBurnedPreviousCycle() {\n            await getTotalXenBurnedInPreviusCycle().then((result: any) => {\n                setPreviousCycleXENBurned(result);\n            })\n        }\n\n        async function getTotalXenBurnedInPreviusCycle() {\n            const signer = await library.getSigner(0)\n            const deb0xContract = DBXen(signer, deb0xAddress)\n\n            await deb0xContract.getCurrentCycle().then(async (currentCycle: any) => {\n                if (currentCycle != 0) {\n                    await deb0xContract.cycleTotalBatchesBurned(currentCycle)\n                        .then((numberBatchesBurnedInCurrentCycle: any) => {\n                            return numberBatchesBurnedInCurrentCycle.toNumber() * 2500000;\n                        })\n                }\n            })\n            return 0;\n        }\n\n        async function feesAccrued() {\n            const deb0xViewsContract = DBXenViews(library, deb0xViewsAddress);\n\n            await deb0xViewsContract.getUnclaimedFees(account).then((result: any) => {\n                setFeesUnclaimed(ethers.utils.formatEther(result))\n            });\n        }\n\n        async function fetchClaimFeesResult(request: any, url: any) {\n            await fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(request),\n                headers: { 'Content-Type': 'application/json' },\n            })\n                .then((response) => response.json())\n                .then(async (data) => {\n                    try {\n                        const { tx: txReceipt } = JSON.parse(data.result)\n                        if (txReceipt.status == 1) {\n                            setNotificationState({\n                                message: \"You succesfully claimed your fees.\", open: true,\n                                severity: \"success\"\n                            })\n                        } else {\n                            setNotificationState({\n                                message: \"Fees couldn't be claimed!\", open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    } catch (error) {\n                        if (data.status == \"pending\") {\n                            setNotificationState({\n                                message: \"Your transaction is pending. Your fees should arrive shortly\",\n                                open: true,\n                                severity: \"info\"\n                            })\n                        } else if (data.status == \"error\") {\n                            setNotificationState({\n                                message: \"Transaction relayer error. Please try again\",\n                                open: true,\n                                severity: \"error\"\n                            })\n                        }\n                    }\n\n                })\n        }\n\n        async function sendClaimFeesTx(deb0xContract: any) {\n            try {\n                const tx = await deb0xContract.claimFees()\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"You succesfully claimed your fees.\", open: true,\n                            severity: \"success\"\n                        })\n                        //setLoading(false)\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: \"Fees couldn't be claimed!\", open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n            } catch (error: any) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Your fees haven't been claimed.\",\n                    open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function claimFees() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = DBXen(signer, deb0xAddress)\n\n            const from = signer.getAddress();\n            if (whitelist.includes(from)) {\n                const url = \"https://api.defender.openzeppelin.com/autotasks/b939da27-4a61-4464-8d7e-4b0c5dceb270/runs/webhook/f662ac31-8f56-4b4c-9526-35aea314af63/SPs6smVfv41kLtz4zivxr8\";\n                const forwarder = createInstance(library)\n                const data = deb0xContract.interface.encodeFunctionData(\"claimFees()\")\n                const to = deb0xContract.address\n\n                try {\n                    const request = await signMetaTxRequest(library, forwarder, { to, from, data });\n\n                    gaEventTracker(\"Success: Claim fees\");\n\n                    await fetchClaimFeesResult(request, url)\n\n                } catch (error: any) {\n                    setNotificationState({\n                        message: \"You rejected the transaction. Fees were not claimed.\",\n                        open: true,\n                        severity: \"info\"\n                    })\n\n                    gaEventTracker(\"Rejected: Claim fees\");\n                }\n            } else {\n                await sendClaimFeesTx(deb0xContract)\n            }\n        }\n\n        return (\n            <>\n                <Card variant=\"outlined\" className=\"card-container\">\n                    <CardContent className=\"row\">\n                        <div className=\"col-12 col-md-8 mb-2\">\n                            <Typography variant=\"h4\" component=\"div\" className=\"rewards mb-3\">\n                                Your protocol fee share\n                            </Typography>\n                            <Typography >\n                                Your unclaimed MATIC fees:&nbsp;\n                                <strong>\n                                    {Number(feesUnclaimed).toLocaleString('en-US', {\n                                        minimumFractionDigits: 2,\n                                        maximumFractionDigits: 2\n                                    })}\n                                </strong>\n                            </Typography>\n                            <p className='my-2 counter'>\n                                Get next fees in <Countdown date={Date.now() + endDate} renderer={renderer} />\n                            </p>\n                        </div>\n                        <div className='col-12 col-md-4 d-flex justify-content-end align-items-start'>\n                            <img src={fees} alt=\"trophyRewards\" className=\"p-3 medium-img\" />\n                        </div>\n                    </CardContent>\n                    <CardActions className='button-container px-3'>\n                        <LoadingButton\n                            className=\"collect-btn\"\n                            disabled={feesUnclaimed == \"0.0\"}\n                            loading={loading}\n                            variant=\"contained\"\n                            onClick={claimFees}>\n                            Collect\n                        </LoadingButton>\n                    </CardActions>\n                </Card>\n            </>\n        )\n    }\n\n    function CyclePanel() {\n        const [currentReward, setCurrentReward] = useState(\"\")\n        useEffect(() => {\n            cycleReward()\n        }, [currentReward]);\n\n        async function cycleReward() {\n            const deb0xContract = DBXen(library, deb0xAddress);\n            await deb0xContract.currentCycleReward().then((result: any) => {\n                setCurrentReward(ethers.utils.formatEther(result))\n            })\n        }\n        return (\n            <>\n                <Card variant=\"outlined\" className=\"card-container\">\n                    <CardContent className=\"row\">\n                        <div className=\"col-12 col-md-12 mb-2\">\n                            <Typography variant=\"h4\" component=\"div\" className=\"rewards mb-3\">\n                                Daily stats\n                            </Typography>\n                            <Typography className=\"data-height\">\n                                This cycle mints:&nbsp;\n                                <strong>\n                                    {Number(currentReward).toLocaleString('en-US', {\n                                        minimumFractionDigits: 2,\n                                        maximumFractionDigits: 2\n                                    })}\n                                </strong> DXN\n                            </Typography>\n                            {/* <Typography className=\"data-height\">\n                            Total XEN burned in previous cycle: <strong>{previousCycleXENBurned}</strong>\n                        </Typography> */}\n                        </div>\n                    </CardContent>\n                </Card>\n            </>\n        )\n    }\n\n    function RewardsPanel() {\n\n        const [rewardsUnclaimed, setRewardsUnclaimed] = useState(\"\")\n        const [feeSharePercentage, setFeeSharePercentage] = useState(\"\")\n        const [loading, setLoading] = useState(false)\n\n        useEffect(() => {\n            rewardsAccrued()\n        }, [rewardsUnclaimed]);\n\n        useEffect(() => {\n            feeShare()\n        }, [feeSharePercentage]);\n\n        async function rewardsAccrued() {\n            const deb0xViewsContract = DBXenViews(library, deb0xViewsAddress);\n\n            await deb0xViewsContract.getUnclaimedRewards(account).then((result: any) => {\n                setRewardsUnclaimed(ethers.utils.formatEther(result))\n            })\n        }\n\n        async function feeShare() {\n            const deb0xViewsContract = DBXenViews(library, deb0xViewsAddress);\n\n            const deb0xContract = DBXen(library, deb0xAddress);\n\n            const unclaimedRewards = await deb0xViewsContract.getUnclaimedRewards(account);\n\n            const accWithdrawableStake = await deb0xViewsContract.getAccWithdrawableStake(account);\n\n            let balance = parseFloat((ethers.utils.formatEther(unclaimedRewards.add(accWithdrawableStake))))\n\n            const currentCycle = await deb0xContract.currentStartedCycle();\n\n            const totalSupply = await deb0xContract.summedCycleStakes(currentCycle);\n\n            const feeShare = balance * 100 / totalSupply\n            setFeeSharePercentage(((Math.round(feeShare * 100) / 100).toFixed(2)).toString() + \"%\")\n        }\n\n        async function fetchClaimRewardsResult(request: any, url: any) {\n            await fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(request),\n                headers: { 'Content-Type': 'application/json' },\n            })\n                .then((response) => response.json())\n                .then(async (data) => {\n                    try {\n                        const { tx: txReceipt } = JSON.parse(data.result)\n                        if (txReceipt.status == 1) {\n                            setNotificationState({\n                                message: \"You succesfully claimed your rewards.\", open: true,\n                                severity: \"success\"\n                            })\n                        } else {\n                            setNotificationState({\n                                message: \"Rewards couldn't be claimed!\", open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    } catch (error) {\n                        if (data.status == \"pending\") {\n                            setNotificationState({\n                                message: \"Your transaction is pending. Your rewards should arrive shortly\",\n                                open: true,\n                                severity: \"info\"\n                            })\n                        } else if (data.status == \"error\") {\n                            setNotificationState({\n                                message: \"Transaction relayer error. Please try again\",\n                                open: true,\n                                severity: \"error\"\n                            })\n                        }\n                    }\n\n                })\n        }\n\n        async function sendClaimRewardsTx(deb0xContract: any) {\n            try {\n                const tx = await deb0xContract.claimRewards()\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"You succesfully claimed your rewards.\", open: true,\n                            severity: \"success\"\n                        })\n                        //setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: \"Rewards couldn't be claimed!\", open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n            } catch (error: any) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Your rewards haven't been claimed.\",\n                    open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function claimRewards() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = DBXen(signer, deb0xAddress)\n\n\n            const from = await signer.getAddress();\n            if (whitelist.includes(from)) {\n                const url = \"https://api.defender.openzeppelin.com/autotasks/b939da27-4a61-4464-8d7e-4b0c5dceb270/runs/webhook/f662ac31-8f56-4b4c-9526-35aea314af63/SPs6smVfv41kLtz4zivxr8\";\n                const forwarder = createInstance(library)\n                const data = deb0xContract.interface.encodeFunctionData(\"claimRewards()\")\n                const to = deb0xContract.address\n\n                try {\n                    const request = await signMetaTxRequest(library, forwarder, { to, from, data });\n\n                    gaEventTracker(\"Success: Claim rewards\");\n\n                    await fetchClaimRewardsResult(request, url)\n\n                } catch (error: any) {\n                    setNotificationState({\n                        message: \"You rejected the transaction. Rewards were not claimed.\",\n                        open: true,\n                        severity: \"info\"\n                    })\n\n                    gaEventTracker(\"Rejected: Claim rewards\");\n                }\n            } else {\n                await sendClaimRewardsTx(deb0xContract)\n            }\n        }\n\n        return (\n            <>\n                <Card variant=\"outlined\" className=\"card-container\">\n                    <CardContent className=\"row\">\n                        <div className=\"col-12 col-md-10 mb-2\">\n                            <Typography variant=\"h4\" component=\"div\" className=\"rewards mb-3\">\n                                Your rewards\n                            </Typography>\n                            <Typography >\n                                Your unclaimed DXN rewards:&nbsp;\n                                <strong>\n                                    {Number(rewardsUnclaimed).toLocaleString('en-US', {\n                                        minimumFractionDigits: 2,\n                                        maximumFractionDigits: 2\n                                    })}\n                                </strong>\n                            </Typography>\n                            <p className='my-2 counter'>\n                                Get next rewards in <Countdown date={Date.now() + endDate} renderer={renderer} />\n                            </p>\n                        </div>\n                        <div className='col-12 col-md-2 d-flex justify-content-end align-items-start'>\n                            <img src={finance} alt=\"trophyRewards\" className=\"p-3 medium-img\" />\n                        </div>\n                    </CardContent>\n                    <CardActions className='button-container px-3'>\n                        <LoadingButton className=\"collect-btn\" loading={loading} variant=\"contained\" onClick={claimRewards}>Claim</LoadingButton>\n                        <span className=\"text\">Unclaimed DXN is considered automatically staked. Only claim when you want to trade.</span>\n                    </CardActions>\n                </Card>\n            </>\n        )\n    }\n\n    function floorPrecised(number: any) {\n        var power = Math.pow(10, 2);\n        return (Math.floor(parseFloat(number) * power) / power).toString();\n    }\n\n    function StakeUnstake() {\n        const [alignment, setAlignment] = useState(\"stake\");\n\n        const [userStakedAmount, setUserStakedAmount] = useState(\"\")\n        const [userUnstakedAmount, setUserUnstakedAmount] = useState(\"\")\n        const [tokensForUnstake, setTokenForUnstake] = useState(\"\");\n        const [totalStaked, setTotalStaked] = useState(\"\")\n        const [amountToUnstake, setAmountToUnstake] = useState(\"\")\n        const [amountToStake, setAmountToStake] = useState(\"\")\n        const [loading, setLoading] = useState(false)\n        const [approved, setApproved] = useState<Boolean | null>(false)\n\n        const handleChange = (\n            event: React.MouseEvent<HTMLElement>,\n            newAlignment: string,\n        ) => {\n            setAlignment(newAlignment);\n            gaEventTracker(newAlignment + \" tab\");\n        };\n\n        const [theme, setTheme] = useState(localStorage.getItem('globalTheme'));\n        useEffect(() => {\n            setTheme(localStorage.getItem('globalTheme'));\n        });\n\n        useEffect(() => {\n            setStakedAmount()\n        }, [userStakedAmount]);\n\n        useEffect(() => {\n            totalAmountStaked()\n        }, [totalStaked]);\n\n\n        useEffect(() => {\n            setTokensForUntakedAmount()\n        }, []);\n\n        useEffect(() => {\n            setUnstakedAmount()\n        }, [userUnstakedAmount]);\n\n        useEffect(() => {\n            setApproval()\n        }, [approved]);\n\n        async function setStakedAmount() {\n            const deb0xContract = await DBXen(library, deb0xAddress)\n            const deb0xViewsContract = await DBXenViews(library, deb0xViewsAddress)\n            const balance = await deb0xViewsContract.getAccWithdrawableStake(account)\n            let firstStakeCycle = await deb0xContract.accFirstStake(account)\n            let secondStakeCycle = await deb0xContract.accSecondStake(account)\n            let firstStakeCycleAmount = await deb0xContract.accStakeCycle(account, firstStakeCycle);\n            let secondStakeCycleAmount = await deb0xContract.accStakeCycle(account, secondStakeCycle);\n            let withdawbleStake = await deb0xContract.accWithdrawableStake(account);\n            let totalStakedAmount = BigNumber.from(firstStakeCycleAmount).add(BigNumber.from(secondStakeCycleAmount)).add(BigNumber.from(withdawbleStake))\n            setUserStakedAmount(ethers.utils.formatEther(totalStakedAmount))\n        }\n\n        async function setTokensForUntakedAmount() {\n            const deb0xViewsContract =  DBXenViews(library, deb0xViewsAddress)\n            const balance = await deb0xViewsContract.getAccWithdrawableStake(account).then((balance:any) =>{\n                setTokenForUnstake(ethers.utils.formatEther(balance.toString()));\n            })\n        }\n\n        async function setUnstakedAmount() {\n            const deb0xERC20Contract = await DBXenERC20(library, deb0xERC20Address)\n            const balance = await deb0xERC20Contract.balanceOf(account).then((balance:any) =>{\n                let number = ethers.utils.formatEther(balance);\n                setUserUnstakedAmount(parseFloat(number.slice(0, (number.indexOf(\".\")) + 3)).toString())\n            })\n        }\n\n        async function setApproval() {\n            const deb0xERC20Contract = DBXenERC20(library, deb0xERC20Address)\n\n            await deb0xERC20Contract.allowance(account, deb0xAddress).then((allowance:any) =>\n                 allowance > 0 ? setApproved(true) : setApproved(false)\n            )\n        }\n\n        async function totalAmountStaked() {\n\n            const deb0xContract = DBXen(library, deb0xAddress)\n\n           await deb0xContract.currentStartedCycle().then(async (currentCycle:any) =>{\n                await deb0xContract.summedCycleStakes(currentCycle).then((totalSupply:any) => {\n                    setTotalStaked(ethers.utils.formatEther(totalSupply))\n                })\n            })\n\n        }\n\n        async function approveStaking() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n            const deb0xERC20Contract = DBXenERC20(signer, deb0xERC20Address)\n\n            try {\n                const tx = await deb0xERC20Contract.approve(deb0xAddress, ethers.utils.parseEther(\"5010000\"))\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"Your succesfully approved contract for staking.\", open: true,\n                            severity: \"success\"\n                        })\n                        setLoading(false)\n\n                        gaEventTracker(\"Success: Approve staking\");\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: \"Contract couldn't be approved for staking!\", open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                        gaEventTracker(\"Error: Approve staking\");\n                    })\n            } catch (error) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Contract hasn't been approved for staking.\", open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n                gaEventTracker(\"Rejected: Approve staking\");\n            }\n        }\n\n        async function fetchUnstakeResult(request: any, url: any) {\n            await fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(request),\n                headers: { 'Content-Type': 'application/json' },\n            })\n                .then((response) => response.json())\n                .then(async (data) => {\n                    try {\n                        const { tx: txReceipt } = JSON.parse(data.result)\n                        if (txReceipt.status == 1) {\n                            setNotificationState({\n                                message: \"Your tokens were succesfully unstaked.\", open: true,\n                                severity: \"success\"\n                            })\n                            setLoading(false)\n                        } else {\n                            setNotificationState({\n                                message: \"Your tokens couldn't be unstaked!\", open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    } catch (error) {\n                        if (data.status == \"pending\") {\n                            setNotificationState({\n                                message: \"Your transaction is pending. Your DXN should be unstaked shortly\",\n                                open: true,\n                                severity: \"info\"\n                            })\n                        } else if (data.status == \"error\") {\n                            setNotificationState({\n                                message: \"Transaction relayer error. Please try again\",\n                                open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    }\n\n                })\n        }\n\n        async function sendUnstakeTx(deb0xContract: any) {\n            try {\n                const tx = await deb0xContract.unstake(ethers.utils.parseEther(amountToUnstake.toString()))\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"Your tokens were succesfully unstaked.\", open: true,\n                            severity: \"success\"\n                        })\n                        setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setLoading(false)\n                        setNotificationState({\n                            message: \"Your tokens couldn't be unstaked!\", open: true,\n                            severity: \"error\"\n                        })\n\n                    })\n            } catch (error) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Your tokens haven't been unstaked.\",\n                    open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function unstake() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = DBXen(signer, deb0xAddress)\n\n            const from = await signer.getAddress();\n            if (whitelist.includes(from)) {\n                const url = \"https://api.defender.openzeppelin.com/autotasks/b939da27-4a61-4464-8d7e-4b0c5dceb270/runs/webhook/f662ac31-8f56-4b4c-9526-35aea314af63/SPs6smVfv41kLtz4zivxr8\";\n                const forwarder = createInstance(library)\n                const data = deb0xContract.interface.encodeFunctionData(\"unstake\",\n                    [ethers.utils.parseEther(amountToUnstake.toString())])\n                const to = deb0xContract.address\n                try {\n                    const request = await signMetaTxRequest(library, forwarder, { to, from, data });\n\n                    gaEventTracker(\"Success: Unstake\");\n\n                    await fetchUnstakeResult(request, url)\n\n                } catch (error: any) {\n                    setNotificationState({\n                        message: \"You rejected the transaction. DXN were not unstaked.\",\n                        open: true,\n                        severity: \"info\"\n                    })\n                    setLoading(false)\n\n                    gaEventTracker(\"Rejected: Unstake\");\n                }\n            } else {\n                await sendUnstakeTx(deb0xContract)\n            }\n        }\n\n        async function fetchStakeResult(request: any, url: any) {\n            await fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(request),\n                headers: { 'Content-Type': 'application/json' },\n            })\n                .then((response) => response.json())\n                .then(async (data) => {\n                    try {\n                        const { tx: txReceipt } = JSON.parse(data.result)\n                        if (txReceipt.status == 1) {\n                            setNotificationState({\n                                message: \"You succesfully staked your DXN.\", open: true,\n                                severity: \"success\"\n                            })\n                        } else {\n                            setNotificationState({\n                                message: \"DXN couldn't be claimed!\", open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    } catch (error) {\n                        if (data.status == \"pending\") {\n                            setNotificationState({\n                                message: \"Your transaction is pending. Your DXN should be staked shortly\",\n                                open: true,\n                                severity: \"info\"\n                            })\n                        } else if (data.status == \"error\") {\n                            setNotificationState({\n                                message: \"Transaction relayer error. Please try again\",\n                                open: true,\n                                severity: \"error\"\n                            })\n                            setLoading(false)\n                        }\n                    }\n\n                })\n        }\n\n        async function sendStakeTx(deb0xContract: any) {\n            try {\n                const tx = await deb0xContract.stake(ethers.utils.parseEther(amountToStake.toString()))\n\n                tx.wait()\n                    .then((result: any) => {\n                        setNotificationState({\n                            message: \"Your tokens were succesfully staked.\", open: true,\n                            severity: \"success\"\n                        })\n                        //\n                        let tokensInWallet = Number(userUnstakedAmount) - Number(amountToStake);\n                        setUserUnstakedAmount(tokensInWallet.toString())\n                        //setLoading(false)\n\n                    })\n                    .catch((error: any) => {\n                        setNotificationState({\n                            message: \"Your tokens couldn't be staked!\", open: true,\n                            severity: \"error\"\n                        })\n                        setLoading(false)\n                    })\n            } catch (error) {\n                setNotificationState({\n                    message: \"You rejected the transaction. Your tokens haven't been staked.\",\n                    open: true,\n                    severity: \"info\"\n                })\n                setLoading(false)\n            }\n        }\n\n        async function stake() {\n            setLoading(true)\n\n            const signer = await library.getSigner(0)\n\n            const deb0xContract = DBXen(signer, deb0xAddress)\n\n            const from = await signer.getAddress();\n            if (whitelist.includes(from)) {\n                const url = \"https://api.defender.openzeppelin.com/autotasks/b939da27-4a61-4464-8d7e-4b0c5dceb270/runs/webhook/f662ac31-8f56-4b4c-9526-35aea314af63/SPs6smVfv41kLtz4zivxr8\";\n                const forwarder = createInstance(library)\n                const data = deb0xContract.interface.encodeFunctionData(\"stake\",\n                    [ethers.utils.parseEther(amountToStake.toString())])\n                const to = deb0xContract.address\n\n                try {\n                    const request = await signMetaTxRequest(library, forwarder, { to, from, data });\n\n                    gaEventTracker(\"Success: Stake\");\n\n                    await fetchStakeResult(request, url)\n\n                } catch (error: any) {\n                    setNotificationState({\n                        message: \"You rejected the transaction. DXN were not staked.\",\n                        open: true,\n                        severity: \"info\"\n                    })\n                    setLoading(false)\n                    gaEventTracker(\"Rejected: Stake\");\n                }\n            } else {\n                await sendStakeTx(deb0xContract)\n            }\n        }\n\n        return (\n            <Card variant=\"outlined\" className=\"card-container\">\n                <ToggleButtonGroup\n                    color=\"primary\"\n                    value={alignment}\n                    exclusive\n                    onChange={handleChange}\n                    className=\"tab-container\"\n                >\n                    <ToggleButton className=\"tab-btn\" value=\"stake\">Stake</ToggleButton>\n                    <ToggleButton className=\"tab-btn\" value=\"unstake\" >Unstake</ToggleButton>\n\n                </ToggleButtonGroup>\n\n                {\n                    alignment === \"stake\" ?\n\n                        <>\n                            <CardContent className=\"row\">\n                                <div className=\"col-6 px-3\">\n                                    <img className=\"display-element\" src={theme === \"classic\" ? coinBagDark : coinBagLight} alt=\"coinbag\" />\n                                    <Typography className=\"p-0\">\n                                        Your staked amount:\n                                    </Typography>\n                                    <Typography variant=\"h6\" className=\"p-0 data-height\">\n                                        <strong>\n                                            {Number(userStakedAmount).toLocaleString('en-US', {\n                                                minimumFractionDigits: 2,\n                                                maximumFractionDigits: 2\n                                            })} DXN</strong>\n                                    </Typography>\n                                </div>\n                                <div className=\"col-6 px-3\">\n                                    <img className=\"display-element\" src={theme === \"classic\" ? walletDark : walletLight} alt=\"coinbag\" />\n                                    <Typography className=\"p-0\">\n                                        Available DXN in your wallet:\n                                    </Typography>\n                                    <Typography variant=\"h6\" className=\"p-0\" data-height>\n                                        <strong>\n                                            {Number(userUnstakedAmount).toLocaleString('en-US', {\n                                                minimumFractionDigits: 2,\n                                                maximumFractionDigits: 2\n                                            })} DXN</strong>\n                                    </Typography>\n                                </div>\n                                {approved && <Grid className=\"amount-row px-3\" container>\n                                    <Grid item>\n                                        <OutlinedInput id=\"outlined-basic\"\n                                            placeholder=\"Amount to stake\"\n                                            type=\"number\"\n                                            value={amountToStake}\n                                            inputProps={{ min: 0 }}\n                                            onChange={e => setAmountToStake(e.target.value)} />\n                                    </Grid>\n                                    <Grid className=\"max-btn-container\" item>\n                                        <Button className=\"max-btn\"\n                                            size=\"small\" variant=\"contained\" color=\"error\"\n                                            onClick={() => setAmountToStake(userUnstakedAmount)}>\n                                            max\n                                        </Button>\n                                    </Grid>\n                                </Grid>}\n                            </CardContent>\n                            <CardActions className='button-container px-3'>\n                                {approved && <LoadingButton disabled={!amountToStake} className=\"collect-btn\" loading={loading} variant=\"contained\" onClick={stake}>Stake</LoadingButton>}\n                                {!approved &&\n                                    <>\n                                        <LoadingButton\n                                            className=\"collect-btn\"\n                                            loading={loading}\n                                            variant=\"contained\"\n                                            disabled={userUnstakedAmount === '0.00' || userUnstakedAmount === '0'}\n                                            onClick={approveStaking}>\n                                            Initialize Staking\n                                        </LoadingButton>\n                                        <span className=\"text\">\n                                            Make sure you have DXN tokens in your wallet before you can stake them.\n                                        </span>\n                                    </>\n                                }\n                            </CardActions>\n                        </>\n                        :\n\n                        <>\n                            <CardContent className=\"row\">\n                                <div className=\"col-6 px-3\">\n                                    <img className=\"display-element\" src={theme === \"classic\" ? coinBagDark : coinBagLight} alt=\"coinbag\" />\n                                    <Typography className=\"p-0\">\n                                        Available to unstake:\n                                    </Typography>\n                                    <Typography variant=\"h6\" className=\"p-0\">\n                                        <strong>{Number(tokensForUnstake).toLocaleString('en-US', {\n                                            minimumFractionDigits: 2,\n                                            maximumFractionDigits: 2\n                                        })} DXN</strong>\n                                    </Typography>\n                                </div>\n                                {/* <div className=\"col-6 px-3\">\n                        <img className=\"display-element\" src={theme === \"classic\" ? walletDark : walletLight} alt=\"coinbag\" />\n                        <Typography className=\"p-0\">\n                            Your actual stake:\n                        </Typography>\n                        <Typography variant=\"h6\" className=\"p-0 data-height\">\n                            <strong>{userStakedAmount} DXN</strong>\n                        </Typography>\n                    </div> */}\n\n\n                                <Grid className=\"amount-row px-3\" container>\n                                    <Grid item>\n                                        <OutlinedInput value={amountToUnstake}\n                                            id=\"outlined-basic\"\n                                            className=\"max-field\"\n                                            placeholder=\"Amount to unstake\"\n                                            onChange={e => setAmountToUnstake(e.target.value)}\n                                            inputProps={{ min: 0 }}\n                                            type=\"number\" />\n                                    </Grid>\n                                    <Grid className=\"max-btn-container\" item>\n                                        <Button className=\"max-btn\"\n                                            size=\"small\" variant=\"contained\" color=\"error\"\n                                            onClick={() => setAmountToUnstake(tokensForUnstake)}>\n                                            max\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </CardContent>\n                            <CardActions className='button-container px-3'>\n                                <LoadingButton className=\"collect-btn\" disabled={!amountToUnstake} loading={loading} variant=\"contained\" onClick={unstake}>Unstake</LoadingButton>\n                            </CardActions>\n                        </>\n                }\n\n            </Card>\n\n        )\n    }\n\n    function TotalStaked() {\n        const [totalStaked, setTotalStaked] = useState(\"\")\n        useEffect(() => {\n            totalAmountStaked()\n        }, [totalStaked]);\n\n        async function totalAmountStaked() {\n\n            const deb0xContract = DBXen(library, deb0xAddress)\n\n            const currentCycle = await deb0xContract.currentStartedCycle()\n\n            const currentStake = await deb0xContract.summedCycleStakes(currentCycle)\n\n            const pendingStakeWithdrawal = await deb0xContract.pendingStakeWithdrawal()\n            \n            // setTotalStaked(ethers.utils.formatEther(currentStake))\n\n            setTotalStaked(floorPrecised(ethers.utils.formatEther(currentStake.sub(pendingStakeWithdrawal))))\n\n        }\n\n        return (\n            <Card className=\"heading-card\">\n                <CardContent>\n                    <Typography variant=\"h5\">\n                        Total tokens staked:\n                    </Typography>\n                    <Typography variant=\"h4\">\n                        <img className=\"logo\" src={token} />\n                        {totalStaked} DXN\n                    </Typography>\n                </CardContent>\n            </Card>\n        )\n    }\n\n    return (\n        <>\n            <SnackbarNotification state={notificationState} setNotificationState={setNotificationState} />\n            <Box className=\"content-box stake-content\">\n                <div className=\"cards-grid\">\n                    <div className='row'>\n                        <Grid item className=\"col col-12 col-md-6 \">\n                            <FeesPanel />\n                        </Grid>\n                        <Grid item className=\"col col-12 col-md-6\">\n                            <CyclePanel />\n                        </Grid>\n                    </div>\n                    <div className='row'>\n                        <Grid item className=\"col col-12 col-md-6 \">\n                            <RewardsPanel />\n                        </Grid>\n                        <Grid item className=\"col col-12 col-md-6\">\n                            <StakeUnstake />\n                        </Grid>\n                    </div>\n                </div>\n            </Box>\n        </>\n    )\n}","import ReactGA from \"react-ga\";\n\nexport default function useAnalyticsEventTracker(category: string) {\n    const eventTracker = (action: string) => {\n      ReactGA.event({category, action});\n    }\n    return eventTracker;\n}","import { createContext } from \"react\";\n\nexport const initialThemeState = {\n  theme: \"dark\",\n  setTheme: (_value: string) => {}\n};\n\nconst ThemeContext = createContext(initialThemeState);\nexport default ThemeContext;","import { useEffect, useState } from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport { injected } from '../../connectors';\nimport { useWeb3React } from '@web3-react/core';\nimport { Spinner } from './Spinner';\nimport { ethers } from 'ethers';\nimport formatAccountName from '../Common/AccountName';\nimport DBXen from \"../../ethereum/dbxen\"\nimport DBXenViews from \"../../ethereum/dbxenViews\";\nimport DBXenERC20 from \"../../ethereum/dbxenerc20\"\nimport Popper from '@mui/material/Popper';\nimport ClickAwayListener from '@mui/base/ClickAwayListener';\nimport '../../componentsStyling/appBar.scss';\nimport copyIcon from '../../photos/icons/copy-1.svg';\nimport walletIcon from '../../photos/icons/wallet.svg';\nimport disconnectIcon from '../../photos/icons/diconnect.svg';\nimport logo from \"../../photos/white_dbxen.svg\";\n\nconst deb0xAddress = \"0x4F3ce26D9749C0f36012C9AbB41BF9938476c462\";\nconst deb0xViewsAddress = \"0xCF7582E5FaC8a6674CcD96ce71D807808Ca8ba6E\";\nconst deb0xERC20Address = \"0x47DD60FA40A050c0677dE19921Eb4cc512947729\"\nconst tokenSymbol = 'DBXen';\n\nconst tokenDecimals = 18;\nenum ConnectorNames { Injected = 'Injected' };\n\nconst connectorsByName: { [connectorName in ConnectorNames]: any } = {\n    [ConnectorNames.Injected]: injected\n}\n\nexport function AppBarComponent(props: any): any {\n    const context = useWeb3React();\n    const { connector, library, chainId, account, activate, deactivate } = context\n    const [activatingConnector, setActivatingConnector] = useState<any>();\n    const [networkName, setNetworkName] = useState<any>();\n    const [userUnstakedAmount,setUserUnstakedAmount] = useState<any>(0);\n    const [ensName, setEnsName] = useState<any>(\"\");\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const [, setNotificationState] = useState({})\n    const [theme, setTheme] = useState(localStorage.getItem('globalTheme'));\n    const [userStakedAmount, setUserStakedAmount] = useState(\"\")\n    const [rewardsUnclaimed, setRewardsUnclaimed] = useState(\"\")\n    const [open, setOpen] = useState<any>();\n    const deb0xViewsContract = DBXenViews(library, deb0xViewsAddress)\n    const [totalStaked, setTotalStaked] = useState(\"\")\n    const [totalXENBurned, setTotalXENBurned] = useState<any>();\n\n    const id = open ? 'simple-popper' : undefined;\n\n    if(library){\n        checkENS();\n        setUnstakedAmount();\n    }\n\n    useEffect(() => {\n        totalAmountStaked()\n    }, [totalAmountStaked]);\n\n    useEffect(() => {\n        setTheme(localStorage.getItem('globalTheme'));\n    }, []);\n\n    useEffect(() => {\n        injected.supportedChainIds?.forEach(chainId => \n            setNetworkName((ethers.providers.getNetwork(chainId).name)));\n        if (activatingConnector && activatingConnector === connector) {\n            setActivatingConnector(undefined)\n        }\n    }, [activatingConnector, connector]);\n\n    useEffect(() => {\n        xenBurned();\n    },[]);\n\n    const xenBurned = async () => {\n        await getTotalXenBurned().then((result: any) => {\n            setTotalXENBurned(result.toLocaleString('en-US'));\n        })\n    }\n\n    async function getTotalXenBurned(){\n        const signer = await library.getSigner(0)\n        const deb0xContract = DBXen(signer, deb0xAddress)\n        let numberBatchesBurnedInCurrentCycle = await deb0xContract.totalNumberOfBatchesBurned();\n        let batchBurned =numberBatchesBurnedInCurrentCycle.toNumber();\n        return batchBurned * 2500000;\n    }\n\n    async function setUnstakedAmount() {\n        const deb0xERC20Contract = DBXenERC20(library, deb0xERC20Address)\n        if(account){\n            await deb0xERC20Contract.balanceOf(account).then((result: any) => \n                setUserUnstakedAmount(floorPrecised(ethers.utils.formatEther(result)))\n            )\n        }\n    }\n\n    useEffect(() => {\n        const deb0xERC20Contract = DBXenERC20(library, deb0xERC20Address)\n        const filterFrom = deb0xERC20Contract.filters.Transfer(account)\n        const filterTo =  deb0xERC20Contract.filters.Transfer(null, account)\n        deb0xERC20Contract.on(filterFrom, () => {\n            setUnstakedAmount()\n        })\n        deb0xERC20Contract.on(filterTo, () => {\n            setUnstakedAmount()\n        })\n\n        return () => {\n            deb0xERC20Contract.removeAllListeners()\n        }\n    },[])\n\n    async function checkENS(){\n        if(chainId !== 137){\n            var name = await library.lookupAddress(account);\n            if(name !== null)\n            {   \n                setEnsName(name);\n            }\n        }\n       \n    }\n\n    function floorPrecised(number:any) {\n        var power = Math.pow(10, 2);\n        return (Math.floor(parseFloat(number) * power) / power).toString();\n    }\n\n    async function totalAmountStaked() {\n        const deb0xContract = DBXen(library, deb0xAddress)\n        const currentCycle= await deb0xContract.currentStartedCycle()\n        const currentStake = await deb0xContract.summedCycleStakes(currentCycle)\n        const pendingStakeWithdrawal = await deb0xContract.pendingStakeWithdrawal()\n        setTotalStaked(floorPrecised(ethers.utils.formatEther(currentStake.sub(pendingStakeWithdrawal))))\n    }\n\n    async function addToken() {\n        try {\n            const wasAdded = await window.ethereum.request({\n              method: 'wallet_watchAsset',\n              params: {\n                type: 'ERC20',\n                options: {\n                  address: deb0xERC20Address,\n                  symbol: tokenSymbol,\n                  decimals: tokenDecimals,\n                //   image: tokenImage,\n                },\n              },\n            });\n\n            if (wasAdded) {\n                setNotificationState({\n                    message: \"The token was added in your wallet\",\n                    open: true,\n                    severity: \"success\"\n                })      \n                setOpen(false)      \n            }\n            } catch (error: any) {\n                setNotificationState({\n                    message: \"There was an error. Try again later\",\n                    open: true,\n                    severity: \"info\"\n                })\n            }\n    }\n\n    function copyWalletID() {\n        if(account) {\n            navigator.clipboard.writeText(account)\n            setNotificationState({\n                message: \"The address ID was copied successfully\",\n                open: true,\n                severity: \"success\"\n            })\n        }\n        setOpen(false)\n        \n    }\n\n    async function rewardsAccrued() {\n        await deb0xViewsContract.getUnclaimedRewards(account).then((result: any) => \n            setRewardsUnclaimed(floorPrecised(ethers.utils.formatEther(result)))\n        )\n    }\n\n    async function setStakedAmount() {\n        await deb0xViewsContract.getAccWithdrawableStake(account).then((result: any) => \n            setUserStakedAmount(floorPrecised(ethers.utils.formatEther(result)))\n        )\n    }\n\n    const handleClick = (event: any) => {\n        rewardsAccrued();\n        setStakedAmount();\n        setUnstakedAmount();\n        const { currentTarget } = event;\n        setAnchorEl(currentTarget)\n        setOpen(!open)\n      };\n\n    const handleClickAway = () => {\n        setOpen(false)\n    };\n    \n    return (\n        <ClickAwayListener onClickAway={handleClickAway}>\n            <div>\n                <div className=\"app-bar--top\">\n                    <img className=\"logo\" src={logo} alt=\"logo\" />\n                    <Box className=\"main-menu--left\">\n                        <p className=\"mb-0\">Total tokens staked:&nbsp; \n                            {Number(totalStaked).toLocaleString('en-US', {\n                                minimumFractionDigits: 2,\n                                maximumFractionDigits: 2\n                            })} DXN</p>\n                        <p className=\"mb-0\">\n                            Total XEN burned: {totalXENBurned}\n                        </p>\n                    </Box>\n                    <Box className=\"main-menu--right\">\n                    \n                    { (() =>  {\n                        const currentConnector = connectorsByName[ConnectorNames.Injected]\n                        const activating = currentConnector === activatingConnector\n                        const connected = currentConnector === connector\n\n                        return (\n                            <Button variant=\"contained\"\n                                key={ConnectorNames.Injected}\n                                aria-describedby={id}\n                                onClick={!connected ? \n                                    () => {\n                                        setActivatingConnector(currentConnector)\n                                        activate(currentConnector)\n                                    } : \n                                    handleClick\n                                }>\n                                \n                                { activating ? \n                                    <Spinner color={'black'} /> :\n                                    !connected ? \n                                        \"Connect Wallet\" :\n                                        <span>\n                                            {account === undefined ? \n                                                `Unsupported Network. Switch to ${networkName}` : \n                                                account ? \n                                                    ensName === \"\" ? \n                                                        `${formatAccountName(account)}` :\n                                                        `${ensName.toLowerCase()} \n                                                        (${formatAccountName(account)})`\n                                                : ''}\n                                        </span>\n                                }\n                            </Button>\n                        )\n                    }) ()}\n                    </Box>\n                </div>\n                <Popper className={`popper ${theme === \"classic\" ? \"classic\" : \"dark\"}` } id={id} open={open} anchorEl={anchorEl}>\n                    <ul>\n                        <li>\n                            Unclaimed rewards: <br/> \n                            {Number(rewardsUnclaimed).toLocaleString('en-US', {\n                                minimumFractionDigits: 2,\n                                maximumFractionDigits: 2\n                            })} \n                            <span>DXN</span>\n                        </li>\n                        <li>\n                            Active stake: <br/>\n                            {Number(userStakedAmount).toLocaleString('en-US', {\n                                minimumFractionDigits: 2,\n                                maximumFractionDigits: 2\n                            })} \n                            <span>DXN</span>\n                        </li>\n                        <li>\n                            In wallet: <br/> \n                            {Number(userUnstakedAmount).toLocaleString('en-US', {\n                                minimumFractionDigits: 2,\n                                maximumFractionDigits: 2\n                            })} \n                            <span>DXN</span>\n                        </li>\n                    </ul>\n                    <Button \n                        onClick={(event: any) => {\n                            copyWalletID()\n                        }}\n                        className=\"copy-wallet-btn\">\n                        <span><img src={copyIcon} alt=\"copy\" /></span>Copy wallet ID\n                    </Button>\n                    <Button\n                        onClick={(event: any) => {\n                            addToken()\n                        }}\n                        className=\"add-token-btn\">\n                         <span><img src={walletIcon} alt=\"wallet\"/></span>Add token to wallet\n                    </Button>\n                    <Button \n                        onClick={(event: any) => {\n                            handleClick(event)\n                            deactivate()\n                        }}\n                            className=\"logout-btn\">\n                             <span><img src={disconnectIcon} alt=\"disconnect\"/></span>Disconnect wallet\n                    </Button>  \n\n                </Popper>\n            </div>\n        </ClickAwayListener>\n    );\n}\n","import { useState, useEffect } from \"react\";\nimport ThemeContext, { initialThemeState } from \"./ThemeContext\";\n\ntype Props = {\n    children: JSX.Element|JSX.Element[],\n};\n\nconst ThemeProvider = ( { children }: Props ) => {\n  const [theme, setTheme] = useState<any>(initialThemeState.theme);\n\n  const localStorage = window.localStorage;\n\n  useEffect(() => {\n    const savedThemeLocal = localStorage.getItem(\"globalTheme\");\n\n    if (!!savedThemeLocal) {\n      setTheme(savedThemeLocal);\n    }\n  }, [localStorage]);\n\n  useEffect(() => {\n    localStorage.setItem(\"globalTheme\", theme);\n  }, [theme, localStorage]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      <div className={`theme theme--${theme}`}>{children}</div>\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider;\n","export default __webpack_public_path__ + \"static/media/elephant.605d60c2.svg\";","export default __webpack_public_path__ + \"static/media/white_dbxen.8b09777a.svg\";","export default __webpack_public_path__ + \"static/media/elephant.b785cc48.png\";","export default __webpack_public_path__ + \"static/media/empty.efc45323.png\";","export default __webpack_public_path__ + \"static/media/copy-1.6be37e8f.svg\";","export default __webpack_public_path__ + \"static/media/wallet.0d69376a.svg\";","export default __webpack_public_path__ + \"static/media/diconnect.a287fc1c.svg\";","import { useState, useEffect } from 'react';\nimport './App.css';\nimport { \n    Web3ReactProvider,\n    useWeb3React\n} from '@web3-react/core';\nimport { ethers } from \"ethers\";\nimport { useEagerConnect, useInactiveListener } from './hooks'\nimport { PermanentDrawer } from './components/App/PermanentDrawer'\nimport { Stake } from './components/App/Stake';\nimport { Box, Button } from '@mui/material';\nimport ThemeProvider from './components/Contexts/ThemeProvider';\nimport './index.scss';\nimport { injected, network } from './connectors';\nimport elephant from './photos/icons/elephant.svg';\nimport elephantWithText from './photos/icons/elephant.png';\nimport deb0xen from './photos/white_dbxen.svg';\nimport maintenanceImg from './photos/empty.png';\nimport { Spinner } from './components/App/Spinner';\nimport { AppBarComponent } from './components/App/AppBar';\nimport { Burn } from './components/App/Burn';\nimport ScreenSize from './components/Common/ScreenSize';\nimport Countdown, { zeroPad } from \"react-countdown\";\n\nconst maintenance = process.env.REACT_APP_MAINTENANCE_MODE;\n\n\nenum ConnectorNames { Injected = 'Injected', Network = 'Network' };\n\nconst connectorsByName: { [connectorName in ConnectorNames]: any } = {\n  [ConnectorNames.Injected]: injected,\n  [ConnectorNames.Network]: network\n}\n\nfunction getLibrary(provider: any): ethers.providers.Web3Provider {\n  const library = new ethers.providers.Web3Provider(provider)\n\n  library.pollingInterval = 12000\n  return library\n}\n\nexport default function web3App(): any {\n    const date:any = new Date(Date.UTC(2023, 2, 16, 13, 55, 0, 0));\n    const now: any = Date.now()\n    let endDate = date.getTime() - now\n\n  return (\n        <Web3ReactProvider getLibrary={getLibrary}>\n            {/* <Countdown date={Date.now() + endDate} renderer={renderer} /> */}\n            {/* <ContractsDeployed /> */}\n            <App />\n        </Web3ReactProvider>\n    )\n}\n\nconst renderer = ({ hours, minutes, seconds, completed }: any) => {\n    if (completed) {\n      // Render a complete state\n      return <ContractsDeployed />;\n    } else {\n      // Render a countdown\n      return (\n        <ThemeProvider>\n            <div className=\"app-container p-0 \">\n                <div className=\"initial-page contracts\">\n                    <div className=\"row\">\n                        <div className=\"col-12 img-container mr-4\">\n                            <p>DBXen time in:</p>\n                            <p>\n                                {zeroPad(hours)}:{zeroPad(minutes)}:{zeroPad(seconds)}\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ThemeProvider>\n      );\n    }\n};\n\nfunction ContractsDeployed() {\n    return (\n        <ThemeProvider>\n            <div className=\"app-container p-0 \">\n                <div className=\"initial-page contracts\">\n                    <div className=\"row\">\n                        <div className=\"col-12 img-container mr-4\">\n                            <img className=\"image--left\" src={elephantWithText} alt=\"elephant\" />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </ThemeProvider>\n    )\n}\n\nfunction App() {\n    const context = useWeb3React<ethers.providers.Web3Provider>()\n    const { connector, account, activate } = context\n    const [selectedIndex, setSelectedIndex] = useState<any>(0);\n    // handle logic to recognize the connector currently being activated\n    const [activatingConnector, setActivatingConnector] = useState<any>()\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const [networkName, setNetworkName] = useState<any>();\n    let errorMsg;\n    const dimensions = ScreenSize();\n    \n    useEffect(() => {\n        injected.supportedChainIds?.forEach(chainId => \n            setNetworkName((ethers.providers.getNetwork(chainId).name)));\n        if (activatingConnector && activatingConnector === connector) {\n            setActivatingConnector(undefined)\n        }\n    }, [activatingConnector, connector])\n\n    // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n    const triedEager = useEagerConnect()\n\n    // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n    useInactiveListener(!triedEager || !!activatingConnector)\n\n    function handleClick (event: React.MouseEvent<HTMLElement>) {\n        setAnchorEl(anchorEl ? null : event.currentTarget);\n    };\n\n    useEffect(() => {   \n        window.ethereum ?\n            window.ethereum.request({method: \"eth_requestAccounts\"}).then(() => {\n                switchNetwork();               \n            }).catch((err: any) => displayErrorMsg(err))\n            : displayErrorMsg(\"Please install MetaMask\")\n        }, [])\n\n    async function switchNetwork() {\n        try {\n            await window.ethereum.request({\n            method: 'wallet_switchEthereumChain',\n            params: [{ chainId: \"0x89\"}],\n            }).then(\n                displayErrorMsg(\"You have switched to the right network\")\n            );            \n        } catch (switchError) {\n            try {\n                await window.ethereum.request({\n                method: 'wallet_addEthereumChain',\n                params: [\n                    {\n                        chainId: '0x89', \n                        chainName:'Polygon Network',\n                        rpcUrls:['https://rpc-mainnet.maticvigil.com'],                   \n                        blockExplorerUrls:['https://polygonscan.com/'],  \n                        nativeCurrency: { \n                        symbol:'Matic',   \n                        decimals: 18\n                        }       \n                    }\n                    ]});\n            } catch (err) {\n                displayErrorMsg(\"Cannot switch to the network\");\n            }\n        }\n        \n    }\n\n    function displayErrorMsg(error: string) {\n        errorMsg = error;\n        return errorMsg;\n    }\n    \n    return (\n\n    <>\n    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        {!!errorMsg &&\n            <p className='alert alert-danger position-fixed' style={{ marginTop: '4rem', marginBottom: '0' }}>\n                {displayErrorMsg(errorMsg)}\n            </p>\n        }\n    </div>\n        <ThemeProvider>\n        { account ? \n            <div className=\"app-container container-fluid\">\n                { maintenance === \"true\" ?\n                    <div className=\"row main-row maintenance-mode\">\n                        <img className=\"maintenance-img\" src={maintenanceImg} alt=\"maintenance\" />\n                        <h1>Maintenance Mode</h1>\n                        <h4>We're tightening some nuts and bolts round the back. We'll be back up and running soon.</h4>\n                    </div> :\n                    <div className=\"row main-row\">\n                        <div className=\"col col-lg-3 col-12 p-0 side-menu-container\">\n                            <PermanentDrawer />\n                        </div>\n                        <div className=\"col col-lg-9 col-12\">\n                            <AppBarComponent />\n                            \n                            <Box className=\"main-container\" sx={{marginTop: 12}}>\n                            {dimensions.width > 768 ? \n                                <Stake /> :\n                                <>\n                                    {selectedIndex === 0 && <Burn /> }\n                                    {selectedIndex === 1 && <Stake /> }\n                                </>\n                            }\n                            </Box>\n                        </div>\n                    </div>\n                }\n                <div className=\"navigation-mobile\">\n                    <div className={`navigation-item ${selectedIndex === 0 ? \"active\" : \"\"}`}\n                        onClick={() => setSelectedIndex(0)}>\n                            Mint\n                    </div>\n                    <div className={`navigation-item ${selectedIndex === 1 ? \"active\" : \"\"}`}\n                        onClick={() => setSelectedIndex(1)}>\n                            Fees\n                    </div>\n                </div>\n            </div> :\n            <div className=\"app-container p-0 \">\n                <div className=\"initial-page\">\n                    <div className=\"row\">\n                        <div className=\"col-lg-7 img-container mr-4\">\n                            <img className=\"image--left\" src={elephant} alt=\"elephant\" />\n                            <div className=\"img-content\">\n                                <p>Connect your wallet</p>\n                                <p>Burn $XEN</p>\n                                <p>Earn crypto</p>\n                                  \n                                <div>\n                                    { (() =>  {\n                                        const currentConnector = connectorsByName[ConnectorNames.Injected]\n                                        const activating = currentConnector === activatingConnector\n                                        const connected = currentConnector === connector\n\n                                        return (\n                                            <Button variant=\"contained\"\n                                                key={ConnectorNames.Injected}\n                                                // aria-describedby={id}\n                                                onClick={!connected ? \n                                                    () => {\n                                                        setActivatingConnector(currentConnector)\n                                                        activate(currentConnector)\n                                                    } : \n                                                    handleClick}\n                                                    className=\"connect-button\">\n                                                \n                                                { activating ? \n                                                    <Spinner color={'black'} /> :\n                                                    !connected ? \n                                                        \"Connect\" :\n                                                        <span>\n                                                            {typeof window.ethereum === 'undefined' ? \n                                                                `Check your prerequisites` : \n                                                                account === undefined ? `Unsupported Network. Switch to ${networkName}` : ''}\n                                                        </span>\n                                                }\n                                            </Button>\n                                        )\n                                    }) ()}\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"col-12 col-lg-5 text-center\">\n                            <div className=\"text-container\">\n                                <img className=\"dark-logo\" src={deb0xen} alt=\"logo\" />\n                                <p>\n                                    Community built crypto protocol <br/> contributing to XEN deflation\n                                </p>\n                                <div className=\"connect-mobile\">\n                                    { (() =>  {\n                                        const currentConnector = connectorsByName[ConnectorNames.Injected]\n                                        const activating = currentConnector === activatingConnector\n                                        const connected = currentConnector === connector\n\n                                        return (\n                                            <Button variant=\"contained\"\n                                                key={ConnectorNames.Injected}\n                                                // aria-describedby={id}\n                                                onClick={!connected ? \n                                                    () => {\n                                                        setActivatingConnector(currentConnector)\n                                                        activate(currentConnector)\n                                                    } : \n                                                    handleClick}\n                                                    className=\"connect-button\">\n                                                \n                                                { activating ? \n                                                    <Spinner color={'black'} /> :\n                                                    !connected ? \n                                                        \"Connect\" :\n                                                        <span>\n                                                            {typeof window.ethereum === 'undefined' ? \n                                                                `Check your prerequisites` : \n                                                                account === undefined ? `Unsupported Network. Switch to ${networkName}` : ''}\n                                                        </span>\n                                                }\n                                            </Button>\n                                        )\n                                    }) ()}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        }\n        </ThemeProvider>\n    </>\n  )\n}\n\n\n","import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\n\nimport { injected } from './connectors'\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        setTried(true)\n      }\n    })\n  }, [activate]) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport function useInactiveListener(suppress: boolean = false) {\n  const { active, error, activate } = useWeb3React()\n\n  useEffect((): any => {\n    const { ethereum } = window as any\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        activate(injected)\n      }\n      const handleChainChanged = (chainId: string | number) => {\n        activate(injected)\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        if (accounts.length > 0) {\n          activate(injected)\n        }\n      }\n      const handleNetworkChanged = (networkId: string | number) => {\n        activate(injected)\n      }\n\n      ethereum.on('connect', handleConnect)\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n      ethereum.on('networkChanged', handleNetworkChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('connect', handleConnect)\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n          ethereum.removeListener('networkChanged', handleNetworkChanged)\n        }\n      }\n    }\n  }, [active, error, suppress, activate])\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}